IDENT               	dimension
IDENT               	common
(                   	(
INT                 	10
,                   	,
INT                 	10
)                   	)
,                   	,
IDENT               	entry
(                   	(
INT                 	3
,                   	,
INT                 	4
)                   	)
,                   	,
IDENT               	read
(                   	(
INT                 	5
,                   	,
INT                 	6
)                   	)
NEW_LINE            	

IDENT               	logical
IDENT               	save
,                   	,
IDENT               	stop
,                   	,
PROGRAM             	program
NEW_LINE            	

IDENT               	character
INTEGER             	integer
,                   	,
IDENT               	data
,                   	,
IDENT               	endif
,                   	,
IDENT               	format
(                   	(
INT                 	10
)                   	)
NEW_LINE            	

INTEGER             	integer
IDENT               	external
,                   	,
IMPLICIT            	implicit
,                   	,
IDENT               	intrinsic
,                   	,
IDENT               	pause
,                   	,
IDENT               	write
(                   	(
INT                 	5
,                   	,
INT                 	6
)                   	)
NEW_LINE            	

IDENT               	real
IDENT               	complex
NEW_LINE            	

IDENT               	external
IDENT               	complex
NEW_LINE            	

IDENT               	data
IDENT               	data
/                   	/
STRING              	'!'
/                   	/
NEW_LINE            	

IMPLICIT            	implicit
=                   	=
IDENT               	none
NEW_LINE            	

IDENT               	assign
=                   	=
IDENT               	block
NEW_LINE            	

IDENT               	exit
=                   	=
IDENT               	assign
NEW_LINE            	

IDENT               	pointer
=                   	=
IDENT               	pointee
NEW_LINE            	

IDENT               	double
=                   	=
IDENT               	precision
NEW_LINE            	

IDENT               	precision
=                   	=
IDENT               	double
NEW_LINE            	

IDENT               	common
(                   	(
INT                 	9
,                   	,
INT                 	0
)                   	)
=                   	=
continue            	continue
                    	**
IDENT               	dimension
NEW_LINE            	

DO                  	do
=                   	=
IDENT               	double
*                   	*
else                	else
-                   	-
END                 	end
+                   	+
ENDDO               	enddo
NEW_LINE            	

IDENT               	entry
(                   	(
IDENT               	external
,                   	,
IMPLICIT            	implicit
)                   	)
=                   	=
IDENT               	intrinsic
-                   	-
IDENT               	pause
NEW_LINE            	

PROGRAM             	program
=                   	=
IDENT               	stop
&&                  	.and.
IDENT               	save
NEW_LINE            	

if                  	if
(                   	(
IDENT               	character
<                   	.lt.
IDENT               	close
)                   	)
THEN                	then
NEW_LINE            	

IDENT               	equivalence
=                   	=
IDENT               	endfile
NEW_LINE            	

else                	else
if                  	if
(                   	(
IDENT               	rewind
-                   	-
IDENT               	backspace
<                   	.lt.
IDENT               	common
(                   	(
INT                 	1
,                   	,
INT                 	2
)                   	)
)                   	)
THEN                	then
NEW_LINE            	

IDENT               	goto
=                   	=
DO                  	do
NEW_LINE            	

if                  	if
=                   	=
IDENT               	logical
NEW_LINE            	

END                 	end
if                  	if
NEW_LINE            	

if                  	if
(                   	(
IDENT               	print
==                  	.eq.
if                  	if
)                   	)
THEN                	then
=                   	=
IDENT               	to
NEW_LINE            	

IDENT               	include
=                   	=
IDENT               	inquire
NEW_LINE            	

IDENT               	open
=                   	=
IDENT               	accept
NEW_LINE            	

IDENT               	read
(                   	(
INT                 	5
,                   	,
INT                 	6
)                   	)
IDENT               	write
(                   	(
INT                 	1
,                   	,
INT                 	2
)                   	)
NEW_LINE            	

IDENT               	read
(                   	(
INT                 	5
,                   	,
INT                 	6
)                   	)
=                   	=
IDENT               	write
(                   	(
INT                 	1
,                   	,
INT                 	2
)                   	)
NEW_LINE            	

INT                 	6
IDENT               	format
(                   	(
IDENT               	i10
)                   	)
NEW_LINE            	

IDENT               	format
(                   	(
IDENT               	i10
)                   	)
=                   	=
IDENT               	data
NEW_LINE            	

return              	return
=                   	=
IDENT               	real
NEW_LINE            	

SUBROUTINE          	subroutine
=                   	=
THEN                	then
NEW_LINE            	

CALL                	call
CALL                	call
(                   	(
IDENT               	complex
,                   	,
IDENT               	endif
)                   	)
NEW_LINE            	

INTEGER             	integer
=                   	=
IDENT               	data
NEW_LINE            	

END                 	end
NEW_LINE            	

SUBROUTINE          	subroutine
CALL                	call
(                   	(
FUNCTION            	function
,                   	,
IDENT               	character
)                   	)
NEW_LINE            	

IDENT               	external
FUNCTION            	function
NEW_LINE            	

IDENT               	character
IDENT               	character
NEW_LINE            	

IDENT               	real
=                   	=
FLOAT               	2.3
NEW_LINE            	

IDENT               	complex
=                   	=
FUNCTION            	function
(                   	(
IDENT               	real
)                   	)
NEW_LINE            	

return              	return
NEW_LINE            	

END                 	end
NEW_LINE            	

FUNCTION            	function
IDENT               	complex
(                   	(
DO                  	do
)                   	)
NEW_LINE            	

IDENT               	dimension
=                   	=
DO                  	do
+                   	+
INT                 	1
NEW_LINE            	

IDENT               	external
=                   	=
INT                 	1
NEW_LINE            	

IDENT               	complex
=                   	=
IDENT               	dimension
/                   	/
IDENT               	external
NEW_LINE            	

return              	return
NEW_LINE            	

END                 	end
NEW_LINE            	

