COMMENT             	*> \brief \b ZGEMM
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE ZGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       COMPLEX*16 ALPHA,BETA
COMMENT             	*       INTEGER K,LDA,LDB,LDC,M,N
COMMENT             	*       CHARACTER TRANSA,TRANSB
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       COMPLEX*16 A(LDA,*),B(LDB,*),C(LDC,*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> ZGEMM  performs one of the matrix-matrix operations
COMMENT             	*>
COMMENT             	*>    C := alpha*op( A )*op( B ) + beta*C,
COMMENT             	*>
COMMENT             	*> where  op( X ) is one of
COMMENT             	*>
COMMENT             	*>    op( X ) = X   or   op( X ) = X**T   or   op( X ) = X**H,
COMMENT             	*>
COMMENT             	*> alpha and beta are scalars, and A, B and C are matrices, with op( A )
COMMENT             	*> an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] TRANSA
COMMENT             	*> \verbatim
COMMENT             	*>          TRANSA is CHARACTER*1
COMMENT             	*>           On entry, TRANSA specifies the form of op( A ) to be used in
COMMENT             	*>           the matrix multiplication as follows:
COMMENT             	*>
COMMENT             	*>              TRANSA = 'N' or 'n',  op( A ) = A.
COMMENT             	*>
COMMENT             	*>              TRANSA = 'T' or 't',  op( A ) = A**T.
COMMENT             	*>
COMMENT             	*>              TRANSA = 'C' or 'c',  op( A ) = A**H.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] TRANSB
COMMENT             	*> \verbatim
COMMENT             	*>          TRANSB is CHARACTER*1
COMMENT             	*>           On entry, TRANSB specifies the form of op( B ) to be used in
COMMENT             	*>           the matrix multiplication as follows:
COMMENT             	*>
COMMENT             	*>              TRANSB = 'N' or 'n',  op( B ) = B.
COMMENT             	*>
COMMENT             	*>              TRANSB = 'T' or 't',  op( B ) = B**T.
COMMENT             	*>
COMMENT             	*>              TRANSB = 'C' or 'c',  op( B ) = B**H.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] M
COMMENT             	*> \verbatim
COMMENT             	*>          M is INTEGER
COMMENT             	*>           On entry,  M  specifies  the number  of rows  of the  matrix
COMMENT             	*>           op( A )  and of the  matrix  C.  M  must  be at least  zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry,  N  specifies the number  of columns of the matrix
COMMENT             	*>           op( B ) and the number of columns of the matrix C. N must be
COMMENT             	*>           at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] K
COMMENT             	*> \verbatim
COMMENT             	*>          K is INTEGER
COMMENT             	*>           On entry,  K  specifies  the number of columns of the matrix
COMMENT             	*>           op( A ) and the number of rows of the matrix op( B ). K must
COMMENT             	*>           be at least  zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is COMPLEX*16
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is COMPLEX*16 array, dimension ( LDA, ka ), where ka is
COMMENT             	*>           k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.
COMMENT             	*>           Before entry with  TRANSA = 'N' or 'n',  the leading  m by k
COMMENT             	*>           part of the array  A  must contain the matrix  A,  otherwise
COMMENT             	*>           the leading  k by m  part of the array  A  must contain  the
COMMENT             	*>           matrix A.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in the calling (sub) program. When  TRANSA = 'N' or 'n' then
COMMENT             	*>           LDA must be at least  max( 1, m ), otherwise  LDA must be at
COMMENT             	*>           least  max( 1, k ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] B
COMMENT             	*> \verbatim
COMMENT             	*>          B is COMPLEX*16 array, dimension ( LDB, kb ), where kb is
COMMENT             	*>           n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.
COMMENT             	*>           Before entry with  TRANSB = 'N' or 'n',  the leading  k by n
COMMENT             	*>           part of the array  B  must contain the matrix  B,  otherwise
COMMENT             	*>           the leading  n by k  part of the array  B  must contain  the
COMMENT             	*>           matrix B.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDB
COMMENT             	*> \verbatim
COMMENT             	*>          LDB is INTEGER
COMMENT             	*>           On entry, LDB specifies the first dimension of B as declared
COMMENT             	*>           in the calling (sub) program. When  TRANSB = 'N' or 'n' then
COMMENT             	*>           LDB must be at least  max( 1, k ), otherwise  LDB must be at
COMMENT             	*>           least  max( 1, n ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] BETA
COMMENT             	*> \verbatim
COMMENT             	*>          BETA is COMPLEX*16
COMMENT             	*>           On entry,  BETA  specifies the scalar  beta.  When  BETA  is
COMMENT             	*>           supplied as zero then C need not be set on input.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] C
COMMENT             	*> \verbatim
COMMENT             	*>          C is COMPLEX*16 array, dimension ( LDC, N )
COMMENT             	*>           Before entry, the leading  m by n  part of the array  C must
COMMENT             	*>           contain the matrix  C,  except when  beta  is zero, in which
COMMENT             	*>           case C need not be set on entry.
COMMENT             	*>           On exit, the array  C  is overwritten by the  m by n  matrix
COMMENT             	*>           ( alpha*op( A )*op( B ) + beta*C ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDC
COMMENT             	*> \verbatim
COMMENT             	*>          LDC is INTEGER
COMMENT             	*>           On entry, LDC specifies the first dimension of C as declared
COMMENT             	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
COMMENT             	*>           max( 1, m ).
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup complex16_blas_level3
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 3 Blas routine.
COMMENT             	*>
COMMENT             	*>  -- Written on 8-February-1989.
COMMENT             	*>     Jack Dongarra, Argonne National Laboratory.
COMMENT             	*>     Iain Duff, AERE Harwell.
COMMENT             	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
COMMENT             	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	ZGEMM
(                   	(
IDENT               	TRANSA
,                   	,
IDENT               	TRANSB
,                   	,
IDENT               	M
,                   	,
IDENT               	N
,                   	,
IDENT               	K
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	B
,                   	,
IDENT               	LDB
,                   	,
IDENT               	BETA
,                   	,
IDENT               	C
,                   	,
IDENT               	LDC
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level3 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	ALPHA
,                   	,
IDENT               	BETA
token(98)           	INTEGER
IDENT               	K
,                   	,
IDENT               	LDA
,                   	,
IDENT               	LDB
,                   	,
IDENT               	LDC
,                   	,
IDENT               	M
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	TRANSA
,                   	,
IDENT               	TRANSB
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	B
(                   	(
IDENT               	LDB
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	C
(                   	(
IDENT               	LDC
,                   	,
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	DCONJG
,                   	,
IDENT               	MAX
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	TEMP
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	J
,                   	,
IDENT               	L
,                   	,
IDENT               	NCOLA
,                   	,
IDENT               	NROWA
,                   	,
IDENT               	NROWB
IDENT               	LOGICAL
IDENT               	CONJA
,                   	,
IDENT               	CONJB
,                   	,
IDENT               	NOTA
,                   	,
IDENT               	NOTB
COMMENT             	*     ..
COMMENT             	*     .. Parameters ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	ONE
IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
(                   	(
FLOAT               	1.0D+0
,                   	,
FLOAT               	0.0D+0
)                   	)
)                   	)
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
(                   	(
FLOAT               	0.0D+0
,                   	,
FLOAT               	0.0D+0
)                   	)
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Set  NOTA  and  NOTB  as  true if  A  and  B  respectively are not
COMMENT             	*     conjugated or transposed, set  CONJA and CONJB  as true if  A  and
COMMENT             	*     B  respectively are to be  transposed but  not conjugated  and set
COMMENT             	*     NROWA, NCOLA and  NROWB  as the number of rows and  columns  of  A
COMMENT             	*     and the number of rows of  B  respectively.
COMMENT             	*
IDENT               	NOTA
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANSA
,                   	,
STRING              	'N'
)                   	)
IDENT               	NOTB
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANSB
,                   	,
STRING              	'N'
)                   	)
IDENT               	CONJA
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANSA
,                   	,
STRING              	'C'
)                   	)
IDENT               	CONJB
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANSB
,                   	,
STRING              	'C'
)                   	)
if                  	IF
(                   	(
IDENT               	NOTA
)                   	)
IDENT               	THEN
IDENT               	NROWA
=                   	=
IDENT               	M
IDENT               	NCOLA
=                   	=
IDENT               	K
else                	ELSE
IDENT               	NROWA
=                   	=
IDENT               	K
IDENT               	NCOLA
=                   	=
IDENT               	M
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	NOTB
)                   	)
IDENT               	THEN
IDENT               	NROWB
=                   	=
IDENT               	K
else                	ELSE
IDENT               	NROWB
=                   	=
IDENT               	N
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	NOTA
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	CONJA
)                   	)
&&                  	.AND.
+                   	+
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANSA
,                   	,
STRING              	'T'
)                   	)
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	NOTB
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	CONJB
)                   	)
&&                  	.AND.
+                   	+
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANSB
,                   	,
STRING              	'T'
)                   	)
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	M
<                   	.LT.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	3
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	4
else                	ELSE
if                  	IF
(                   	(
IDENT               	K
<                   	.LT.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	5
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWA
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	8
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDB
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWB
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	10
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDC
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	M
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	13
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
IDENT               	THEN
token(105)          	CALL
IDENT               	XERBLA
(                   	(
STRING              	'ZGEMM '
,                   	,
IDENT               	INFO
)                   	)
IDENT               	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	M
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
+                   	+
(                   	(
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	K
==                  	.EQ.
INT                 	0
)                   	)
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     And when  alpha.eq.zero.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	10
continue            	CONTINUE
INT                 	20
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	30
continue            	CONTINUE
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	NOTB
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	NOTA
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*           Form  C := alpha*A*B + beta*C.
COMMENT             	*
token(103)          	DO
INT                 	90
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	50
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	50
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	60
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	60
continue            	CONTINUE
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	80
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
token(103)          	DO
INT                 	70
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
INT                 	70
continue            	CONTINUE
INT                 	80
continue            	CONTINUE
INT                 	90
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	CONJA
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**H*B + beta*C.
COMMENT             	*
token(103)          	DO
INT                 	120
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	110
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	100
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	100
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	110
continue            	CONTINUE
INT                 	120
continue            	CONTINUE
else                	ELSE
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**T*B + beta*C
COMMENT             	*
token(103)          	DO
INT                 	150
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	140
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	130
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	130
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	140
continue            	CONTINUE
INT                 	150
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	NOTA
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	CONJB
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*           Form  C := alpha*A*B**H + beta*C.
COMMENT             	*
token(103)          	DO
INT                 	200
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	160
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	160
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	170
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	170
continue            	CONTINUE
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	190
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
token(103)          	DO
INT                 	180
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
INT                 	180
continue            	CONTINUE
INT                 	190
continue            	CONTINUE
INT                 	200
continue            	CONTINUE
else                	ELSE
COMMENT             	*
COMMENT             	*           Form  C := alpha*A*B**T + beta*C
COMMENT             	*
token(103)          	DO
INT                 	250
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	210
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	210
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	220
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	220
continue            	CONTINUE
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	240
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
token(103)          	DO
INT                 	230
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
INT                 	230
continue            	CONTINUE
INT                 	240
continue            	CONTINUE
INT                 	250
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	CONJA
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	CONJB
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**H*B**H + beta*C.
COMMENT             	*
token(103)          	DO
INT                 	280
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	270
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	260
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
INT                 	260
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	270
continue            	CONTINUE
INT                 	280
continue            	CONTINUE
else                	ELSE
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**H*B**T + beta*C
COMMENT             	*
token(103)          	DO
INT                 	310
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	300
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	290
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
INT                 	290
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	300
continue            	CONTINUE
INT                 	310
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	CONJB
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**T*B**H + beta*C
COMMENT             	*
token(103)          	DO
INT                 	340
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	330
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	320
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
INT                 	320
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	330
continue            	CONTINUE
INT                 	340
continue            	CONTINUE
else                	ELSE
COMMENT             	*
COMMENT             	*           Form  C := alpha*A**T*B**T + beta*C
COMMENT             	*
token(103)          	DO
INT                 	370
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	360
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	350
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
INT                 	350
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	360
continue            	CONTINUE
INT                 	370
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     End of ZGEMM .
COMMENT             	*
token(102)          	END
