COMMENT             	*> \brief \b DSDOT
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       DOUBLE PRECISION FUNCTION DSDOT(N,SX,INCX,SY,INCY)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       INTEGER INCX,INCY,N
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       REAL SX(*),SY(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*    AUTHORS
COMMENT             	*    =======
COMMENT             	*    Lawson, C. L., (JPL), Hanson, R. J., (SNLA),
COMMENT             	*    Kincaid, D. R., (U. of Texas), Krogh, F. T., (JPL)
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> Compute the inner product of two vectors with extended
COMMENT             	*> precision accumulation and result.
COMMENT             	*>
COMMENT             	*> Returns D.P. dot product accumulated in D.P., for S.P. SX and SY
COMMENT             	*> DSDOT = sum for I = 0 to N-1 of  SX(LX+I*INCX) * SY(LY+I*INCY),
COMMENT             	*> where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is
COMMENT             	*> defined in a similar way using INCY.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>         number of elements in input vector(s)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] SX
COMMENT             	*> \verbatim
COMMENT             	*>          SX is REAL array, dimension(N)
COMMENT             	*>         single precision vector with N elements
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>          storage spacing between elements of SX
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] SY
COMMENT             	*> \verbatim
COMMENT             	*>          SY is REAL array, dimension(N)
COMMENT             	*>         single precision vector with N elements
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCY
COMMENT             	*> \verbatim
COMMENT             	*>          INCY is INTEGER
COMMENT             	*>         storage spacing between elements of SY
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \result DSDOT
COMMENT             	*> \verbatim
COMMENT             	*>          DSDOT is DOUBLE PRECISION
COMMENT             	*>         DSDOT  double precision dot product (zero if N.LE.0)
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup double_blas_level1
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*> \par References:
COMMENT             	*  ================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>
COMMENT             	*>  C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.
COMMENT             	*>  Krogh, Basic linear algebra subprograms for Fortran
COMMENT             	*>  usage, Algorithm No. 539, Transactions on Mathematical
COMMENT             	*>  Software 5, 3 (September 1979), pp. 308-323.
COMMENT             	*>
COMMENT             	*>  REVISION HISTORY  (YYMMDD)
COMMENT             	*>
COMMENT             	*>  791001  DATE WRITTEN
COMMENT             	*>  890831  Modified array declarations.  (WRB)
COMMENT             	*>  890831  REVISION DATE from Version 3.2
COMMENT             	*>  891214  Prologue converted to Version 4.0 format.  (BAB)
COMMENT             	*>  920310  Corrected definition of LX in DESCRIPTION.  (WRB)
COMMENT             	*>  920501  Reformatted the REFERENCES section.  (WRB)
COMMENT             	*>  070118  Reformat to LAPACK style (JL)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
IDENT               	DOUBLE
IDENT               	PRECISION
token(101)          	FUNCTION
IDENT               	DSDOT
(                   	(
IDENT               	N
,                   	,
IDENT               	SX
,                   	,
IDENT               	INCX
,                   	,
IDENT               	SY
,                   	,
IDENT               	INCY
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level1 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	REAL
IDENT               	SX
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	SY
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*  Lawson, C. L., (JPL), Hanson, R. J., (SNLA),
COMMENT             	*  Kincaid, D. R., (U. of Texas), Krogh, F. T., (JPL)
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Local Scalars ..
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
,                   	,
IDENT               	NS
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	DBLE
COMMENT             	*     ..
IDENT               	DSDOT
=                   	=
FLOAT               	0.0
IDENT               	D0
if                  	IF
(                   	(
IDENT               	N
.                   	.
IDENT               	LE
.                   	.
INT                 	0
)                   	)
IDENT               	RETURN
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	INCY
.                   	.
IDENT               	AND
.                   	.
IDENT               	INCX
.                   	.
IDENT               	GT
.                   	.
INT                 	0
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*     Code for equal, positive, non-unit increments.
COMMENT             	*
IDENT               	NS
=                   	=
IDENT               	N
*                   	*
IDENT               	INCX
token(103)          	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	NS
,                   	,
IDENT               	INCX
IDENT               	DSDOT
=                   	=
IDENT               	DSDOT
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	SX
(                   	(
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	SY
(                   	(
IDENT               	I
)                   	)
)                   	)
token(102)          	END
token(103)          	DO
else                	ELSE
COMMENT             	*
COMMENT             	*     Code for unequal or nonpositive increments.
COMMENT             	*
IDENT               	KX
=                   	=
INT                 	1
IDENT               	KY
=                   	=
INT                 	1
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	LT
.                   	.
INT                 	0
)                   	)
IDENT               	KX
=                   	=
INT                 	1
+                   	+
(                   	(
INT                 	1
-                   	-
IDENT               	N
)                   	)
*                   	*
IDENT               	INCX
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	LT
.                   	.
INT                 	0
)                   	)
IDENT               	KY
=                   	=
INT                 	1
+                   	+
(                   	(
INT                 	1
-                   	-
IDENT               	N
)                   	)
*                   	*
IDENT               	INCY
token(103)          	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	DSDOT
=                   	=
IDENT               	DSDOT
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	SX
(                   	(
IDENT               	KX
)                   	)
)                   	)
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	SY
(                   	(
IDENT               	KY
)                   	)
)                   	)
IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
IDENT               	INCX
IDENT               	KY
=                   	=
IDENT               	KY
+                   	+
IDENT               	INCY
token(102)          	END
token(103)          	DO
token(102)          	END
if                  	IF
IDENT               	RETURN
token(102)          	END
