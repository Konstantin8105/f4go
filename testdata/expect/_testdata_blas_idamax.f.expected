COMMENT             	*> \brief \b IDAMAX
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       INTEGER FUNCTION IDAMAX(N,DX,INCX)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       INTEGER INCX,N
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       DOUBLE PRECISION DX(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>    IDAMAX finds the index of the first element having maximum absolute value.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>         number of elements in input vector(s)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] DX
COMMENT             	*> \verbatim
COMMENT             	*>          DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>         storage spacing between elements of SX
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date November 2017
COMMENT             	*
COMMENT             	*> \ingroup aux_blas
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>     jack dongarra, linpack, 3/11/78.
COMMENT             	*>     modified 3/93 to return if incx .le. 0.
COMMENT             	*>     modified 12/3/93, array(1) declarations changed to array(*)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(98)           	INTEGER
token(101)          	FUNCTION
IDENT               	IDAMAX
(                   	(
IDENT               	N
,                   	,
IDENT               	DX
,                   	,
IDENT               	INCX
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     November 2017
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	N
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	DX
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Local Scalars ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	DMAX
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	IX
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	DABS
COMMENT             	*     ..
IDENT               	IDAMAX
=                   	=
INT                 	0
if                  	IF
(                   	(
IDENT               	N
.                   	.
IDENT               	LT
.                   	.
INT                 	1
.                   	.
IDENT               	OR
.                   	.
IDENT               	INCX
.                   	.
IDENT               	LE
.                   	.
INT                 	0
)                   	)
IDENT               	RETURN
IDENT               	IDAMAX
=                   	=
INT                 	1
if                  	IF
(                   	(
IDENT               	N
.                   	.
IDENT               	EQ
.                   	.
INT                 	1
)                   	)
IDENT               	RETURN
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
INT                 	1
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*        code for increment equal to 1
COMMENT             	*
IDENT               	DMAX
=                   	=
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
INT                 	1
)                   	)
)                   	)
token(103)          	DO
IDENT               	I
=                   	=
INT                 	2
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
)                   	)
.                   	.
IDENT               	GT
.                   	.
IDENT               	DMAX
)                   	)
IDENT               	THEN
IDENT               	IDAMAX
=                   	=
IDENT               	I
IDENT               	DMAX
=                   	=
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
)                   	)
token(102)          	END
if                  	IF
token(102)          	END
token(103)          	DO
else                	ELSE
COMMENT             	*
COMMENT             	*        code for increment not equal to 1
COMMENT             	*
IDENT               	IX
=                   	=
INT                 	1
IDENT               	DMAX
=                   	=
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
INT                 	1
)                   	)
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
token(103)          	DO
IDENT               	I
=                   	=
INT                 	2
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
IDENT               	IX
)                   	)
)                   	)
.                   	.
IDENT               	GT
.                   	.
IDENT               	DMAX
)                   	)
IDENT               	THEN
IDENT               	IDAMAX
=                   	=
IDENT               	I
IDENT               	DMAX
=                   	=
IDENT               	DABS
(                   	(
IDENT               	DX
(                   	(
IDENT               	IX
)                   	)
)                   	)
token(102)          	END
if                  	IF
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
token(102)          	END
token(103)          	DO
token(102)          	END
if                  	IF
IDENT               	RETURN
token(102)          	END
