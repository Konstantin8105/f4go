COMMENT             	! All the keywords recognized by ftnchek as of 21 July 2000
token(97)           	PROGRAM
IDENT               	allkeys
token(100)          	IMPLICIT
IDENT               	NONE
IDENT               	BYTE
IDENT               	b
(                   	(
INT                 	100
)                   	)
IDENT               	CHARACTER
*                   	*
INT                 	100
IDENT               	c
IDENT               	DOUBLE
IDENT               	COMPLEX
IDENT               	a
IDENT               	COMPLEX
IDENT               	z
IDENT               	DOUBLEPRECISION
IDENT               	d
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	f
IDENT               	EXTERNAL
IDENT               	f
,                   	,
IDENT               	foo
,                   	,
IDENT               	iftn_calloc
token(98)           	INTEGER
IDENT               	i
,                   	,
IDENT               	l
,                   	,
IDENT               	u
,                   	,
IDENT               	iftn_calloc
IDENT               	LOGICAL
IDENT               	bool
IDENT               	POINTER
(                   	(
IDENT               	ptr
,                   	,
IDENT               	ptee
)                   	)
token(98)           	INTEGER
IDENT               	ptee
(                   	(
*                   	*
)                   	)
IDENT               	REAL
IDENT               	pi
IDENT               	EQUIVALENCE
(                   	(
IDENT               	b
(                   	(
INT                 	1
)                   	)
,                   	,
IDENT               	i
)                   	)
IDENT               	NAMELIST
/                   	/
IDENT               	n1
/                   	/
IDENT               	a
,                   	,
IDENT               	b
,                   	,
IDENT               	c
IDENT               	PARAMETER
(                   	(
IDENT               	pi
=                   	=
FLOAT               	3.1415926
)                   	)
IDENT               	INCLUDE
STRING              	'block2.i'
IDENT               	ACCEPT
*                   	*
,                   	,
IDENT               	c
IDENT               	OPEN
(                   	(
IDENT               	unit
=                   	=
INT                 	10
,                   	,
IDENT               	file
=                   	=
IDENT               	c
)                   	)
IDENT               	u
=                   	=
INT                 	10
IDENT               	ASSIGN
INT                 	100
IDENT               	TO
IDENT               	l
INT                 	100
continue            	CONTINUE
IDENT               	READ
(                   	(
INT                 	10
,                   	,
*                   	*
)                   	)
IDENT               	a
,                   	,
IDENT               	x
,                   	,
IDENT               	i
,                   	,
IDENT               	z
,                   	,
IDENT               	d
IDENT               	BACKSPACE
INT                 	10
IDENT               	BACKSPACE
IDENT               	u
IDENT               	BACKSPACE
(                   	(
IDENT               	unit
=                   	=
INT                 	10
)                   	)
IDENT               	ptr
=                   	=
IDENT               	iftn_calloc
(                   	(
INT                 	1000
,                   	,
INT                 	4
)                   	)
token(105)          	CALL
IDENT               	foo
IDENT               	SELECTCASE
(                   	(
IDENT               	i
)                   	)
IDENT               	CASE
(                   	(
INT                 	1
)                   	)
IDENT               	ptee
(                   	(
IDENT               	i
)                   	)
=                   	=
INT                 	2
IDENT               	CASEDEFAULT
IDENT               	ptee
(                   	(
IDENT               	i
)                   	)
=                   	=
IDENT               	ptee
(                   	(
INT                 	1
)                   	)
IDENT               	ENDSELECT
IDENT               	SELECT
IDENT               	CASE
(                   	(
IDENT               	i
)                   	)
IDENT               	CASE
(                   	(
INT                 	2
)                   	)
IDENT               	i
=                   	=
INT                 	3
IDENT               	CASE
IDENT               	DEFAULT
IDENT               	i
=                   	=
INT                 	4
token(102)          	END
IDENT               	SELECT
token(103)          	DO
INT                 	200
IDENT               	i
=                   	=
INT                 	1
,                   	,
INT                 	10
INT                 	200
IDENT               	PRINT
*                   	*
,                   	,
IDENT               	i
if                  	IF
(                   	(
IDENT               	x
==                  	.eq.
IDENT               	i
)                   	)
IDENT               	GOTO
IDENT               	l
IDENT               	INQUIRE
(                   	(
IDENT               	UNIT
=                   	=
IDENT               	u
,                   	,
IDENT               	IOSTAT
=                   	=
IDENT               	i
)                   	)
IDENT               	ENDFILE
INT                 	10
token(102)          	END
IDENT               	FILE
IDENT               	u
IDENT               	ENDFILE
(                   	(
IDENT               	unit
=                   	=
INT                 	10
,                   	,
IDENT               	err
=                   	=
INT                 	100
)                   	)
IDENT               	REWIND
INT                 	10
IDENT               	REWIND
IDENT               	u
IDENT               	REWIND
(                   	(
IDENT               	unit
=                   	=
INT                 	10
)                   	)
IDENT               	CLOSE
(                   	(
IDENT               	UNIT
=                   	=
INT                 	10
)                   	)
IDENT               	bool
=                   	=
IDENT               	.TRUE.
if                  	IF
(                   	(
IDENT               	bool
)                   	)
IDENT               	THEN
IDENT               	WRITE
(                   	(
INT                 	10
,                   	,
*                   	*
)                   	)
IDENT               	a
,                   	,
IDENT               	y
,                   	,
IDENT               	z
IDENT               	ELSEIF
(                   	(
!=                  	.NOT.
.                   	.
IDENT               	E
.                   	.
IDENT               	HEN
IDENT               	WRITE
(                   	(
IDENT               	UNIT
=                   	=
INT                 	10
,                   	,
IDENT               	FMT
=                   	=
INT                 	900
)                   	)
STRING              	'Testing 1, 2, 3'
INT                 	900
IDENT               	FORMAT
(                   	(
INT                 	1
IDENT               	x
,                   	,
IDENT               	a20
)                   	)
else                	ELSE
token(105)          	CALL
IDENT               	bar
IDENT               	STOP
IDENT               	ENDIF
IDENT               	DOWHILE
(                   	(
IDENT               	i
<                   	.lt.
INT                 	100
)                   	)
if                  	IF
(                   	(
IDENT               	f
(                   	(
IDENT               	d
)                   	)
>                   	.gt.
FLOAT               	3.14
)                   	)
IDENT               	THEN
IDENT               	CYCLE
else                	ELSE
IDENT               	EXIT
token(102)          	END
if                  	IF
token(104)          	ENDDO
IDENT               	i
=                   	=
INT                 	1
token(103)          	DO
IDENT               	WHILE
(                   	(
IDENT               	i
<                   	.lt.
INT                 	100
)                   	)
IDENT               	i
=                   	=
IDENT               	i
*                   	*
INT                 	2
token(102)          	END
token(103)          	DO
token(103)          	DO
INT                 	300
IDENT               	WHILE
(                   	(
IDENT               	x
>                   	.gt.
FLOAT               	0.0
)                   	)
IDENT               	TYPE
*                   	*
,                   	,
IDENT               	pi
,                   	,
STRING              	'Over and over'
INT                 	300
continue            	CONTINUE
token(103)          	DO
INT                 	4321
,                   	,
IDENT               	WHILE
(                   	(
IDENT               	x
>                   	.gt.
FLOAT               	0.0
)                   	)
IDENT               	TYPE
*                   	*
,                   	,
IDENT               	pi
,                   	,
STRING              	'Over and over'
INT                 	4321
continue            	CONTINUE
IDENT               	GO
IDENT               	TO
INT                 	100
token(102)          	END
IDENT               	DOUBLEPRECISION
token(101)          	FUNCTION
IDENT               	f
(                   	(
IDENT               	x
)                   	)
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	x
IDENT               	REAL
IDENT               	y1
,                   	,
IDENT               	y2
IDENT               	DOUBLECOMPLEX
IDENT               	a
IDENT               	SAVE
IDENT               	a
IDENT               	DIMENSION
IDENT               	a
(                   	(
INT                 	2
)                   	)
IDENT               	INTRINSIC
IDENT               	sqrt
IDENT               	COMMON
/                   	/
IDENT               	block1
/                   	/
IDENT               	y1
,                   	,
IDENT               	y2
IDENT               	a
(                   	(
INT                 	1
)                   	)
=                   	=
(                   	(
FLOAT               	1.0d1
,                   	,
FLOAT               	2.0d2
)                   	)
IDENT               	a
(                   	(
INT                 	2
)                   	)
=                   	=
IDENT               	a
(                   	(
INT                 	1
)                   	)
IDENT               	f
=                   	=
IDENT               	x
*                   	*
IDENT               	dble
(                   	(
IDENT               	y1
*                   	*
IDENT               	y2
)                   	)
*                   	*
IDENT               	sqrt
(                   	(
IDENT               	real
(                   	(
IDENT               	a
(                   	(
INT                 	1
)                   	)
)                   	)
)                   	)
IDENT               	RETURN
token(102)          	END
token(96)           	SUBROUTINE
IDENT               	foo
token(100)          	IMPLICIT
token(98)           	INTEGER
(                   	(
IDENT               	A
-                   	-
IDENT               	Z
)                   	)
IDENT               	WRITE
(                   	(
INT                 	10
,                   	,
*                   	*
)                   	)
STRING              	'foo'
IDENT               	RETURN
IDENT               	ENTRY
IDENT               	bar
IDENT               	WRITE
(                   	(
INT                 	10
,                   	,
*                   	*
)                   	)
STRING              	'bar'
IDENT               	PAUSE
IDENT               	RETURN
token(102)          	END
IDENT               	BLOCKDATA
IDENT               	bdat1
IDENT               	COMMON
/                   	/
IDENT               	block1
/                   	/
IDENT               	a
,                   	,
IDENT               	b
IDENT               	DATA
IDENT               	a
,                   	,
IDENT               	b
/                   	/
FLOAT               	1.0
,                   	,
FLOAT               	2.0
/                   	/
token(102)          	END
IDENT               	BLOCK
IDENT               	DATA
IDENT               	bdat2
IDENT               	IMPLICITNONE
IDENT               	INCLUDE
STRING              	'block2.i'
IDENT               	DATA
IDENT               	x
,                   	,
IDENT               	y
/                   	/
FLOAT               	1.0
,                   	,
FLOAT               	2.0
/                   	/
token(102)          	END
