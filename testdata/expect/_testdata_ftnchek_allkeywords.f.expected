COMMENT	! All the keywords recognized by ftnchek as of 21 July 2000
token(97)	PROGRAM
IDENT	allkeys
token(100)	IMPLICIT
IDENT	NONE
IDENT	BYTE
IDENT	b
(	(
IDENT	100
)	)
IDENT	CHARACTER
*	*1
IDENT	00
IDENT	c
IDENT	DOUBLE
IDENT	COMPLEX
IDENT	a
IDENT	COMPLEX
IDENT	z
IDENT	DOUBLEPRECISION
IDENT	d
IDENT	DOUBLE
IDENT	PRECISION
IDENT	f
IDENT	EXTERNAL
IDENT	f
,	,
IDENT	foo
,	,
IDENT	iftn_calloc
token(98)	INTEGER
IDENT	i
,	,
IDENT	l
,	,
IDENT	u
,	,
IDENT	iftn_calloc
IDENT	LOGICAL
IDENT	bool
IDENT	POINTER
(	(
IDENT	ptr
,	,
IDENT	ptee
)	)
token(98)	INTEGER
IDENT	ptee
(	(
*	*)
IDENT	REAL
IDENT	pi
IDENT	EQUIVALENCE
(	(
IDENT	b
(	(
IDENT	1
)	)
,	,
IDENT	i
)	)
IDENT	NAMELIST
/	/
IDENT	n1
/	/
IDENT	a
,	,
IDENT	b
,	,
IDENT	c
IDENT	PARAMETER
(	(
IDENT	pi
=	=
IDENT	3
.	.
IDENT	1415926
)	)
IDENT	INCLUDE
STRING	'block2.i'
IDENT	ACCEPT
*	*,
IDENT	c
IDENT	OPEN
(	(
IDENT	unit
=	=
IDENT	10
,	,
IDENT	file
=	=
IDENT	c
)	)
IDENT	u
=	=
IDENT	10
IDENT	ASSIGN
IDENT	100
IDENT	TO
IDENT	l
IDENT	100
IDENT	CONTINUE
IDENT	READ
(	(
IDENT	10
,	,
*	*)
IDENT	a
,	,
IDENT	x
,	,
IDENT	i
,	,
IDENT	z
,	,
IDENT	d
IDENT	BACKSPACE
IDENT	10
IDENT	BACKSPACE
IDENT	u
IDENT	BACKSPACE
(	(
IDENT	unit
=	=
IDENT	10
)	)
IDENT	ptr
=	=
IDENT	iftn_calloc
(	(
IDENT	1000
,	,
IDENT	4
)	)
IDENT	CALL
IDENT	foo
IDENT	SELECTCASE
(	(
IDENT	i
)	)
IDENT	CASE
(	(
IDENT	1
)	)
IDENT	ptee
(	(
IDENT	i
)	)
=	=
IDENT	2
IDENT	CASEDEFAULT
IDENT	ptee
(	(
IDENT	i
)	)
=	=
IDENT	ptee
(	(
IDENT	1
)	)
IDENT	ENDSELECT
IDENT	SELECT
IDENT	CASE
(	(
IDENT	i
)	)
IDENT	CASE
(	(
IDENT	2
)	)
IDENT	i
=	=
IDENT	3
IDENT	CASE
IDENT	DEFAULT
IDENT	i
=	=
IDENT	4
IDENT	END
IDENT	SELECT
IDENT	DO
IDENT	200
IDENT	i
=	=
IDENT	1
,	,
IDENT	10
IDENT	200
IDENT	PRINT
*	*,
IDENT	i
IDENT	IF
(	(
IDENT	x
.	.
IDENT	eq
.	.
IDENT	i
)	)
IDENT	GOTO
IDENT	l
IDENT	INQUIRE
(	(
IDENT	UNIT
=	=
IDENT	u
,	,
IDENT	IOSTAT
=	=
IDENT	i
)	)
IDENT	ENDFILE
IDENT	10
IDENT	END
IDENT	FILE
IDENT	u
IDENT	ENDFILE
(	(
IDENT	unit
=	=
IDENT	10
,	,
IDENT	err
=	=
IDENT	100
)	)
IDENT	REWIND
IDENT	10
IDENT	REWIND
IDENT	u
IDENT	REWIND
(	(
IDENT	unit
=	=
IDENT	10
)	)
IDENT	CLOSE
(	(
IDENT	UNIT
=	=
IDENT	10
)	)
IDENT	bool
=	=
.	.
IDENT	TRUE
.	.
IDENT	IF
(	(
IDENT	bool
)	)
IDENT	THEN
IDENT	WRITE
(	(
IDENT	10
,	,
*	*)
IDENT	a
,	,
IDENT	y
,	,
IDENT	z
IDENT	ELSEIF
(	(
.	.
IDENT	NOT
.	.
.	.
IDENT	FALSE
.	.
)	)
IDENT	THEN
IDENT	WRITE
(	(
IDENT	UNIT
=	=
IDENT	10
,	,
IDENT	FMT
=	=
IDENT	900
)	)
STRING	'Testing 1, 2, 3'
IDENT	900
IDENT	FORMAT
(	(
IDENT	1
IDENT	x
,	,
IDENT	a20
)	)
IDENT	ELSE
IDENT	CALL
IDENT	bar
IDENT	STOP
IDENT	ENDIF
IDENT	DOWHILE
(	(
IDENT	i
.	.
IDENT	lt
.	.
IDENT	100
)	)
IDENT	IF
(	(
IDENT	f
(	(
IDENT	d
)	)
.	.
IDENT	gt
.	.
IDENT	3
.	.
IDENT	14
)	)
IDENT	THEN
IDENT	CYCLE
IDENT	ELSE
IDENT	EXIT
IDENT	END
IDENT	IF
IDENT	ENDDO
IDENT	i
=	=
IDENT	1
IDENT	DO
IDENT	WHILE
(	(
IDENT	i
.	.
IDENT	lt
.	.
IDENT	100
)	)
IDENT	i
=	=
IDENT	i
*	*2
IDENT	END
IDENT	DO
IDENT	DO
IDENT	300
IDENT	WHILE
(	(
IDENT	x
.	.
IDENT	gt
.	.
IDENT	0
.	.
IDENT	0
)	)
IDENT	TYPE
*	*,
IDENT	pi
,	,
STRING	'Over and over'
IDENT	300
IDENT	CONTINUE
IDENT	DO
IDENT	4321
,	,
IDENT	WHILE
(	(
IDENT	x
.	.
IDENT	gt
.	.
IDENT	0
.	.
IDENT	0
)	)
IDENT	TYPE
*	*,
IDENT	pi
,	,
STRING	'Over and over'
IDENT	4321
IDENT	CONTINUE
IDENT	GO
IDENT	TO
IDENT	100
IDENT	END
IDENT	DOUBLEPRECISION
token(101)	FUNCTION
IDENT	f
(	(
IDENT	x
)	)
IDENT	DOUBLE
IDENT	PRECISION
IDENT	x
IDENT	REAL
IDENT	y1
,	,
IDENT	y2
IDENT	DOUBLECOMPLEX
IDENT	a
IDENT	SAVE
IDENT	a
IDENT	DIMENSION
IDENT	a
(	(
IDENT	2
)	)
IDENT	INTRINSIC
IDENT	sqrt
IDENT	COMMON
/	/
IDENT	block1
/	/
IDENT	y1
,	,
IDENT	y2
IDENT	a
(	(
IDENT	1
)	)
=	=
(	(
IDENT	1
.	.
IDENT	0
IDENT	d1
,	,
IDENT	2
.	.
IDENT	0
IDENT	d2
)	)
IDENT	a
(	(
IDENT	2
)	)
=	=
IDENT	a
(	(
IDENT	1
)	)
IDENT	f
=	=
IDENT	x
*	*d
IDENT	ble
(	(
IDENT	y1
*	*y
IDENT	2
)	)
*	* 
IDENT	sqrt
(	(
IDENT	real
(	(
IDENT	a
(	(
IDENT	1
)	)
)	)
)	)
IDENT	RETURN
IDENT	END
token(96)	SUBROUTINE
IDENT	foo
token(100)	IMPLICIT
token(98)	INTEGER
(	(
IDENT	A
-	-
IDENT	Z
)	)
IDENT	WRITE
(	(
IDENT	10
,	,
*	*)
STRING	'foo'
IDENT	RETURN
IDENT	ENTRY
IDENT	bar
IDENT	WRITE
(	(
IDENT	10
,	,
*	*)
STRING	'bar'
IDENT	PAUSE
IDENT	RETURN
IDENT	END
IDENT	BLOCKDATA
IDENT	bdat1
IDENT	COMMON
/	/
IDENT	block1
/	/
IDENT	a
,	,
IDENT	b
IDENT	DATA
IDENT	a
,	,
IDENT	b
/	/
IDENT	1
.	.
IDENT	0
,	,
IDENT	2
.	.
IDENT	0
/	/
IDENT	END
IDENT	BLOCK
IDENT	DATA
IDENT	bdat2
IDENT	IMPLICITNONE
IDENT	INCLUDE
STRING	'block2.i'
IDENT	DATA
IDENT	x
,	,
IDENT	y
/	/
IDENT	1
.	.
IDENT	0
,	,
IDENT	2
.	.
IDENT	0
/	/
IDENT	END
