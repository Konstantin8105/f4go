COMMENT	> \brief \b CSROT
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE CSROT( N, CX, INCX, CY, INCY, C, S )
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       INTEGER           INCX, INCY, N
COMMENT	*       REAL              C, S
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       COMPLEX           CX( * ), CY( * )
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*> CSROT applies a plane rotation, where the cos and sin (c and s) are real
COMMENT	*> and the vectors cx and cy are complex.
COMMENT	*> jack dongarra, linpack, 3/11/78.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in] N
COMMENT	*> \verbatim
COMMENT	*>          N is INTEGER
COMMENT	*>           On entry, N specifies the order of the vectors cx and cy.
COMMENT	*>           N must be at least zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] CX
COMMENT	*> \verbatim
COMMENT	*>          CX is COMPLEX array, dimension at least
COMMENT	*>           ( 1 + ( N - 1 )*abs( INCX ) ).
COMMENT	*>           Before entry, the incremented array CX must contain the n
COMMENT	*>           element vector cx. On exit, CX is overwritten by the updated
COMMENT	*>           vector cx.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] INCX
COMMENT	*> \verbatim
COMMENT	*>          INCX is INTEGER
COMMENT	*>           On entry, INCX specifies the increment for the elements of
COMMENT	*>           CX. INCX must not be zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] CY
COMMENT	*> \verbatim
COMMENT	*>          CY is COMPLEX array, dimension at least
COMMENT	*>           ( 1 + ( N - 1 )*abs( INCY ) ).
COMMENT	*>           Before entry, the incremented array CY must contain the n
COMMENT	*>           element vector cy. On exit, CY is overwritten by the updated
COMMENT	*>           vector cy.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] INCY
COMMENT	*> \verbatim
COMMENT	*>          INCY is INTEGER
COMMENT	*>           On entry, INCY specifies the increment for the elements of
COMMENT	*>           CY. INCY must not be zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] C
COMMENT	*> \verbatim
COMMENT	*>          C is REAL
COMMENT	*>           On entry, C specifies the cosine, cos.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] S
COMMENT	*> \verbatim
COMMENT	*>          S is REAL
COMMENT	*>           On entry, S specifies the sine, sin.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date December 2016
COMMENT	*
COMMENT	*> \ingroup complex_blas_level1
COMMENT	*
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	CSROT
(	(
IDENT	N
,	,
IDENT	CX
,	,
IDENT	INCX
,	,
IDENT	CY
,	,
IDENT	INCY
,	,
IDENT	C
,	,
IDENT	S
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level1 routine (version 3.7.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     December 2016
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
token(98)	INTEGER
IDENT	INCX
,	,
IDENT	INCY
,	,
IDENT	N
IDENT	REAL
IDENT	C
,	,
IDENT	S
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	COMPLEX
IDENT	CX
(	(
*	* 
)	)
,	,
IDENT	CY
(	(
*	* 
)	)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. Local Scalars ..
token(98)	INTEGER
IDENT	I
,	,
IDENT	IX
,	,
IDENT	IY
IDENT	COMPLEX
IDENT	CTEMP
COMMENT	*     ..
COMMENT	*     .. Executable Statements ..
COMMENT	*
if	IF
(	(
IDENT	N
.	.
IDENT	LE
.	.
IDENT	0
)	)
IDENT	RETURN
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	1
.	.
IDENT	AND
.	.
IDENT	INCY
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	THEN
COMMENT	*
COMMENT	*        code for both increments equal to 1
COMMENT	*
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	N
IDENT	CTEMP
=	=
IDENT	C
*	*C
IDENT	X
(	(
IDENT	I
)	)
+	+
IDENT	S
*	*C
IDENT	Y
(	(
IDENT	I
)	)
IDENT	CY
(	(
IDENT	I
)	)
=	=
IDENT	C
*	*C
IDENT	Y
(	(
IDENT	I
)	)
-	-
IDENT	S
*	*C
IDENT	X
(	(
IDENT	I
)	)
IDENT	CX
(	(
IDENT	I
)	)
=	=
IDENT	CTEMP
IDENT	END
IDENT	DO
IDENT	ELSE
COMMENT	*
COMMENT	*        code for unequal increments or equal increments not equal
COMMENT	*          to 1
COMMENT	*
IDENT	IX
=	=
IDENT	1
IDENT	IY
=	=
IDENT	1
if	IF
(	(
IDENT	INCX
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	IX
=	=
(	(
-	-
IDENT	N
+	+
IDENT	1
)	)
*	*I
IDENT	NCX
+	+
IDENT	1
if	IF
(	(
IDENT	INCY
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	IY
=	=
(	(
-	-
IDENT	N
+	+
IDENT	1
)	)
*	*I
IDENT	NCY
+	+
IDENT	1
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	N
IDENT	CTEMP
=	=
IDENT	C
*	*C
IDENT	X
(	(
IDENT	IX
)	)
+	+
IDENT	S
*	*C
IDENT	Y
(	(
IDENT	IY
)	)
IDENT	CY
(	(
IDENT	IY
)	)
=	=
IDENT	C
*	*C
IDENT	Y
(	(
IDENT	IY
)	)
-	-
IDENT	S
*	*C
IDENT	X
(	(
IDENT	IX
)	)
IDENT	CX
(	(
IDENT	IX
)	)
=	=
IDENT	CTEMP
IDENT	IX
=	=
IDENT	IX
+	+
IDENT	INCX
IDENT	IY
=	=
IDENT	IY
+	+
IDENT	INCY
IDENT	END
IDENT	DO
IDENT	END
if	IF
IDENT	RETURN
IDENT	END
