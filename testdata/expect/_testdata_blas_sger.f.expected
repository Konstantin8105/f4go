COMMENT             	*> \brief \b SGER
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE SGER(M,N,ALPHA,X,INCX,Y,INCY,A,LDA)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       REAL ALPHA
COMMENT             	*       INTEGER INCX,INCY,LDA,M,N
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       REAL A(LDA,*),X(*),Y(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> SGER   performs the rank 1 operation
COMMENT             	*>
COMMENT             	*>    A := alpha*x*y**T + A,
COMMENT             	*>
COMMENT             	*> where alpha is a scalar, x is an m element vector, y is an n element
COMMENT             	*> vector and A is an m by n matrix.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] M
COMMENT             	*> \verbatim
COMMENT             	*>          M is INTEGER
COMMENT             	*>           On entry, M specifies the number of rows of the matrix A.
COMMENT             	*>           M must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the number of columns of the matrix A.
COMMENT             	*>           N must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is REAL
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] X
COMMENT             	*> \verbatim
COMMENT             	*>          X is REAL array, dimension at least
COMMENT             	*>           ( 1 + ( m - 1 )*abs( INCX ) ).
COMMENT             	*>           Before entry, the incremented array X must contain the m
COMMENT             	*>           element vector x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>           On entry, INCX specifies the increment for the elements of
COMMENT             	*>           X. INCX must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] Y
COMMENT             	*> \verbatim
COMMENT             	*>          Y is REAL array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCY ) ).
COMMENT             	*>           Before entry, the incremented array Y must contain the n
COMMENT             	*>           element vector y.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCY
COMMENT             	*> \verbatim
COMMENT             	*>          INCY is INTEGER
COMMENT             	*>           On entry, INCY specifies the increment for the elements of
COMMENT             	*>           Y. INCY must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is REAL array, dimension ( LDA, N )
COMMENT             	*>           Before entry, the leading m by n part of the array A must
COMMENT             	*>           contain the matrix of coefficients. On exit, A is
COMMENT             	*>           overwritten by the updated matrix.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in the calling (sub) program. LDA must be at least
COMMENT             	*>           max( 1, m ).
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup single_blas_level2
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 2 Blas routine.
COMMENT             	*>
COMMENT             	*>  -- Written on 22-October-1986.
COMMENT             	*>     Jack Dongarra, Argonne National Lab.
COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
COMMENT             	*>     Sven Hammarling, Nag Central Office.
COMMENT             	*>     Richard Hanson, Sandia National Labs.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	SGER
(                   	(
IDENT               	M
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	Y
,                   	,
IDENT               	INCY
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	REAL
IDENT               	ALPHA
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	LDA
,                   	,
IDENT               	M
,                   	,
IDENT               	N
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	REAL
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	Y
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Parameters ..
IDENT               	REAL
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
IDENT               	0
.                   	.
IDENT               	0
IDENT               	E
+                   	+
IDENT               	0
)                   	)
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	REAL
IDENT               	TEMP
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	J
,                   	,
IDENT               	JY
,                   	,
IDENT               	KX
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	MAX
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
IDENT               	0
if                  	IF
(                   	(
IDENT               	M
.                   	.
IDENT               	LT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	1
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
.                   	.
IDENT               	LT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	5
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	7
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
.                   	.
IDENT               	LT
.                   	.
IDENT               	MAX
(                   	(
IDENT               	1
,                   	,
IDENT               	M
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	9
IDENT               	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
.                   	.
IDENT               	NE
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	CALL
IDENT               	XERBLA
(                   	(
STRING              	'SGER  '
,                   	,
IDENT               	INFO
)                   	)
IDENT               	RETURN
IDENT               	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	M
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
.                   	.
IDENT               	OR
.                   	.
(                   	(
IDENT               	N
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
.                   	.
IDENT               	OR
.                   	.
(                   	(
IDENT               	ALPHA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ZERO
)                   	)
)                   	)
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     Start the operations. In this version the elements of A are
COMMENT             	*     accessed sequentially with one pass through A.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	GT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	JY
=                   	=
IDENT               	1
else                	ELSE
IDENT               	JY
=                   	=
IDENT               	1
-                   	-
(                   	(
IDENT               	N
-                   	-
IDENT               	1
)                   	)
*                   	*
IDENT               	INCY
IDENT               	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
IDENT               	THEN
IDENT               	DO
IDENT               	20
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
.                   	.
IDENT               	NE
.                   	.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
IDENT               	DO
IDENT               	10
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	M
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP
IDENT               	10
IDENT               	CONTINUE
IDENT               	END
if                  	IF
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	20
IDENT               	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	GT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	KX
=                   	=
IDENT               	1
else                	ELSE
IDENT               	KX
=                   	=
IDENT               	1
-                   	-
(                   	(
IDENT               	M
-                   	-
IDENT               	1
)                   	)
*                   	*
IDENT               	INCX
IDENT               	END
if                  	IF
IDENT               	DO
IDENT               	40
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
.                   	.
IDENT               	NE
.                   	.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	DO
IDENT               	30
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	M
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	TEMP
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
IDENT               	30
IDENT               	CONTINUE
IDENT               	END
if                  	IF
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	40
IDENT               	CONTINUE
IDENT               	END
if                  	IF
COMMENT             	*
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     End of SGER  .
COMMENT             	*
IDENT               	END
