COMMENT             	*> \brief \b SSPMV
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE SSPMV(UPLO,N,ALPHA,AP,X,INCX,BETA,Y,INCY)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       REAL ALPHA,BETA
COMMENT             	*       INTEGER INCX,INCY,N
COMMENT             	*       CHARACTER UPLO
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       REAL AP(*),X(*),Y(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> SSPMV  performs the matrix-vector operation
COMMENT             	*>
COMMENT             	*>    y := alpha*A*x + beta*y,
COMMENT             	*>
COMMENT             	*> where alpha and beta are scalars, x and y are n element vectors and
COMMENT             	*> A is an n by n symmetric matrix, supplied in packed form.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] UPLO
COMMENT             	*> \verbatim
COMMENT             	*>          UPLO is CHARACTER*1
COMMENT             	*>           On entry, UPLO specifies whether the upper or lower
COMMENT             	*>           triangular part of the matrix A is supplied in the packed
COMMENT             	*>           array AP as follows:
COMMENT             	*>
COMMENT             	*>              UPLO = 'U' or 'u'   The upper triangular part of A is
COMMENT             	*>                                  supplied in AP.
COMMENT             	*>
COMMENT             	*>              UPLO = 'L' or 'l'   The lower triangular part of A is
COMMENT             	*>                                  supplied in AP.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the order of the matrix A.
COMMENT             	*>           N must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is REAL
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] AP
COMMENT             	*> \verbatim
COMMENT             	*>          AP is REAL array, dimension at least
COMMENT             	*>           ( ( n*( n + 1 ) )/2 ).
COMMENT             	*>           Before entry with UPLO = 'U' or 'u', the array AP must
COMMENT             	*>           contain the upper triangular part of the symmetric matrix
COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 )
COMMENT             	*>           and a( 2, 2 ) respectively, and so on.
COMMENT             	*>           Before entry with UPLO = 'L' or 'l', the array AP must
COMMENT             	*>           contain the lower triangular part of the symmetric matrix
COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 )
COMMENT             	*>           and a( 3, 1 ) respectively, and so on.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] X
COMMENT             	*> \verbatim
COMMENT             	*>          X is REAL array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
COMMENT             	*>           Before entry, the incremented array X must contain the n
COMMENT             	*>           element vector x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>           On entry, INCX specifies the increment for the elements of
COMMENT             	*>           X. INCX must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] BETA
COMMENT             	*> \verbatim
COMMENT             	*>          BETA is REAL
COMMENT             	*>           On entry, BETA specifies the scalar beta. When BETA is
COMMENT             	*>           supplied as zero then Y need not be set on input.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] Y
COMMENT             	*> \verbatim
COMMENT             	*>          Y is REAL array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCY ) ).
COMMENT             	*>           Before entry, the incremented array Y must contain the n
COMMENT             	*>           element vector y. On exit, Y is overwritten by the updated
COMMENT             	*>           vector y.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCY
COMMENT             	*> \verbatim
COMMENT             	*>          INCY is INTEGER
COMMENT             	*>           On entry, INCY specifies the increment for the elements of
COMMENT             	*>           Y. INCY must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup single_blas_level2
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 2 Blas routine.
COMMENT             	*>  The vector and matrix arguments are not referenced when N = 0, or M = 0
COMMENT             	*>
COMMENT             	*>  -- Written on 22-October-1986.
COMMENT             	*>     Jack Dongarra, Argonne National Lab.
COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
COMMENT             	*>     Sven Hammarling, Nag Central Office.
COMMENT             	*>     Richard Hanson, Sandia National Labs.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	SSPMV
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	AP
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	BETA
,                   	,
IDENT               	Y
,                   	,
IDENT               	INCY
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	REAL
IDENT               	ALPHA
,                   	,
IDENT               	BETA
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	UPLO
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	REAL
IDENT               	AP
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	Y
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Parameters ..
IDENT               	REAL
IDENT               	ONE
,                   	,
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
IDENT               	1
.                   	.
IDENT               	0
IDENT               	E
+                   	+
IDENT               	0
,                   	,
IDENT               	ZERO
=                   	=
IDENT               	0
.                   	.
IDENT               	0
IDENT               	E
+                   	+
IDENT               	0
)                   	)
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	REAL
IDENT               	TEMP1
,                   	,
IDENT               	TEMP2
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	JY
,                   	,
IDENT               	K
,                   	,
IDENT               	KK
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
COMMENT             	*     ..
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
IDENT               	0
if                  	IF
(                   	(
.                   	.
IDENT               	NOT
.                   	.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
.                   	.
IDENT               	AND
.                   	.
.                   	.
IDENT               	NOT
.                   	.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	1
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
.                   	.
IDENT               	LT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	6
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
IDENT               	9
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
.                   	.
IDENT               	NE
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	CALL
IDENT               	XERBLA
(                   	(
STRING              	'SSPMV '
,                   	,
IDENT               	INFO
)                   	)
IDENT               	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	N
.                   	.
IDENT               	EQ
.                   	.
IDENT               	0
)                   	)
.                   	.
IDENT               	OR
.                   	.
(                   	(
(                   	(
IDENT               	ALPHA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ZERO
)                   	)
.                   	.
IDENT               	AND
.                   	.
(                   	(
IDENT               	BETA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     Set up the start points in  X  and  Y.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	INCX
.                   	.
IDENT               	GT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	KX
=                   	=
IDENT               	1
else                	ELSE
IDENT               	KX
=                   	=
IDENT               	1
-                   	-
(                   	(
IDENT               	N
-                   	-
IDENT               	1
)                   	)
*                   	*
IDENT               	INCX
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	GT
.                   	.
IDENT               	0
)                   	)
IDENT               	THEN
IDENT               	KY
=                   	=
IDENT               	1
else                	ELSE
IDENT               	KY
=                   	=
IDENT               	1
-                   	-
(                   	(
IDENT               	N
-                   	-
IDENT               	1
)                   	)
*                   	*
IDENT               	INCY
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations. In this version the elements of the array AP
COMMENT             	*     are accessed sequentially with one pass through AP.
COMMENT             	*
COMMENT             	*     First form  y := beta*y.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	BETA
.                   	.
IDENT               	NE
.                   	.
IDENT               	ONE
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	INCY
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	BETA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
IDENT               	10
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	ZERO
IDENT               	10
continue            	CONTINUE
else                	ELSE
token(103)          	DO
IDENT               	20
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
IDENT               	20
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
IDENT               	IY
=                   	=
IDENT               	KY
if                  	IF
(                   	(
IDENT               	BETA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
IDENT               	30
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	ZERO
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
IDENT               	30
continue            	CONTINUE
else                	ELSE
token(103)          	DO
IDENT               	40
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
IDENT               	40
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	ALPHA
.                   	.
IDENT               	EQ
.                   	.
IDENT               	ZERO
)                   	)
IDENT               	RETURN
IDENT               	KK
=                   	=
IDENT               	1
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*        Form  y  when AP contains the upper triangle.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
.                   	.
IDENT               	AND
.                   	.
(                   	(
IDENT               	INCY
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
)                   	)
IDENT               	THEN
token(103)          	DO
IDENT               	60
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
IDENT               	K
=                   	=
IDENT               	KK
token(103)          	DO
IDENT               	50
IDENT               	I
=                   	=
IDENT               	1
,                   	,
IDENT               	J
-                   	-
IDENT               	1
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
IDENT               	K
=                   	=
IDENT               	K
+                   	+
IDENT               	1
IDENT               	50
continue            	CONTINUE
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	KK
+                   	+
IDENT               	J
-                   	-
IDENT               	1
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
IDENT               	60
continue            	CONTINUE
else                	ELSE
IDENT               	JX
=                   	=
IDENT               	KX
IDENT               	JY
=                   	=
IDENT               	KY
token(103)          	DO
IDENT               	80
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	IY
=                   	=
IDENT               	KY
token(103)          	DO
IDENT               	70
IDENT               	K
=                   	=
IDENT               	KK
,                   	,
IDENT               	KK
+                   	+
IDENT               	J
-                   	-
IDENT               	2
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
IDENT               	70
continue            	CONTINUE
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	KK
+                   	+
IDENT               	J
-                   	-
IDENT               	1
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
IDENT               	80
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  y  when AP contains the lower triangle.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	INCX
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
.                   	.
IDENT               	AND
.                   	.
(                   	(
IDENT               	INCY
.                   	.
IDENT               	EQ
.                   	.
IDENT               	1
)                   	)
)                   	)
IDENT               	THEN
token(103)          	DO
IDENT               	100
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	KK
)                   	)
IDENT               	K
=                   	=
IDENT               	KK
+                   	+
IDENT               	1
token(103)          	DO
IDENT               	90
IDENT               	I
=                   	=
IDENT               	J
+                   	+
IDENT               	1
,                   	,
IDENT               	N
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
IDENT               	K
=                   	=
IDENT               	K
+                   	+
IDENT               	1
IDENT               	90
continue            	CONTINUE
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
(                   	(
IDENT               	N
-                   	-
IDENT               	J
+                   	+
IDENT               	1
)                   	)
IDENT               	100
continue            	CONTINUE
else                	ELSE
IDENT               	JX
=                   	=
IDENT               	KX
IDENT               	JY
=                   	=
IDENT               	KY
token(103)          	DO
IDENT               	120
IDENT               	J
=                   	=
IDENT               	1
,                   	,
IDENT               	N
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	KK
)                   	)
IDENT               	IX
=                   	=
IDENT               	JX
IDENT               	IY
=                   	=
IDENT               	JY
token(103)          	DO
IDENT               	110
IDENT               	K
=                   	=
IDENT               	KK
+                   	+
IDENT               	1
,                   	,
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	110
continue            	CONTINUE
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
(                   	(
IDENT               	N
-                   	-
IDENT               	J
+                   	+
IDENT               	1
)                   	)
IDENT               	120
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     End of SSPMV .
COMMENT             	*
token(102)          	END
