COMMENT             	*> \brief \b CSYMM
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE CSYMM(SIDE,UPLO,M,N,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       COMPLEX ALPHA,BETA
COMMENT             	*       INTEGER LDA,LDB,LDC,M,N
COMMENT             	*       CHARACTER SIDE,UPLO
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       COMPLEX A(LDA,*),B(LDB,*),C(LDC,*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> CSYMM  performs one of the matrix-matrix operations
COMMENT             	*>
COMMENT             	*>    C := alpha*A*B + beta*C,
COMMENT             	*>
COMMENT             	*> or
COMMENT             	*>
COMMENT             	*>    C := alpha*B*A + beta*C,
COMMENT             	*>
COMMENT             	*> where  alpha and beta are scalars, A is a symmetric matrix and  B and
COMMENT             	*> C are m by n matrices.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] SIDE
COMMENT             	*> \verbatim
COMMENT             	*>          SIDE is CHARACTER*1
COMMENT             	*>           On entry,  SIDE  specifies whether  the  symmetric matrix  A
COMMENT             	*>           appears on the  left or right  in the  operation as follows:
COMMENT             	*>
COMMENT             	*>              SIDE = 'L' or 'l'   C := alpha*A*B + beta*C,
COMMENT             	*>
COMMENT             	*>              SIDE = 'R' or 'r'   C := alpha*B*A + beta*C,
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] UPLO
COMMENT             	*> \verbatim
COMMENT             	*>          UPLO is CHARACTER*1
COMMENT             	*>           On  entry,   UPLO  specifies  whether  the  upper  or  lower
COMMENT             	*>           triangular  part  of  the  symmetric  matrix   A  is  to  be
COMMENT             	*>           referenced as follows:
COMMENT             	*>
COMMENT             	*>              UPLO = 'U' or 'u'   Only the upper triangular part of the
COMMENT             	*>                                  symmetric matrix is to be referenced.
COMMENT             	*>
COMMENT             	*>              UPLO = 'L' or 'l'   Only the lower triangular part of the
COMMENT             	*>                                  symmetric matrix is to be referenced.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] M
COMMENT             	*> \verbatim
COMMENT             	*>          M is INTEGER
COMMENT             	*>           On entry,  M  specifies the number of rows of the matrix  C.
COMMENT             	*>           M  must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the number of columns of the matrix C.
COMMENT             	*>           N  must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is COMPLEX
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is COMPLEX array, dimension ( LDA, ka ), where ka is
COMMENT             	*>           m  when  SIDE = 'L' or 'l'  and is n  otherwise.
COMMENT             	*>           Before entry  with  SIDE = 'L' or 'l',  the  m by m  part of
COMMENT             	*>           the array  A  must contain the  symmetric matrix,  such that
COMMENT             	*>           when  UPLO = 'U' or 'u', the leading m by m upper triangular
COMMENT             	*>           part of the array  A  must contain the upper triangular part
COMMENT             	*>           of the  symmetric matrix and the  strictly  lower triangular
COMMENT             	*>           part of  A  is not referenced,  and when  UPLO = 'L' or 'l',
COMMENT             	*>           the leading  m by m  lower triangular part  of the  array  A
COMMENT             	*>           must  contain  the  lower triangular part  of the  symmetric
COMMENT             	*>           matrix and the  strictly upper triangular part of  A  is not
COMMENT             	*>           referenced.
COMMENT             	*>           Before entry  with  SIDE = 'R' or 'r',  the  n by n  part of
COMMENT             	*>           the array  A  must contain the  symmetric matrix,  such that
COMMENT             	*>           when  UPLO = 'U' or 'u', the leading n by n upper triangular
COMMENT             	*>           part of the array  A  must contain the upper triangular part
COMMENT             	*>           of the  symmetric matrix and the  strictly  lower triangular
COMMENT             	*>           part of  A  is not referenced,  and when  UPLO = 'L' or 'l',
COMMENT             	*>           the leading  n by n  lower triangular part  of the  array  A
COMMENT             	*>           must  contain  the  lower triangular part  of the  symmetric
COMMENT             	*>           matrix and the  strictly upper triangular part of  A  is not
COMMENT             	*>           referenced.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in the  calling (sub) program. When  SIDE = 'L' or 'l'  then
COMMENT             	*>           LDA must be at least  max( 1, m ), otherwise  LDA must be at
COMMENT             	*>           least max( 1, n ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] B
COMMENT             	*> \verbatim
COMMENT             	*>          B is COMPLEX array, dimension ( LDB, N )
COMMENT             	*>           Before entry, the leading  m by n part of the array  B  must
COMMENT             	*>           contain the matrix B.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDB
COMMENT             	*> \verbatim
COMMENT             	*>          LDB is INTEGER
COMMENT             	*>           On entry, LDB specifies the first dimension of B as declared
COMMENT             	*>           in  the  calling  (sub)  program.   LDB  must  be  at  least
COMMENT             	*>           max( 1, m ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] BETA
COMMENT             	*> \verbatim
COMMENT             	*>          BETA is COMPLEX
COMMENT             	*>           On entry,  BETA  specifies the scalar  beta.  When  BETA  is
COMMENT             	*>           supplied as zero then C need not be set on input.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] C
COMMENT             	*> \verbatim
COMMENT             	*>          C is COMPLEX array, dimension ( LDC, N )
COMMENT             	*>           Before entry, the leading  m by n  part of the array  C must
COMMENT             	*>           contain the matrix  C,  except when  beta  is zero, in which
COMMENT             	*>           case C need not be set on entry.
COMMENT             	*>           On exit, the array  C  is overwritten by the  m by n updated
COMMENT             	*>           matrix.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDC
COMMENT             	*> \verbatim
COMMENT             	*>          LDC is INTEGER
COMMENT             	*>           On entry, LDC specifies the first dimension of C as declared
COMMENT             	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
COMMENT             	*>           max( 1, m ).
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup complex_blas_level3
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 3 Blas routine.
COMMENT             	*>
COMMENT             	*>  -- Written on 8-February-1989.
COMMENT             	*>     Jack Dongarra, Argonne National Laboratory.
COMMENT             	*>     Iain Duff, AERE Harwell.
COMMENT             	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
COMMENT             	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	CSYMM
(                   	(
IDENT               	SIDE
,                   	,
IDENT               	UPLO
,                   	,
IDENT               	M
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	B
,                   	,
IDENT               	LDB
,                   	,
IDENT               	BETA
,                   	,
IDENT               	C
,                   	,
IDENT               	LDC
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level3 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	COMPLEX
IDENT               	ALPHA
,                   	,
IDENT               	BETA
token(98)           	INTEGER
IDENT               	LDA
,                   	,
IDENT               	LDB
,                   	,
IDENT               	LDC
,                   	,
IDENT               	M
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	SIDE
,                   	,
IDENT               	UPLO
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	COMPLEX
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	B
(                   	(
IDENT               	LDB
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	C
(                   	(
IDENT               	LDC
,                   	,
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	MAX
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	COMPLEX
IDENT               	TEMP1
,                   	,
IDENT               	TEMP2
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	J
,                   	,
IDENT               	K
,                   	,
IDENT               	NROWA
IDENT               	LOGICAL
IDENT               	UPPER
COMMENT             	*     ..
COMMENT             	*     .. Parameters ..
IDENT               	COMPLEX
IDENT               	ONE
IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
(                   	(
FLOAT               	1.0E+0
,                   	,
FLOAT               	0.0E+0
)                   	)
)                   	)
IDENT               	COMPLEX
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
(                   	(
FLOAT               	0.0E+0
,                   	,
FLOAT               	0.0E+0
)                   	)
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Set NROWA as the number of rows of A.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	SIDE
,                   	,
STRING              	'L'
)                   	)
)                   	)
IDENT               	THEN
IDENT               	NROWA
=                   	=
IDENT               	M
else                	ELSE
IDENT               	NROWA
=                   	=
IDENT               	N
token(102)          	END
if                  	IF
IDENT               	UPPER
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	SIDE
,                   	,
STRING              	'L'
)                   	)
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	SIDE
,                   	,
STRING              	'R'
)                   	)
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	UPPER
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	M
<                   	.LT.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	3
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	4
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWA
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	7
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDB
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	M
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	9
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDC
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	M
)                   	)
)                   	)
IDENT               	THEN
IDENT               	INFO
=                   	=
INT                 	12
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
IDENT               	THEN
IDENT               	CALL
IDENT               	XERBLA
(                   	(
STRING              	'CSYMM '
,                   	,
IDENT               	INFO
)                   	)
IDENT               	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	M
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
+                   	+
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     And when  alpha.eq.zero.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	10
continue            	CONTINUE
INT                 	20
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	30
continue            	CONTINUE
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	SIDE
,                   	,
STRING              	'L'
)                   	)
)                   	)
IDENT               	THEN
COMMENT             	*
COMMENT             	*        Form  C := alpha*A*B + beta*C.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	70
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	60
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	50
IDENT               	K
=                   	=
INT                 	1
,                   	,
IDENT               	I
-                   	-
INT                 	1
IDENT               	C
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	I
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	B
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	I
)                   	)
INT                 	50
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	I
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	I
)                   	)
+                   	+
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
token(102)          	END
if                  	IF
INT                 	60
continue            	CONTINUE
INT                 	70
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	100
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	90
IDENT               	I
=                   	=
IDENT               	M
,                   	,
INT                 	1
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	80
IDENT               	K
=                   	=
IDENT               	I
+                   	+
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	I
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	B
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	I
)                   	)
INT                 	80
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	I
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	I
)                   	)
+                   	+
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
token(102)          	END
if                  	IF
INT                 	90
continue            	CONTINUE
INT                 	100
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  C := alpha*B*A + beta*C.
COMMENT             	*
token(103)          	DO
INT                 	170
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
IDENT               	THEN
token(103)          	DO
INT                 	110
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	TEMP1
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	110
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	120
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	120
continue            	CONTINUE
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	140
IDENT               	K
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
IDENT               	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
else                	ELSE
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	K
)                   	)
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	130
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	K
)                   	)
INT                 	130
continue            	CONTINUE
INT                 	140
continue            	CONTINUE
token(103)          	DO
INT                 	160
IDENT               	K
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
IDENT               	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	K
)                   	)
else                	ELSE
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	K
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	150
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	K
)                   	)
INT                 	150
continue            	CONTINUE
INT                 	160
continue            	CONTINUE
INT                 	170
continue            	CONTINUE
token(102)          	END
if                  	IF
COMMENT             	*
IDENT               	RETURN
COMMENT             	*
COMMENT             	*     End of CSYMM .
COMMENT             	*
token(102)          	END
