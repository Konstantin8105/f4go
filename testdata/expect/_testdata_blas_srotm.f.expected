COMMENT	> \brief \b SROTM
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE SROTM(N,SX,INCX,SY,INCY,SPARAM)
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       INTEGER INCX,INCY,N
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       REAL SPARAM(5),SX(*),SY(*)
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*>    APPLY THE MODIFIED GIVENS TRANSFORMATION, H, TO THE 2 BY N MATRIX
COMMENT	*>
COMMENT	*>    (SX**T) , WHERE **T INDICATES TRANSPOSE. THE ELEMENTS OF SX ARE IN
COMMENT	*>    (SX**T)
COMMENT	*>
COMMENT	*>    SX(LX+I*INCX), I = 0 TO N-1, WHERE LX = 1 IF INCX .GE. 0, ELSE
COMMENT	*>    LX = (-INCX)*N, AND SIMILARLY FOR SY USING USING LY AND INCY.
COMMENT	*>    WITH SPARAM(1)=SFLAG, H HAS ONE OF THE FOLLOWING FORMS..
COMMENT	*>
COMMENT	*>    SFLAG=-1.E0     SFLAG=0.E0        SFLAG=1.E0     SFLAG=-2.E0
COMMENT	*>
COMMENT	*>      (SH11  SH12)    (1.E0  SH12)    (SH11  1.E0)    (1.E0  0.E0)
COMMENT	*>    H=(          )    (          )    (          )    (          )
COMMENT	*>      (SH21  SH22),   (SH21  1.E0),   (-1.E0 SH22),   (0.E0  1.E0).
COMMENT	*>    SEE  SROTMG FOR A DESCRIPTION OF DATA STORAGE IN SPARAM.
COMMENT	*>
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in] N
COMMENT	*> \verbatim
COMMENT	*>          N is INTEGER
COMMENT	*>         number of elements in input vector(s)
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] SX
COMMENT	*> \verbatim
COMMENT	*>          SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] INCX
COMMENT	*> \verbatim
COMMENT	*>          INCX is INTEGER
COMMENT	*>         storage spacing between elements of SX
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] SY
COMMENT	*> \verbatim
COMMENT	*>          SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] INCY
COMMENT	*> \verbatim
COMMENT	*>          INCY is INTEGER
COMMENT	*>         storage spacing between elements of SY
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] SPARAM
COMMENT	*> \verbatim
COMMENT	*>          SPARAM is REAL array, dimension (5)
COMMENT	*>     SPARAM(1)=SFLAG
COMMENT	*>     SPARAM(2)=SH11
COMMENT	*>     SPARAM(3)=SH21
COMMENT	*>     SPARAM(4)=SH12
COMMENT	*>     SPARAM(5)=SH22
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date November 2017
COMMENT	*
COMMENT	*> \ingroup single_blas_level1
COMMENT	*
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	SROTM
(	(
IDENT	N
,	,
IDENT	SX
,	,
IDENT	INCX
,	,
IDENT	SY
,	,
IDENT	INCY
,	,
IDENT	SPARAM
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level1 routine (version 3.8.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     November 2017
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
token(98)	INTEGER
IDENT	INCX
,	,
IDENT	INCY
,	,
IDENT	N
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	REAL
IDENT	SPARAM
(	(
IDENT	5
)	)
,	,
IDENT	SX
(	(
*	*)
,	,
IDENT	SY
(	(
*	*)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. Local Scalars ..
IDENT	REAL
IDENT	SFLAG
,	,
IDENT	SH11
,	,
IDENT	SH12
,	,
IDENT	SH21
,	,
IDENT	SH22
,	,
IDENT	TWO
,	,
IDENT	W
,	,
IDENT	Z
,	,
IDENT	ZERO
token(98)	INTEGER
IDENT	I
,	,
IDENT	KX
,	,
IDENT	KY
,	,
IDENT	NSTEPS
COMMENT	*     ..
COMMENT	*     .. Data statements ..
IDENT	DATA
IDENT	ZERO
,	,
IDENT	TWO
/	/
IDENT	0
.	.
IDENT	E0
,	,
IDENT	2
.	.
IDENT	E0
/	/
COMMENT	*     ..
COMMENT	*
IDENT	SFLAG
=	=
IDENT	SPARAM
(	(
IDENT	1
)	)
if	IF
(	(
IDENT	N
.	.
IDENT	LE
.	.
IDENT	0
.	.
IDENT	OR
.	.
(	(
IDENT	SFLAG
+	+
IDENT	TWO
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
)	)
IDENT	RETURN
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	INCY
.	.
IDENT	AND
.	.
IDENT	INCX
.	.
IDENT	GT
.	.
IDENT	0
)	)
IDENT	THEN
COMMENT	*
IDENT	NSTEPS
=	=
IDENT	N
*	*I
IDENT	NCX
if	IF
(	(
IDENT	SFLAG
.	.
IDENT	LT
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH11
=	=
IDENT	SPARAM
(	(
IDENT	2
)	)
IDENT	SH12
=	=
IDENT	SPARAM
(	(
IDENT	4
)	)
IDENT	SH21
=	=
IDENT	SPARAM
(	(
IDENT	3
)	)
IDENT	SH22
=	=
IDENT	SPARAM
(	(
IDENT	5
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	NSTEPS
,	,
IDENT	INCX
IDENT	W
=	=
IDENT	SX
(	(
IDENT	I
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	I
)	)
IDENT	SX
(	(
IDENT	I
)	)
=	=
IDENT	W
*	*S
IDENT	H11
+	+
IDENT	Z
*	*S
IDENT	H12
IDENT	SY
(	(
IDENT	I
)	)
=	=
IDENT	W
*	*S
IDENT	H21
+	+
IDENT	Z
*	*S
IDENT	H22
IDENT	END
IDENT	DO
else	ELSE
if	IF
(	(
IDENT	SFLAG
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH12
=	=
IDENT	SPARAM
(	(
IDENT	4
)	)
IDENT	SH21
=	=
IDENT	SPARAM
(	(
IDENT	3
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	NSTEPS
,	,
IDENT	INCX
IDENT	W
=	=
IDENT	SX
(	(
IDENT	I
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	I
)	)
IDENT	SX
(	(
IDENT	I
)	)
=	=
IDENT	W
+	+
IDENT	Z
*	*S
IDENT	H12
IDENT	SY
(	(
IDENT	I
)	)
=	=
IDENT	W
*	*S
IDENT	H21
+	+
IDENT	Z
IDENT	END
IDENT	DO
else	ELSE
IDENT	SH11
=	=
IDENT	SPARAM
(	(
IDENT	2
)	)
IDENT	SH22
=	=
IDENT	SPARAM
(	(
IDENT	5
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	NSTEPS
,	,
IDENT	INCX
IDENT	W
=	=
IDENT	SX
(	(
IDENT	I
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	I
)	)
IDENT	SX
(	(
IDENT	I
)	)
=	=
IDENT	W
*	*S
IDENT	H11
+	+
IDENT	Z
IDENT	SY
(	(
IDENT	I
)	)
=	=
-	-
IDENT	W
+	+
IDENT	SH22
*	*Z
IDENT	END
IDENT	DO
IDENT	END
if	IF
else	ELSE
IDENT	KX
=	=
IDENT	1
IDENT	KY
=	=
IDENT	1
if	IF
(	(
IDENT	INCX
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	KX
=	=
IDENT	1
+	+
(	(
IDENT	1
-	-
IDENT	N
)	)
*	*I
IDENT	NCX
if	IF
(	(
IDENT	INCY
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	KY
=	=
IDENT	1
+	+
(	(
IDENT	1
-	-
IDENT	N
)	)
*	*I
IDENT	NCY
COMMENT	*
if	IF
(	(
IDENT	SFLAG
.	.
IDENT	LT
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH11
=	=
IDENT	SPARAM
(	(
IDENT	2
)	)
IDENT	SH12
=	=
IDENT	SPARAM
(	(
IDENT	4
)	)
IDENT	SH21
=	=
IDENT	SPARAM
(	(
IDENT	3
)	)
IDENT	SH22
=	=
IDENT	SPARAM
(	(
IDENT	5
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	N
IDENT	W
=	=
IDENT	SX
(	(
IDENT	KX
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	KY
)	)
IDENT	SX
(	(
IDENT	KX
)	)
=	=
IDENT	W
*	*S
IDENT	H11
+	+
IDENT	Z
*	*S
IDENT	H12
IDENT	SY
(	(
IDENT	KY
)	)
=	=
IDENT	W
*	*S
IDENT	H21
+	+
IDENT	Z
*	*S
IDENT	H22
IDENT	KX
=	=
IDENT	KX
+	+
IDENT	INCX
IDENT	KY
=	=
IDENT	KY
+	+
IDENT	INCY
IDENT	END
IDENT	DO
else	ELSE
if	IF
(	(
IDENT	SFLAG
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH12
=	=
IDENT	SPARAM
(	(
IDENT	4
)	)
IDENT	SH21
=	=
IDENT	SPARAM
(	(
IDENT	3
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	N
IDENT	W
=	=
IDENT	SX
(	(
IDENT	KX
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	KY
)	)
IDENT	SX
(	(
IDENT	KX
)	)
=	=
IDENT	W
+	+
IDENT	Z
*	*S
IDENT	H12
IDENT	SY
(	(
IDENT	KY
)	)
=	=
IDENT	W
*	*S
IDENT	H21
+	+
IDENT	Z
IDENT	KX
=	=
IDENT	KX
+	+
IDENT	INCX
IDENT	KY
=	=
IDENT	KY
+	+
IDENT	INCY
IDENT	END
IDENT	DO
else	ELSE
IDENT	SH11
=	=
IDENT	SPARAM
(	(
IDENT	2
)	)
IDENT	SH22
=	=
IDENT	SPARAM
(	(
IDENT	5
)	)
IDENT	DO
IDENT	I
=	=
IDENT	1
,	,
IDENT	N
IDENT	W
=	=
IDENT	SX
(	(
IDENT	KX
)	)
IDENT	Z
=	=
IDENT	SY
(	(
IDENT	KY
)	)
IDENT	SX
(	(
IDENT	KX
)	)
=	=
IDENT	W
*	*S
IDENT	H11
+	+
IDENT	Z
IDENT	SY
(	(
IDENT	KY
)	)
=	=
-	-
IDENT	W
+	+
IDENT	SH22
*	*Z
IDENT	KX
=	=
IDENT	KX
+	+
IDENT	INCX
IDENT	KY
=	=
IDENT	KY
+	+
IDENT	INCY
IDENT	END
IDENT	DO
IDENT	END
if	IF
IDENT	END
if	IF
IDENT	RETURN
IDENT	END
