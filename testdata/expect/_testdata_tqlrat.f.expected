COMMENT	*** for old version, "send otqlrat from eispack"
COMMENT	** From dana!moler Tue, 1 Sep 87 10:15:40 PDT
COMMENT	** New TQLRAT
token(96)	SUBROUTINE
IDENT	TQLRAT
(	(
IDENT	N
,	,
IDENT	D
,	,
IDENT	E2
,	,
IDENT	IERR
)	)
COMMENT	C
token(98)	INTEGER
IDENT	I
,	,
IDENT	J
,	,
IDENT	L
,	,
IDENT	M
,	,
IDENT	N
,	,
IDENT	II
,	,
IDENT	L1
,	,
IDENT	MML
,	,
IDENT	IERR
IDENT	DOUBLE
IDENT	PRECISION
IDENT	D
(	(
IDENT	N
)	)
,	,
IDENT	E2
(	(
IDENT	N
)	)
IDENT	DOUBLE
IDENT	PRECISION
IDENT	B
,	,
IDENT	C
,	,
IDENT	F
,	,
IDENT	G
,	,
IDENT	H
,	,
IDENT	P
,	,
IDENT	R
,	,
IDENT	S
,	,
IDENT	T
,	,
IDENT	EPSLON
,	,
IDENT	PYTHAG
COMMENT	C
COMMENT	C     This subroutine is a translation of the Algol procedure tqlrat,
COMMENT	C     Algorithm 464, Comm. ACM 16, 689(1973) by Reinsch.
COMMENT	C
COMMENT	C     This subroutine finds the eigenvalues of a symmetric
COMMENT	C     tridiagonal matrix by the rational QL method.
COMMENT	C
COMMENT	C     On input
COMMENT	C
COMMENT	C        N is the order of the matrix.
COMMENT	C
COMMENT	C        D contains the diagonal elements of the input matrix.
COMMENT	C
COMMENT	C        E2 contains the squares of the subdiagonal elements of the
COMMENT	C          input matrix in its last N-1 positions.  E2(1) is arbitrary.
COMMENT	C
COMMENT	C      On output
COMMENT	C
COMMENT	C        D contains the eigenvalues in ascending order.  If an
COMMENT	C          error exit is made, the eigenvalues are correct and
COMMENT	C          ordered for indices 1,2,...IERR-1, but may not be
COMMENT	C          the smallest eigenvalues.
COMMENT	C
COMMENT	C        E2 has been destroyed.
COMMENT	C
COMMENT	C        IERR is set to
COMMENT	C          zero       for normal return,
COMMENT	C          J          if the J-th eigenvalue has not been
COMMENT	C                     determined after 30 iterations.
COMMENT	C
COMMENT	C     Calls PYTHAG for  DSQRT(A*A + B*B) .
COMMENT	C
COMMENT	C     Questions and comments should be directed to Burton S. Garbow,
COMMENT	C     Mathematics and Computer Science Div, Argonne National Laboratory
COMMENT	C
COMMENT	C     This version dated August 1987.
COMMENT	C     Modified by C. Moler to fix underflow/overflow difficulties,
COMMENT	C     especially on the VAX and other machines where epslon(1.0d0)**2
COMMENT	C     nearly underflows.  See the loop involving statement 102 and
COMMENT	C     the two statements just before statement 200.
COMMENT	C
COMMENT	C     ------------------------------------------------------------------
COMMENT	C
IDENT	IERR
=	=
IDENT	0
if	IF
(	(
IDENT	N
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	GO
IDENT	TO
IDENT	1001
COMMENT	C
IDENT	DO
IDENT	100
IDENT	I
=	=
IDENT	2
,	,
IDENT	N
IDENT	100
IDENT	E2
(	(
IDENT	I
-	-
IDENT	1
)	)
=	=
IDENT	E2
(	(
IDENT	I
)	)
COMMENT	C
IDENT	F
=	=
IDENT	0
.	.
IDENT	0
IDENT	D0
IDENT	T
=	=
IDENT	0
.	.
IDENT	0
IDENT	D0
IDENT	E2
(	(
IDENT	N
)	)
=	=
IDENT	0
.	.
IDENT	0
IDENT	D0
COMMENT	C
IDENT	DO
IDENT	290
IDENT	L
=	=
IDENT	1
,	,
IDENT	N
IDENT	J
=	=
IDENT	0
IDENT	H
=	=
IDENT	DABS
(	(
IDENT	D
(	(
IDENT	L
)	)
)	)
+	+
IDENT	DSQRT
(	(
IDENT	E2
(	(
IDENT	L
)	)
)	)
if	IF
(	(
IDENT	T
.	.
IDENT	GT
.	.
IDENT	H
)	)
IDENT	GO
IDENT	TO
IDENT	105
IDENT	T
=	=
IDENT	H
IDENT	B
=	=
IDENT	EPSLON
(	(
IDENT	T
)	)
IDENT	C
=	=
IDENT	B
*	* 
IDENT	B
if	if
(	(
IDENT	c
.	.
IDENT	ne
.	.
IDENT	0
.	.
IDENT	0
IDENT	d0
)	)
IDENT	go
IDENT	to
IDENT	105
COMMENT	C        Spliting tolerance underflowed.  Look for larger value.
IDENT	do
IDENT	102
IDENT	i
=	=
IDENT	l
,	,
IDENT	n
IDENT	h
=	=
IDENT	dabs
(	(
IDENT	d
(	(
IDENT	i
)	)
)	)
+	+
IDENT	dsqrt
(	(
IDENT	e2
(	(
IDENT	i
)	)
)	)
if	if
(	(
IDENT	h
.	.
IDENT	gt
.	.
IDENT	t
)	)
IDENT	t
=	=
IDENT	h
IDENT	102
IDENT	continue
IDENT	b
=	=
IDENT	epslon
(	(
IDENT	t
)	)
IDENT	c
=	=
IDENT	b
*	* 
IDENT	b
COMMENT	C     .......... LOOK FOR SMALL SQUARED SUB-DIAGONAL ELEMENT ..........
IDENT	105
IDENT	DO
IDENT	110
IDENT	M
=	=
IDENT	L
,	,
IDENT	N
if	IF
(	(
IDENT	E2
(	(
IDENT	M
)	)
.	.
IDENT	LE
.	.
IDENT	C
)	)
IDENT	GO
IDENT	TO
IDENT	120
COMMENT	C     .......... E2(N) IS ALWAYS ZERO, SO THERE IS NO EXIT
COMMENT	C                THROUGH THE BOTTOM OF THE LOOP ..........
IDENT	110
IDENT	CONTINUE
COMMENT	C
IDENT	120
if	IF
(	(
IDENT	M
.	.
IDENT	EQ
.	.
IDENT	L
)	)
IDENT	GO
IDENT	TO
IDENT	210
IDENT	130
if	IF
(	(
IDENT	J
.	.
IDENT	EQ
.	.
IDENT	30
)	)
IDENT	GO
IDENT	TO
IDENT	1000
IDENT	J
=	=
IDENT	J
+	+
IDENT	1
COMMENT	C     .......... FORM SHIFT ..........
IDENT	L1
=	=
IDENT	L
+	+
IDENT	1
IDENT	S
=	=
IDENT	DSQRT
(	(
IDENT	E2
(	(
IDENT	L
)	)
)	)
IDENT	G
=	=
IDENT	D
(	(
IDENT	L
)	)
IDENT	P
=	=
(	(
IDENT	D
(	(
IDENT	L1
)	)
-	-
IDENT	G
)	)
/	/
(	(
IDENT	2
.	.
IDENT	0
IDENT	D0
*	* 
IDENT	S
)	)
IDENT	R
=	=
IDENT	PYTHAG
(	(
IDENT	P
,	,
IDENT	1
.	.
IDENT	0
IDENT	D0
)	)
IDENT	D
(	(
IDENT	L
)	)
=	=
IDENT	S
/	/
(	(
IDENT	P
+	+
IDENT	DSIGN
(	(
IDENT	R
,	,
IDENT	P
)	)
)	)
IDENT	H
=	=
IDENT	G
-	-
IDENT	D
(	(
IDENT	L
)	)
COMMENT	C
IDENT	DO
IDENT	140
IDENT	I
=	=
IDENT	L1
,	,
IDENT	N
IDENT	140
IDENT	D
(	(
IDENT	I
)	)
=	=
IDENT	D
(	(
IDENT	I
)	)
-	-
IDENT	H
COMMENT	C
IDENT	F
=	=
IDENT	F
+	+
IDENT	H
COMMENT	C     .......... RATIONAL QL TRANSFORMATION ..........
IDENT	G
=	=
IDENT	D
(	(
IDENT	M
)	)
if	IF
(	(
IDENT	G
.	.
IDENT	EQ
.	.
IDENT	0
.	.
IDENT	0
IDENT	D0
)	)
IDENT	G
=	=
IDENT	B
IDENT	H
=	=
IDENT	G
IDENT	S
=	=
IDENT	0
.	.
IDENT	0
IDENT	D0
IDENT	MML
=	=
IDENT	M
-	-
IDENT	L
COMMENT	C     .......... FOR I=M-1 STEP -1 UNTIL L DO -- ..........
IDENT	DO
IDENT	200
IDENT	II
=	=
IDENT	1
,	,
IDENT	MML
IDENT	I
=	=
IDENT	M
-	-
IDENT	II
IDENT	P
=	=
IDENT	G
*	* 
IDENT	H
IDENT	R
=	=
IDENT	P
+	+
IDENT	E2
(	(
IDENT	I
)	)
IDENT	E2
(	(
IDENT	I
+	+
IDENT	1
)	)
=	=
IDENT	S
*	* 
IDENT	R
IDENT	S
=	=
IDENT	E2
(	(
IDENT	I
)	)
/	/
IDENT	R
IDENT	D
(	(
IDENT	I
+	+
IDENT	1
)	)
=	=
IDENT	H
+	+
IDENT	S
*	* 
(	(
IDENT	H
+	+
IDENT	D
(	(
IDENT	I
)	)
)	)
IDENT	G
=	=
IDENT	D
(	(
IDENT	I
)	)
-	-
IDENT	E2
(	(
IDENT	I
)	)
/	/
IDENT	G
COMMENT	C           Avoid division by zero on next pass
if	if
(	(
IDENT	g
.	.
IDENT	eq
.	.
IDENT	0
.	.
IDENT	0
IDENT	d0
)	)
IDENT	g
=	=
IDENT	epslon
(	(
IDENT	d
(	(
IDENT	i
)	)
)	)
IDENT	h
=	=
IDENT	g
*	* 
(	(
IDENT	p
/	/
IDENT	r
)	)
IDENT	200
IDENT	CONTINUE
COMMENT	C
IDENT	E2
(	(
IDENT	L
)	)
=	=
IDENT	S
*	* 
IDENT	G
IDENT	D
(	(
IDENT	L
)	)
=	=
IDENT	H
COMMENT	C     .......... GUARD AGAINST UNDERFLOW IN CONVERGENCE TEST ..........
if	IF
(	(
IDENT	H
.	.
IDENT	EQ
.	.
IDENT	0
.	.
IDENT	0
IDENT	D0
)	)
IDENT	GO
IDENT	TO
IDENT	210
if	IF
(	(
IDENT	DABS
(	(
IDENT	E2
(	(
IDENT	L
)	)
)	)
.	.
IDENT	LE
.	.
IDENT	DABS
(	(
IDENT	C
/	/
IDENT	H
)	)
)	)
IDENT	GO
IDENT	TO
IDENT	210
IDENT	E2
(	(
IDENT	L
)	)
=	=
IDENT	H
*	* 
IDENT	E2
(	(
IDENT	L
)	)
if	IF
(	(
IDENT	E2
(	(
IDENT	L
)	)
.	.
IDENT	NE
.	.
IDENT	0
.	.
IDENT	0
IDENT	D0
)	)
IDENT	GO
IDENT	TO
IDENT	130
IDENT	210
IDENT	P
=	=
IDENT	D
(	(
IDENT	L
)	)
+	+
IDENT	F
COMMENT	C     .......... ORDER EIGENVALUES ..........
if	IF
(	(
IDENT	L
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	GO
IDENT	TO
IDENT	250
COMMENT	C     .......... FOR I=L STEP -1 UNTIL 2 DO -- ..........
IDENT	DO
IDENT	230
IDENT	II
=	=
IDENT	2
,	,
IDENT	L
IDENT	I
=	=
IDENT	L
+	+
IDENT	2
-	-
IDENT	II
if	IF
(	(
IDENT	P
.	.
IDENT	GE
.	.
IDENT	D
(	(
IDENT	I
-	-
IDENT	1
)	)
)	)
IDENT	GO
IDENT	TO
IDENT	270
IDENT	D
(	(
IDENT	I
)	)
=	=
IDENT	D
(	(
IDENT	I
-	-
IDENT	1
)	)
IDENT	230
IDENT	CONTINUE
COMMENT	C
IDENT	250
IDENT	I
=	=
IDENT	1
IDENT	270
IDENT	D
(	(
IDENT	I
)	)
=	=
IDENT	P
IDENT	290
IDENT	CONTINUE
COMMENT	C
IDENT	GO
IDENT	TO
IDENT	1001
COMMENT	C     .......... SET ERROR -- NO CONVERGENCE TO AN
COMMENT	C                EIGENVALUE AFTER 30 ITERATIONS ..........
IDENT	1000
IDENT	IERR
=	=
IDENT	L
IDENT	1001
IDENT	RETURN
IDENT	END
