COMMENT	> \brief \b DTRSV
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE DTRSV(UPLO,TRANS,DIAG,N,A,LDA,X,INCX)
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       INTEGER INCX,LDA,N
COMMENT	*       CHARACTER DIAG,TRANS,UPLO
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       DOUBLE PRECISION A(LDA,*),X(*)
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*> DTRSV  solves one of the systems of equations
COMMENT	*>
COMMENT	*>    A*x = b,   or   A**T*x = b,
COMMENT	*>
COMMENT	*> where b and x are n element vectors and A is an n by n unit, or
COMMENT	*> non-unit, upper or lower triangular matrix.
COMMENT	*>
COMMENT	*> No test for singularity or near-singularity is included in this
COMMENT	*> routine. Such tests must be performed before calling this routine.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in] UPLO
COMMENT	*> \verbatim
COMMENT	*>          UPLO is CHARACTER*1
COMMENT	*>           On entry, UPLO specifies whether the matrix is an upper or
COMMENT	*>           lower triangular matrix as follows:
COMMENT	*>
COMMENT	*>              UPLO = 'U' or 'u'   A is an upper triangular matrix.
COMMENT	*>
COMMENT	*>              UPLO = 'L' or 'l'   A is a lower triangular matrix.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] TRANS
COMMENT	*> \verbatim
COMMENT	*>          TRANS is CHARACTER*1
COMMENT	*>           On entry, TRANS specifies the equations to be solved as
COMMENT	*>           follows:
COMMENT	*>
COMMENT	*>              TRANS = 'N' or 'n'   A*x = b.
COMMENT	*>
COMMENT	*>              TRANS = 'T' or 't'   A**T*x = b.
COMMENT	*>
COMMENT	*>              TRANS = 'C' or 'c'   A**T*x = b.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] DIAG
COMMENT	*> \verbatim
COMMENT	*>          DIAG is CHARACTER*1
COMMENT	*>           On entry, DIAG specifies whether or not A is unit
COMMENT	*>           triangular as follows:
COMMENT	*>
COMMENT	*>              DIAG = 'U' or 'u'   A is assumed to be unit triangular.
COMMENT	*>
COMMENT	*>              DIAG = 'N' or 'n'   A is not assumed to be unit
COMMENT	*>                                  triangular.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] N
COMMENT	*> \verbatim
COMMENT	*>          N is INTEGER
COMMENT	*>           On entry, N specifies the order of the matrix A.
COMMENT	*>           N must be at least zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] A
COMMENT	*> \verbatim
COMMENT	*>          A is DOUBLE PRECISION array, dimension ( LDA, N )
COMMENT	*>           Before entry with  UPLO = 'U' or 'u', the leading n by n
COMMENT	*>           upper triangular part of the array A must contain the upper
COMMENT	*>           triangular matrix and the strictly lower triangular part of
COMMENT	*>           A is not referenced.
COMMENT	*>           Before entry with UPLO = 'L' or 'l', the leading n by n
COMMENT	*>           lower triangular part of the array A must contain the lower
COMMENT	*>           triangular matrix and the strictly upper triangular part of
COMMENT	*>           A is not referenced.
COMMENT	*>           Note that when  DIAG = 'U' or 'u', the diagonal elements of
COMMENT	*>           A are not referenced either, but are assumed to be unity.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDA
COMMENT	*> \verbatim
COMMENT	*>          LDA is INTEGER
COMMENT	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT	*>           in the calling (sub) program. LDA must be at least
COMMENT	*>           max( 1, n ).
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] X
COMMENT	*> \verbatim
COMMENT	*>          X is DOUBLE PRECISION array, dimension at least
COMMENT	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
COMMENT	*>           Before entry, the incremented array X must contain the n
COMMENT	*>           element right-hand side vector b. On exit, X is overwritten
COMMENT	*>           with the solution vector x.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] INCX
COMMENT	*> \verbatim
COMMENT	*>          INCX is INTEGER
COMMENT	*>           On entry, INCX specifies the increment for the elements of
COMMENT	*>           X. INCX must not be zero.
COMMENT	*>
COMMENT	*>  Level 2 Blas routine.
COMMENT	*>
COMMENT	*>  -- Written on 22-October-1986.
COMMENT	*>     Jack Dongarra, Argonne National Lab.
COMMENT	*>     Jeremy Du Croz, Nag Central Office.
COMMENT	*>     Sven Hammarling, Nag Central Office.
COMMENT	*>     Richard Hanson, Sandia National Labs.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date December 2016
COMMENT	*
COMMENT	*> \ingroup double_blas_level1
COMMENT	*
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	DTRSV
(	(
IDENT	UPLO
,	,
IDENT	TRANS
,	,
IDENT	DIAG
,	,
IDENT	N
,	,
IDENT	A
,	,
IDENT	LDA
,	,
IDENT	X
,	,
IDENT	INCX
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level1 routine (version 3.7.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     December 2016
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
token(98)	INTEGER
IDENT	INCX
,	,
IDENT	LDA
,	,
IDENT	N
IDENT	CHARACTER
IDENT	DIAG
,	,
IDENT	TRANS
,	,
IDENT	UPLO
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	DOUBLE
IDENT	PRECISION
IDENT	A
(	(
IDENT	LDA
,	,
*	*)
,	,
IDENT	X
(	(
*	*)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. Parameters ..
IDENT	DOUBLE
IDENT	PRECISION
IDENT	ZERO
IDENT	PARAMETER
(	(
IDENT	ZERO
=	=
IDENT	0
.	.
IDENT	0
IDENT	D
+	+
IDENT	0
)	)
COMMENT	*     ..
COMMENT	*     .. Local Scalars ..
IDENT	DOUBLE
IDENT	PRECISION
IDENT	TEMP
token(98)	INTEGER
IDENT	I
,	,
IDENT	INFO
,	,
IDENT	IX
,	,
IDENT	J
,	,
IDENT	JX
,	,
IDENT	KX
IDENT	LOGICAL
IDENT	NOUNIT
COMMENT	*     ..
COMMENT	*     .. External Functions ..
IDENT	LOGICAL
IDENT	LSAME
IDENT	EXTERNAL
IDENT	LSAME
COMMENT	*     ..
COMMENT	*     .. External Subroutines ..
IDENT	EXTERNAL
IDENT	XERBLA
COMMENT	*     ..
COMMENT	*     .. Intrinsic Functions ..
IDENT	INTRINSIC
IDENT	MAX
COMMENT	*     ..
COMMENT	*
COMMENT	*     Test the input parameters.
COMMENT	*
IDENT	INFO
=	=
IDENT	0
if	IF
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'U'
)	)
.	.
IDENT	AND
.	.
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'L'
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	1
else	ELSE
if	IF
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'N'
)	)
.	.
IDENT	AND
.	.
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'T'
)	)
.	.
IDENT	AND
.	.
+	+
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'C'
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	2
else	ELSE
if	IF
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	DIAG
,	,
STRING	'U'
)	)
.	.
IDENT	AND
.	.
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	DIAG
,	,
STRING	'N'
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	3
else	ELSE
if	IF
(	(
IDENT	N
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	4
else	ELSE
if	IF
(	(
IDENT	LDA
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	N
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	6
else	ELSE
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	8
IDENT	END
if	IF
if	IF
(	(
IDENT	INFO
.	.
IDENT	NE
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	CALL
IDENT	XERBLA
(	(
STRING	'DTRSV '
,	,
IDENT	INFO
)	)
IDENT	RETURN
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Quick return if possible.
COMMENT	*
if	IF
(	(
IDENT	N
.	.
IDENT	EQ
.	.
IDENT	0
)	)
IDENT	RETURN
COMMENT	*
IDENT	NOUNIT
=	=
IDENT	LSAME
(	(
IDENT	DIAG
,	,
STRING	'N'
)	)
COMMENT	*
COMMENT	*     Set up the start point in X if the increment is not unity. This
COMMENT	*     will be  ( N - 1 )*INCX  too small for descending loops.
COMMENT	*
if	IF
(	(
IDENT	INCX
.	.
IDENT	LE
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	KX
=	=
IDENT	1
-	-
(	(
IDENT	N
-	-
IDENT	1
)	)
*	*I
IDENT	NCX
else	ELSE
if	IF
(	(
IDENT	INCX
.	.
IDENT	NE
.	.
IDENT	1
)	)
IDENT	THEN
IDENT	KX
=	=
IDENT	1
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Start the operations. In this version the elements of A are
COMMENT	*     accessed sequentially with one pass through A.
COMMENT	*
if	IF
(	(
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'N'
)	)
)	)
IDENT	THEN
COMMENT	*
COMMENT	*        Form  x := inv( A )*x.
COMMENT	*
if	IF
(	(
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'U'
)	)
)	)
IDENT	THEN
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	THEN
IDENT	DO
IDENT	20
IDENT	J
=	=
IDENT	N
,	,
IDENT	1
,	,
-	-
IDENT	1
if	IF
(	(
IDENT	X
(	(
IDENT	J
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	X
(	(
IDENT	J
)	)
=	=
IDENT	X
(	(
IDENT	J
)	)
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	J
)	)
IDENT	DO
IDENT	10
IDENT	I
=	=
IDENT	J
-	-
IDENT	1
,	,
IDENT	1
,	,
-	-
IDENT	1
IDENT	X
(	(
IDENT	I
)	)
=	=
IDENT	X
(	(
IDENT	I
)	)
-	-
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	10
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	20
IDENT	CONTINUE
else	ELSE
IDENT	JX
=	=
IDENT	KX
+	+
(	(
IDENT	N
-	-
IDENT	1
)	)
*	*I
IDENT	NCX
IDENT	DO
IDENT	40
IDENT	J
=	=
IDENT	N
,	,
IDENT	1
,	,
-	-
IDENT	1
if	IF
(	(
IDENT	X
(	(
IDENT	JX
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	X
(	(
IDENT	JX
)	)
=	=
IDENT	X
(	(
IDENT	JX
)	)
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	JX
)	)
IDENT	IX
=	=
IDENT	JX
IDENT	DO
IDENT	30
IDENT	I
=	=
IDENT	J
-	-
IDENT	1
,	,
IDENT	1
,	,
-	-
IDENT	1
IDENT	IX
=	=
IDENT	IX
-	-
IDENT	INCX
IDENT	X
(	(
IDENT	IX
)	)
=	=
IDENT	X
(	(
IDENT	IX
)	)
-	-
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	30
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	JX
=	=
IDENT	JX
-	-
IDENT	INCX
IDENT	40
IDENT	CONTINUE
IDENT	END
if	IF
else	ELSE
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	THEN
IDENT	DO
IDENT	60
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	X
(	(
IDENT	J
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	X
(	(
IDENT	J
)	)
=	=
IDENT	X
(	(
IDENT	J
)	)
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	J
)	)
IDENT	DO
IDENT	50
IDENT	I
=	=
IDENT	J
+	+
IDENT	1
,	,
IDENT	N
IDENT	X
(	(
IDENT	I
)	)
=	=
IDENT	X
(	(
IDENT	I
)	)
-	-
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	50
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	60
IDENT	CONTINUE
else	ELSE
IDENT	JX
=	=
IDENT	KX
IDENT	DO
IDENT	80
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	X
(	(
IDENT	JX
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	X
(	(
IDENT	JX
)	)
=	=
IDENT	X
(	(
IDENT	JX
)	)
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	JX
)	)
IDENT	IX
=	=
IDENT	JX
IDENT	DO
IDENT	70
IDENT	I
=	=
IDENT	J
+	+
IDENT	1
,	,
IDENT	N
IDENT	IX
=	=
IDENT	IX
+	+
IDENT	INCX
IDENT	X
(	(
IDENT	IX
)	)
=	=
IDENT	X
(	(
IDENT	IX
)	)
-	-
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	70
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	JX
=	=
IDENT	JX
+	+
IDENT	INCX
IDENT	80
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	END
if	IF
else	ELSE
COMMENT	*
COMMENT	*        Form  x := inv( A**T )*x.
COMMENT	*
if	IF
(	(
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'U'
)	)
)	)
IDENT	THEN
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	THEN
IDENT	DO
IDENT	100
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	J
)	)
IDENT	DO
IDENT	90
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	TEMP
-	-
IDENT	A
(	(
IDENT	I
,	,
IDENT	J
)	)
*	*X
(	(
IDENT	I
)	)
IDENT	90
IDENT	CONTINUE
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	TEMP
=	=
IDENT	TEMP
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	X
(	(
IDENT	J
)	)
=	=
IDENT	TEMP
IDENT	100
IDENT	CONTINUE
else	ELSE
IDENT	JX
=	=
IDENT	KX
IDENT	DO
IDENT	120
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	JX
)	)
IDENT	IX
=	=
IDENT	KX
IDENT	DO
IDENT	110
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	TEMP
-	-
IDENT	A
(	(
IDENT	I
,	,
IDENT	J
)	)
*	*X
(	(
IDENT	IX
)	)
IDENT	IX
=	=
IDENT	IX
+	+
IDENT	INCX
IDENT	110
IDENT	CONTINUE
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	TEMP
=	=
IDENT	TEMP
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	X
(	(
IDENT	JX
)	)
=	=
IDENT	TEMP
IDENT	JX
=	=
IDENT	JX
+	+
IDENT	INCX
IDENT	120
IDENT	CONTINUE
IDENT	END
if	IF
else	ELSE
if	IF
(	(
IDENT	INCX
.	.
IDENT	EQ
.	.
IDENT	1
)	)
IDENT	THEN
IDENT	DO
IDENT	140
IDENT	J
=	=
IDENT	N
,	,
IDENT	1
,	,
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	J
)	)
IDENT	DO
IDENT	130
IDENT	I
=	=
IDENT	N
,	,
IDENT	J
+	+
IDENT	1
,	,
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	TEMP
-	-
IDENT	A
(	(
IDENT	I
,	,
IDENT	J
)	)
*	*X
(	(
IDENT	I
)	)
IDENT	130
IDENT	CONTINUE
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	TEMP
=	=
IDENT	TEMP
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	X
(	(
IDENT	J
)	)
=	=
IDENT	TEMP
IDENT	140
IDENT	CONTINUE
else	ELSE
IDENT	KX
=	=
IDENT	KX
+	+
(	(
IDENT	N
-	-
IDENT	1
)	)
*	*I
IDENT	NCX
IDENT	JX
=	=
IDENT	KX
IDENT	DO
IDENT	160
IDENT	J
=	=
IDENT	N
,	,
IDENT	1
,	,
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	X
(	(
IDENT	JX
)	)
IDENT	IX
=	=
IDENT	KX
IDENT	DO
IDENT	150
IDENT	I
=	=
IDENT	N
,	,
IDENT	J
+	+
IDENT	1
,	,
-	-
IDENT	1
IDENT	TEMP
=	=
IDENT	TEMP
-	-
IDENT	A
(	(
IDENT	I
,	,
IDENT	J
)	)
*	*X
(	(
IDENT	IX
)	)
IDENT	IX
=	=
IDENT	IX
-	-
IDENT	INCX
IDENT	150
IDENT	CONTINUE
if	IF
(	(
IDENT	NOUNIT
)	)
IDENT	TEMP
=	=
IDENT	TEMP
/	/
IDENT	A
(	(
IDENT	J
,	,
IDENT	J
)	)
IDENT	X
(	(
IDENT	JX
)	)
=	=
IDENT	TEMP
IDENT	JX
=	=
IDENT	JX
-	-
IDENT	INCX
IDENT	160
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	END
if	IF
IDENT	END
if	IF
COMMENT	*
IDENT	RETURN
COMMENT	*
COMMENT	*     End of DTRSV .
COMMENT	*
IDENT	END
