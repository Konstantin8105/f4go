COMMENT	> \brief \b CGEMM
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE CGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       COMPLEX ALPHA,BETA
COMMENT	*       INTEGER K,LDA,LDB,LDC,M,N
COMMENT	*       CHARACTER TRANSA,TRANSB
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       COMPLEX A(LDA,*),B(LDB,*),C(LDC,*)
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*> CGEMM  performs one of the matrix-matrix operations
COMMENT	*>
COMMENT	*>    C := alpha*op( A )*op( B ) + beta*C,
COMMENT	*>
COMMENT	*> where  op( X ) is one of
COMMENT	*>
COMMENT	*>    op( X ) = X   or   op( X ) = X**T   or   op( X ) = X**H,
COMMENT	*>
COMMENT	*> alpha and beta are scalars, and A, B and C are matrices, with op( A )
COMMENT	*> an m by k matrix,  op( B )  a  k by n matrix and  C an m by n matrix.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in] TRANSA
COMMENT	*> \verbatim
COMMENT	*>          TRANSA is CHARACTER*1
COMMENT	*>           On entry, TRANSA specifies the form of op( A ) to be used in
COMMENT	*>           the matrix multiplication as follows:
COMMENT	*>
COMMENT	*>              TRANSA = 'N' or 'n',  op( A ) = A.
COMMENT	*>
COMMENT	*>              TRANSA = 'T' or 't',  op( A ) = A**T.
COMMENT	*>
COMMENT	*>              TRANSA = 'C' or 'c',  op( A ) = A**H.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] TRANSB
COMMENT	*> \verbatim
COMMENT	*>          TRANSB is CHARACTER*1
COMMENT	*>           On entry, TRANSB specifies the form of op( B ) to be used in
COMMENT	*>           the matrix multiplication as follows:
COMMENT	*>
COMMENT	*>              TRANSB = 'N' or 'n',  op( B ) = B.
COMMENT	*>
COMMENT	*>              TRANSB = 'T' or 't',  op( B ) = B**T.
COMMENT	*>
COMMENT	*>              TRANSB = 'C' or 'c',  op( B ) = B**H.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] M
COMMENT	*> \verbatim
COMMENT	*>          M is INTEGER
COMMENT	*>           On entry,  M  specifies  the number  of rows  of the  matrix
COMMENT	*>           op( A )  and of the  matrix  C.  M  must  be at least  zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] N
COMMENT	*> \verbatim
COMMENT	*>          N is INTEGER
COMMENT	*>           On entry,  N  specifies the number  of columns of the matrix
COMMENT	*>           op( B ) and the number of columns of the matrix C. N must be
COMMENT	*>           at least zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] K
COMMENT	*> \verbatim
COMMENT	*>          K is INTEGER
COMMENT	*>           On entry,  K  specifies  the number of columns of the matrix
COMMENT	*>           op( A ) and the number of rows of the matrix op( B ). K must
COMMENT	*>           be at least  zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] ALPHA
COMMENT	*> \verbatim
COMMENT	*>          ALPHA is COMPLEX
COMMENT	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] A
COMMENT	*> \verbatim
COMMENT	*>          A is COMPLEX array, dimension ( LDA, ka ), where ka is
COMMENT	*>           k  when  TRANSA = 'N' or 'n',  and is  m  otherwise.
COMMENT	*>           Before entry with  TRANSA = 'N' or 'n',  the leading  m by k
COMMENT	*>           part of the array  A  must contain the matrix  A,  otherwise
COMMENT	*>           the leading  k by m  part of the array  A  must contain  the
COMMENT	*>           matrix A.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDA
COMMENT	*> \verbatim
COMMENT	*>          LDA is INTEGER
COMMENT	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT	*>           in the calling (sub) program. When  TRANSA = 'N' or 'n' then
COMMENT	*>           LDA must be at least  max( 1, m ), otherwise  LDA must be at
COMMENT	*>           least  max( 1, k ).
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] B
COMMENT	*> \verbatim
COMMENT	*>          B is COMPLEX array, dimension ( LDB, kb ), where kb is
COMMENT	*>           n  when  TRANSB = 'N' or 'n',  and is  k  otherwise.
COMMENT	*>           Before entry with  TRANSB = 'N' or 'n',  the leading  k by n
COMMENT	*>           part of the array  B  must contain the matrix  B,  otherwise
COMMENT	*>           the leading  n by k  part of the array  B  must contain  the
COMMENT	*>           matrix B.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDB
COMMENT	*> \verbatim
COMMENT	*>          LDB is INTEGER
COMMENT	*>           On entry, LDB specifies the first dimension of B as declared
COMMENT	*>           in the calling (sub) program. When  TRANSB = 'N' or 'n' then
COMMENT	*>           LDB must be at least  max( 1, k ), otherwise  LDB must be at
COMMENT	*>           least  max( 1, n ).
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] BETA
COMMENT	*> \verbatim
COMMENT	*>          BETA is COMPLEX
COMMENT	*>           On entry,  BETA  specifies the scalar  beta.  When  BETA  is
COMMENT	*>           supplied as zero then C need not be set on input.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] C
COMMENT	*> \verbatim
COMMENT	*>          C is COMPLEX array, dimension ( LDC, N )
COMMENT	*>           Before entry, the leading  m by n  part of the array  C must
COMMENT	*>           contain the matrix  C,  except when  beta  is zero, in which
COMMENT	*>           case C need not be set on entry.
COMMENT	*>           On exit, the array  C  is overwritten by the  m by n  matrix
COMMENT	*>           ( alpha*op( A )*op( B ) + beta*C ).
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDC
COMMENT	*> \verbatim
COMMENT	*>          LDC is INTEGER
COMMENT	*>           On entry, LDC specifies the first dimension of C as declared
COMMENT	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
COMMENT	*>           max( 1, m ).
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date December 2016
COMMENT	*
COMMENT	*> \ingroup complex_blas_level3
COMMENT	*
COMMENT	*> \par Further Details:
COMMENT	*  =====================
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*>  Level 3 Blas routine.
COMMENT	*>
COMMENT	*>  -- Written on 8-February-1989.
COMMENT	*>     Jack Dongarra, Argonne National Laboratory.
COMMENT	*>     Iain Duff, AERE Harwell.
COMMENT	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
COMMENT	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	CGEMM
(	(
IDENT	TRANSA
,	,
IDENT	TRANSB
,	,
IDENT	M
,	,
IDENT	N
,	,
IDENT	K
,	,
IDENT	ALPHA
,	,
IDENT	A
,	,
IDENT	LDA
,	,
IDENT	B
,	,
IDENT	LDB
,	,
IDENT	BETA
,	,
IDENT	C
,	,
IDENT	LDC
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level3 routine (version 3.7.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     December 2016
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
IDENT	COMPLEX
IDENT	ALPHA
,	,
IDENT	BETA
token(98)	INTEGER
IDENT	K
,	,
IDENT	LDA
,	,
IDENT	LDB
,	,
IDENT	LDC
,	,
IDENT	M
,	,
IDENT	N
IDENT	CHARACTER
IDENT	TRANSA
,	,
IDENT	TRANSB
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	COMPLEX
IDENT	A
(	(
IDENT	LDA
,	,
*	*)
,	,
IDENT	B
(	(
IDENT	LDB
,	,
*	*)
,	,
IDENT	C
(	(
IDENT	LDC
,	,
*	*)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. External Functions ..
IDENT	LOGICAL
IDENT	LSAME
IDENT	EXTERNAL
IDENT	LSAME
COMMENT	*     ..
COMMENT	*     .. External Subroutines ..
IDENT	EXTERNAL
IDENT	XERBLA
COMMENT	*     ..
COMMENT	*     .. Intrinsic Functions ..
IDENT	INTRINSIC
IDENT	CONJG
,	,
IDENT	MAX
COMMENT	*     ..
COMMENT	*     .. Local Scalars ..
IDENT	COMPLEX
IDENT	TEMP
token(98)	INTEGER
IDENT	I
,	,
IDENT	INFO
,	,
IDENT	J
,	,
IDENT	L
,	,
IDENT	NCOLA
,	,
IDENT	NROWA
,	,
IDENT	NROWB
IDENT	LOGICAL
IDENT	CONJA
,	,
IDENT	CONJB
,	,
IDENT	NOTA
,	,
IDENT	NOTB
COMMENT	*     ..
COMMENT	*     .. Parameters ..
IDENT	COMPLEX
IDENT	ONE
IDENT	PARAMETER
(	(
IDENT	ONE
=	=
(	(
IDENT	1
.	.
IDENT	0
IDENT	E
+	+
IDENT	0
,	,
IDENT	0
.	.
IDENT	0
IDENT	E
+	+
IDENT	0
)	)
)	)
IDENT	COMPLEX
IDENT	ZERO
IDENT	PARAMETER
(	(
IDENT	ZERO
=	=
(	(
IDENT	0
.	.
IDENT	0
IDENT	E
+	+
IDENT	0
,	,
IDENT	0
.	.
IDENT	0
IDENT	E
+	+
IDENT	0
)	)
)	)
COMMENT	*     ..
COMMENT	*
COMMENT	*     Set  NOTA  and  NOTB  as  true if  A  and  B  respectively are not
COMMENT	*     conjugated or transposed, set  CONJA and CONJB  as true if  A  and
COMMENT	*     B  respectively are to be  transposed but  not conjugated  and set
COMMENT	*     NROWA, NCOLA and  NROWB  as the number of rows and  columns  of  A
COMMENT	*     and the number of rows of  B  respectively.
COMMENT	*
IDENT	NOTA
=	=
IDENT	LSAME
(	(
IDENT	TRANSA
,	,
STRING	'N'
)	)
IDENT	NOTB
=	=
IDENT	LSAME
(	(
IDENT	TRANSB
,	,
STRING	'N'
)	)
IDENT	CONJA
=	=
IDENT	LSAME
(	(
IDENT	TRANSA
,	,
STRING	'C'
)	)
IDENT	CONJB
=	=
IDENT	LSAME
(	(
IDENT	TRANSB
,	,
STRING	'C'
)	)
if	IF
(	(
IDENT	NOTA
)	)
IDENT	THEN
IDENT	NROWA
=	=
IDENT	M
IDENT	NCOLA
=	=
IDENT	K
IDENT	ELSE
IDENT	NROWA
=	=
IDENT	K
IDENT	NCOLA
=	=
IDENT	M
IDENT	END
if	IF
if	IF
(	(
IDENT	NOTB
)	)
IDENT	THEN
IDENT	NROWB
=	=
IDENT	K
IDENT	ELSE
IDENT	NROWB
=	=
IDENT	N
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Test the input parameters.
COMMENT	*
IDENT	INFO
=	=
IDENT	0
if	IF
(	(
(	(
.	.
IDENT	NOT
.	.
IDENT	NOTA
)	)
.	.
IDENT	AND
.	.
(	(
.	.
IDENT	NOT
.	.
IDENT	CONJA
)	)
.	.
IDENT	AND
.	.
+	+
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANSA
,	,
STRING	'T'
)	)
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	1
IDENT	ELSE
if	IF
(	(
(	(
.	.
IDENT	NOT
.	.
IDENT	NOTB
)	)
.	.
IDENT	AND
.	.
(	(
.	.
IDENT	NOT
.	.
IDENT	CONJB
)	)
.	.
IDENT	AND
.	.
+	+
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANSB
,	,
STRING	'T'
)	)
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	2
IDENT	ELSE
if	IF
(	(
IDENT	M
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	3
IDENT	ELSE
if	IF
(	(
IDENT	N
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	4
IDENT	ELSE
if	IF
(	(
IDENT	K
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	5
IDENT	ELSE
if	IF
(	(
IDENT	LDA
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	NROWA
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	8
IDENT	ELSE
if	IF
(	(
IDENT	LDB
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	NROWB
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	10
IDENT	ELSE
if	IF
(	(
IDENT	LDC
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	M
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	13
IDENT	END
if	IF
if	IF
(	(
IDENT	INFO
.	.
IDENT	NE
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	CALL
IDENT	XERBLA
(	(
STRING	'CGEMM '
,	,
IDENT	INFO
)	)
IDENT	RETURN
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Quick return if possible.
COMMENT	*
if	IF
(	(
(	(
IDENT	M
.	.
IDENT	EQ
.	.
IDENT	0
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	N
.	.
IDENT	EQ
.	.
IDENT	0
)	)
.	.
IDENT	OR
.	.
+	+
(	(
(	(
(	(
IDENT	ALPHA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	K
.	.
IDENT	EQ
.	.
IDENT	0
)	)
)	)
.	.
IDENT	AND
.	.
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ONE
)	)
)	)
)	)
IDENT	RETURN
COMMENT	*
COMMENT	*     And when  alpha.eq.zero.
COMMENT	*
if	IF
(	(
IDENT	ALPHA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	20
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	10
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	10
IDENT	CONTINUE
IDENT	20
IDENT	CONTINUE
IDENT	ELSE
IDENT	DO
IDENT	40
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	30
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	30
IDENT	CONTINUE
IDENT	40
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	RETURN
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Start the operations.
COMMENT	*
if	IF
(	(
IDENT	NOTB
)	)
IDENT	THEN
if	IF
(	(
IDENT	NOTA
)	)
IDENT	THEN
COMMENT	*
COMMENT	*           Form  C := alpha*A*B + beta*C.
COMMENT	*
IDENT	DO
IDENT	90
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	50
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	50
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	NE
.	.
IDENT	ONE
)	)
IDENT	THEN
IDENT	DO
IDENT	60
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	60
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	DO
IDENT	80
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	ALPHA
*	*B
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	DO
IDENT	70
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	L
)	)
IDENT	70
IDENT	CONTINUE
IDENT	80
IDENT	CONTINUE
IDENT	90
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	CONJA
)	)
IDENT	THEN
COMMENT	*
COMMENT	*           Form  C := alpha*A**H*B + beta*C.
COMMENT	*
IDENT	DO
IDENT	120
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	110
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	100
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	CONJG
(	(
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*B
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	100
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	110
IDENT	CONTINUE
IDENT	120
IDENT	CONTINUE
IDENT	ELSE
COMMENT	*
COMMENT	*           Form  C := alpha*A**T*B + beta*C
COMMENT	*
IDENT	DO
IDENT	150
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	140
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	130
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
*	*B
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	130
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	140
IDENT	CONTINUE
IDENT	150
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	NOTA
)	)
IDENT	THEN
if	IF
(	(
IDENT	CONJB
)	)
IDENT	THEN
COMMENT	*
COMMENT	*           Form  C := alpha*A*B**H + beta*C.
COMMENT	*
IDENT	DO
IDENT	200
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	160
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	160
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	NE
.	.
IDENT	ONE
)	)
IDENT	THEN
IDENT	DO
IDENT	170
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	170
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	DO
IDENT	190
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	ALPHA
*	*C
IDENT	ONJG
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	DO
IDENT	180
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	L
)	)
IDENT	180
IDENT	CONTINUE
IDENT	190
IDENT	CONTINUE
IDENT	200
IDENT	CONTINUE
IDENT	ELSE
COMMENT	*
COMMENT	*           Form  C := alpha*A*B**T + beta*C
COMMENT	*
IDENT	DO
IDENT	250
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	210
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	210
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	NE
.	.
IDENT	ONE
)	)
IDENT	THEN
IDENT	DO
IDENT	220
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	220
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	DO
IDENT	240
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	ALPHA
*	*B
(	(
IDENT	J
,	,
IDENT	L
)	)
IDENT	DO
IDENT	230
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	TEMP
*	*A
(	(
IDENT	I
,	,
IDENT	L
)	)
IDENT	230
IDENT	CONTINUE
IDENT	240
IDENT	CONTINUE
IDENT	250
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	CONJA
)	)
IDENT	THEN
if	IF
(	(
IDENT	CONJB
)	)
IDENT	THEN
COMMENT	*
COMMENT	*           Form  C := alpha*A**H*B**H + beta*C.
COMMENT	*
IDENT	DO
IDENT	280
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	270
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	260
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	CONJG
(	(
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*C
IDENT	ONJG
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	260
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	270
IDENT	CONTINUE
IDENT	280
IDENT	CONTINUE
IDENT	ELSE
COMMENT	*
COMMENT	*           Form  C := alpha*A**H*B**T + beta*C
COMMENT	*
IDENT	DO
IDENT	310
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	300
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	290
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	CONJG
(	(
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*B
(	(
IDENT	J
,	,
IDENT	L
)	)
IDENT	290
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	300
IDENT	CONTINUE
IDENT	310
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	CONJB
)	)
IDENT	THEN
COMMENT	*
COMMENT	*           Form  C := alpha*A**T*B**H + beta*C
COMMENT	*
IDENT	DO
IDENT	340
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	330
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	320
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
*	*C
IDENT	ONJG
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	320
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	330
IDENT	CONTINUE
IDENT	340
IDENT	CONTINUE
IDENT	ELSE
COMMENT	*
COMMENT	*           Form  C := alpha*A**T*B**T + beta*C
COMMENT	*
IDENT	DO
IDENT	370
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	360
IDENT	I
=	=
IDENT	1
,	,
IDENT	M
IDENT	TEMP
=	=
IDENT	ZERO
IDENT	DO
IDENT	350
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP
=	=
IDENT	TEMP
+	+
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
*	*B
(	(
IDENT	J
,	,
IDENT	L
)	)
IDENT	350
IDENT	CONTINUE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP
+	+
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	END
if	IF
IDENT	360
IDENT	CONTINUE
IDENT	370
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	END
if	IF
COMMENT	*
IDENT	RETURN
COMMENT	*
COMMENT	*     End of CGEMM .
COMMENT	*
IDENT	END
