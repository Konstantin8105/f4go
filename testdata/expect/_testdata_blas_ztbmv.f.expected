COMMENT             	*> \brief \b ZTBMV
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE ZTBMV(UPLO,TRANS,DIAG,N,K,A,LDA,X,INCX)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       INTEGER INCX,K,LDA,N
COMMENT             	*       CHARACTER DIAG,TRANS,UPLO
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       COMPLEX*16 A(LDA,*),X(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> ZTBMV  performs one of the matrix-vector operations
COMMENT             	*>
COMMENT             	*>    x := A*x,   or   x := A**T*x,   or   x := A**H*x,
COMMENT             	*>
COMMENT             	*> where x is an n element vector and  A is an n by n unit, or non-unit,
COMMENT             	*> upper or lower triangular band matrix, with ( k + 1 ) diagonals.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] UPLO
COMMENT             	*> \verbatim
COMMENT             	*>          UPLO is CHARACTER*1
COMMENT             	*>           On entry, UPLO specifies whether the matrix is an upper or
COMMENT             	*>           lower triangular matrix as follows:
COMMENT             	*>
COMMENT             	*>              UPLO = 'U' or 'u'   A is an upper triangular matrix.
COMMENT             	*>
COMMENT             	*>              UPLO = 'L' or 'l'   A is a lower triangular matrix.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] TRANS
COMMENT             	*> \verbatim
COMMENT             	*>          TRANS is CHARACTER*1
COMMENT             	*>           On entry, TRANS specifies the operation to be performed as
COMMENT             	*>           follows:
COMMENT             	*>
COMMENT             	*>              TRANS = 'N' or 'n'   x := A*x.
COMMENT             	*>
COMMENT             	*>              TRANS = 'T' or 't'   x := A**T*x.
COMMENT             	*>
COMMENT             	*>              TRANS = 'C' or 'c'   x := A**H*x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] DIAG
COMMENT             	*> \verbatim
COMMENT             	*>          DIAG is CHARACTER*1
COMMENT             	*>           On entry, DIAG specifies whether or not A is unit
COMMENT             	*>           triangular as follows:
COMMENT             	*>
COMMENT             	*>              DIAG = 'U' or 'u'   A is assumed to be unit triangular.
COMMENT             	*>
COMMENT             	*>              DIAG = 'N' or 'n'   A is not assumed to be unit
COMMENT             	*>                                  triangular.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the order of the matrix A.
COMMENT             	*>           N must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] K
COMMENT             	*> \verbatim
COMMENT             	*>          K is INTEGER
COMMENT             	*>           On entry with UPLO = 'U' or 'u', K specifies the number of
COMMENT             	*>           super-diagonals of the matrix A.
COMMENT             	*>           On entry with UPLO = 'L' or 'l', K specifies the number of
COMMENT             	*>           sub-diagonals of the matrix A.
COMMENT             	*>           K must satisfy  0 .le. K.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is COMPLEX*16 array, dimension ( LDA, N ).
COMMENT             	*>           Before entry with UPLO = 'U' or 'u', the leading ( k + 1 )
COMMENT             	*>           by n part of the array A must contain the upper triangular
COMMENT             	*>           band part of the matrix of coefficients, supplied column by
COMMENT             	*>           column, with the leading diagonal of the matrix in row
COMMENT             	*>           ( k + 1 ) of the array, the first super-diagonal starting at
COMMENT             	*>           position 2 in row k, and so on. The top left k by k triangle
COMMENT             	*>           of the array A is not referenced.
COMMENT             	*>           The following program segment will transfer an upper
COMMENT             	*>           triangular band matrix from conventional full matrix storage
COMMENT             	*>           to band storage:
COMMENT             	*>
COMMENT             	*>                 DO 20, J = 1, N
COMMENT             	*>                    M = K + 1 - J
COMMENT             	*>                    DO 10, I = MAX( 1, J - K ), J
COMMENT             	*>                       A( M + I, J ) = matrix( I, J )
COMMENT             	*>              10    CONTINUE
COMMENT             	*>              20 CONTINUE
COMMENT             	*>
COMMENT             	*>           Before entry with UPLO = 'L' or 'l', the leading ( k + 1 )
COMMENT             	*>           by n part of the array A must contain the lower triangular
COMMENT             	*>           band part of the matrix of coefficients, supplied column by
COMMENT             	*>           column, with the leading diagonal of the matrix in row 1 of
COMMENT             	*>           the array, the first sub-diagonal starting at position 1 in
COMMENT             	*>           row 2, and so on. The bottom right k by k triangle of the
COMMENT             	*>           array A is not referenced.
COMMENT             	*>           The following program segment will transfer a lower
COMMENT             	*>           triangular band matrix from conventional full matrix storage
COMMENT             	*>           to band storage:
COMMENT             	*>
COMMENT             	*>                 DO 20, J = 1, N
COMMENT             	*>                    M = 1 - J
COMMENT             	*>                    DO 10, I = J, MIN( N, J + K )
COMMENT             	*>                       A( M + I, J ) = matrix( I, J )
COMMENT             	*>              10    CONTINUE
COMMENT             	*>              20 CONTINUE
COMMENT             	*>
COMMENT             	*>           Note that when DIAG = 'U' or 'u' the elements of the array A
COMMENT             	*>           corresponding to the diagonal elements of the matrix are not
COMMENT             	*>           referenced, but are assumed to be unity.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in the calling (sub) program. LDA must be at least
COMMENT             	*>           ( k + 1 ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] X
COMMENT             	*> \verbatim
COMMENT             	*>          X is COMPLEX*16 array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
COMMENT             	*>           Before entry, the incremented array X must contain the n
COMMENT             	*>           element vector x. On exit, X is overwritten with the
COMMENT             	*>           transformed vector x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>           On entry, INCX specifies the increment for the elements of
COMMENT             	*>           X. INCX must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup complex16_blas_level2
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 2 Blas routine.
COMMENT             	*>  The vector and matrix arguments are not referenced when N = 0, or M = 0
COMMENT             	*>
COMMENT             	*>  -- Written on 22-October-1986.
COMMENT             	*>     Jack Dongarra, Argonne National Lab.
COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
COMMENT             	*>     Sven Hammarling, Nag Central Office.
COMMENT             	*>     Richard Hanson, Sandia National Labs.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	ZTBMV
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	TRANS
,                   	,
IDENT               	DIAG
,                   	,
IDENT               	N
,                   	,
IDENT               	K
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	K
,                   	,
IDENT               	LDA
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	DIAG
,                   	,
IDENT               	TRANS
,                   	,
IDENT               	UPLO
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Parameters ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
(                   	(
FLOAT               	0.0D+0
,                   	,
FLOAT               	0.0D+0
)                   	)
)                   	)
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	TEMP
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	KPLUS1
,                   	,
IDENT               	KX
,                   	,
IDENT               	L
IDENT               	LOGICAL
IDENT               	NOCONJ
,                   	,
IDENT               	NOUNIT
COMMENT             	*     ..
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	DCONJG
,                   	,
IDENT               	MAX
,                   	,
IDENT               	MIN
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
&&                  	.AND.
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
&&                  	.AND.
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'T'
)                   	)
&&                  	.AND.
+                   	+
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'C'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	DIAG
,                   	,
STRING              	'U'
)                   	)
&&                  	.AND.
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	DIAG
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	3
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	4
else                	ELSE
if                  	IF
(                   	(
IDENT               	K
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	5
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
(                   	(
IDENT               	K
+                   	+
INT                 	1
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	7
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	9
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
token(106)          	THEN
token(105)          	CALL
IDENT               	XERBLA
(                   	(
STRING              	'ZTBMV '
,                   	,
IDENT               	INFO
)                   	)
return              	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
return              	RETURN
COMMENT             	*
IDENT               	NOCONJ
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'T'
)                   	)
IDENT               	NOUNIT
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	DIAG
,                   	,
STRING              	'N'
)                   	)
COMMENT             	*
COMMENT             	*     Set up the start point in X if the increment is not unity. This
COMMENT             	*     will be  ( N - 1 )*INCX   too small for descending loops.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	INCX
<=                  	.LE.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	KX
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
!=                  	.NE.
INT                 	1
)                   	)
token(106)          	THEN
IDENT               	KX
=                   	=
INT                 	1
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations. In this version the elements of A are
COMMENT             	*     accessed sequentially with one pass through A.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
COMMENT             	*
COMMENT             	*         Form  x := A*x.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	KPLUS1
=                   	=
IDENT               	K
+                   	+
INT                 	1
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	L
=                   	=
IDENT               	KPLUS1
-                   	-
IDENT               	J
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	X
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	10
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	X
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	20
continue            	CONTINUE
else                	ELSE
IDENT               	JX
=                   	=
IDENT               	KX
token(103)          	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	L
=                   	=
IDENT               	KPLUS1
-                   	-
IDENT               	J
token(103)          	DO
INT                 	30
IDENT               	I
=                   	=
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
INT                 	30
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
if                  	IF
(                   	(
IDENT               	J
>                   	.GT.
IDENT               	K
)                   	)
IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
IDENT               	INCX
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	60
IDENT               	J
=                   	=
IDENT               	N
,                   	,
INT                 	1
,                   	,
-                   	-
INT                 	1
if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	L
=                   	=
INT                 	1
-                   	-
IDENT               	J
token(103)          	DO
INT                 	50
IDENT               	I
=                   	=
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
,                   	,
IDENT               	J
+                   	+
INT                 	1
,                   	,
-                   	-
INT                 	1
IDENT               	X
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	50
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	X
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
*                   	*
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	60
continue            	CONTINUE
else                	ELSE
IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
IDENT               	JX
=                   	=
IDENT               	KX
token(103)          	DO
INT                 	80
IDENT               	J
=                   	=
IDENT               	N
,                   	,
INT                 	1
,                   	,
-                   	-
INT                 	1
if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	L
=                   	=
INT                 	1
-                   	-
IDENT               	J
token(103)          	DO
INT                 	70
IDENT               	I
=                   	=
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
,                   	,
IDENT               	J
+                   	+
INT                 	1
,                   	,
-                   	-
INT                 	1
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
-                   	-
IDENT               	INCX
INT                 	70
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
*                   	*
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
IDENT               	JX
=                   	=
IDENT               	JX
-                   	-
IDENT               	INCX
if                  	IF
(                   	(
(                   	(
IDENT               	N
-                   	-
IDENT               	J
)                   	)
>=                  	.GE.
IDENT               	K
)                   	)
IDENT               	KX
=                   	=
IDENT               	KX
-                   	-
IDENT               	INCX
INT                 	80
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  x := A**T*x  or  x := A**H*x.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	KPLUS1
=                   	=
IDENT               	K
+                   	+
INT                 	1
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	110
IDENT               	J
=                   	=
IDENT               	N
,                   	,
INT                 	1
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	L
=                   	=
IDENT               	KPLUS1
-                   	-
IDENT               	J
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
token(103)          	DO
INT                 	90
IDENT               	I
=                   	=
IDENT               	J
-                   	-
INT                 	1
,                   	,
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	90
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	100
IDENT               	I
=                   	=
IDENT               	J
-                   	-
INT                 	1
,                   	,
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	100
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	X
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	TEMP
INT                 	110
continue            	CONTINUE
else                	ELSE
IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
IDENT               	JX
=                   	=
IDENT               	KX
token(103)          	DO
INT                 	140
IDENT               	J
=                   	=
IDENT               	N
,                   	,
INT                 	1
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	KX
=                   	=
IDENT               	KX
-                   	-
IDENT               	INCX
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	L
=                   	=
IDENT               	KPLUS1
-                   	-
IDENT               	J
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
token(103)          	DO
INT                 	120
IDENT               	I
=                   	=
IDENT               	J
-                   	-
INT                 	1
,                   	,
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
-                   	-
IDENT               	INCX
INT                 	120
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	KPLUS1
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	130
IDENT               	I
=                   	=
IDENT               	J
-                   	-
INT                 	1
,                   	,
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	J
-                   	-
IDENT               	K
)                   	)
,                   	,
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
-                   	-
IDENT               	INCX
INT                 	130
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
=                   	=
IDENT               	TEMP
IDENT               	JX
=                   	=
IDENT               	JX
-                   	-
IDENT               	INCX
INT                 	140
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	170
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	L
=                   	=
INT                 	1
-                   	-
IDENT               	J
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
token(103)          	DO
INT                 	150
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	150
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	160
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	160
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	X
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	TEMP
INT                 	170
continue            	CONTINUE
else                	ELSE
IDENT               	JX
=                   	=
IDENT               	KX
token(103)          	DO
INT                 	200
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
IDENT               	INCX
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	L
=                   	=
INT                 	1
-                   	-
IDENT               	J
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
token(103)          	DO
INT                 	180
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
INT                 	180
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	NOUNIT
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
INT                 	1
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	190
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	MIN
(                   	(
IDENT               	N
,                   	,
IDENT               	J
+                   	+
IDENT               	K
)                   	)
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
+                   	+
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
INT                 	190
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
=                   	=
IDENT               	TEMP
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
INT                 	200
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
return              	RETURN
COMMENT             	*
COMMENT             	*     End of ZTBMV .
COMMENT             	*
token(102)          	END
