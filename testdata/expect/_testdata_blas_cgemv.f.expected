COMMENT             	*> \brief \b CGEMV
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE CGEMV(TRANS,M,N,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       COMPLEX ALPHA,BETA
COMMENT             	*       INTEGER INCX,INCY,LDA,M,N
COMMENT             	*       CHARACTER TRANS
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       COMPLEX A(LDA,*),X(*),Y(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> CGEMV performs one of the matrix-vector operations
COMMENT             	*>
COMMENT             	*>    y := alpha*A*x + beta*y,   or   y := alpha*A**T*x + beta*y,   or
COMMENT             	*>
COMMENT             	*>    y := alpha*A**H*x + beta*y,
COMMENT             	*>
COMMENT             	*> where alpha and beta are scalars, x and y are vectors and A is an
COMMENT             	*> m by n matrix.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] TRANS
COMMENT             	*> \verbatim
COMMENT             	*>          TRANS is CHARACTER*1
COMMENT             	*>           On entry, TRANS specifies the operation to be performed as
COMMENT             	*>           follows:
COMMENT             	*>
COMMENT             	*>              TRANS = 'N' or 'n'   y := alpha*A*x + beta*y.
COMMENT             	*>
COMMENT             	*>              TRANS = 'T' or 't'   y := alpha*A**T*x + beta*y.
COMMENT             	*>
COMMENT             	*>              TRANS = 'C' or 'c'   y := alpha*A**H*x + beta*y.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] M
COMMENT             	*> \verbatim
COMMENT             	*>          M is INTEGER
COMMENT             	*>           On entry, M specifies the number of rows of the matrix A.
COMMENT             	*>           M must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the number of columns of the matrix A.
COMMENT             	*>           N must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is COMPLEX
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is COMPLEX array, dimension ( LDA, N )
COMMENT             	*>           Before entry, the leading m by n part of the array A must
COMMENT             	*>           contain the matrix of coefficients.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in the calling (sub) program. LDA must be at least
COMMENT             	*>           max( 1, m ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] X
COMMENT             	*> \verbatim
COMMENT             	*>          X is COMPLEX array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ) when TRANS = 'N' or 'n'
COMMENT             	*>           and at least
COMMENT             	*>           ( 1 + ( m - 1 )*abs( INCX ) ) otherwise.
COMMENT             	*>           Before entry, the incremented array X must contain the
COMMENT             	*>           vector x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>           On entry, INCX specifies the increment for the elements of
COMMENT             	*>           X. INCX must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] BETA
COMMENT             	*> \verbatim
COMMENT             	*>          BETA is COMPLEX
COMMENT             	*>           On entry, BETA specifies the scalar beta. When BETA is
COMMENT             	*>           supplied as zero then Y need not be set on input.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] Y
COMMENT             	*> \verbatim
COMMENT             	*>          Y is COMPLEX array, dimension at least
COMMENT             	*>           ( 1 + ( m - 1 )*abs( INCY ) ) when TRANS = 'N' or 'n'
COMMENT             	*>           and at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCY ) ) otherwise.
COMMENT             	*>           Before entry with BETA non-zero, the incremented array Y
COMMENT             	*>           must contain the vector y. On exit, Y is overwritten by the
COMMENT             	*>           updated vector y.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCY
COMMENT             	*> \verbatim
COMMENT             	*>          INCY is INTEGER
COMMENT             	*>           On entry, INCY specifies the increment for the elements of
COMMENT             	*>           Y. INCY must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup complex_blas_level2
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 2 Blas routine.
COMMENT             	*>  The vector and matrix arguments are not referenced when N = 0, or M = 0
COMMENT             	*>
COMMENT             	*>  -- Written on 22-October-1986.
COMMENT             	*>     Jack Dongarra, Argonne National Lab.
COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
COMMENT             	*>     Sven Hammarling, Nag Central Office.
COMMENT             	*>     Richard Hanson, Sandia National Labs.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	CGEMV
(                   	(
IDENT               	TRANS
,                   	,
IDENT               	M
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	BETA
,                   	,
IDENT               	Y
,                   	,
IDENT               	INCY
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	COMPLEX
IDENT               	ALPHA
,                   	,
IDENT               	BETA
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	LDA
,                   	,
IDENT               	M
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	TRANS
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	COMPLEX
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	Y
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Parameters ..
IDENT               	COMPLEX
IDENT               	ONE
IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
(                   	(
FLOAT               	1.0E+0
,                   	,
FLOAT               	0.0E+0
)                   	)
)                   	)
IDENT               	COMPLEX
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
(                   	(
FLOAT               	0.0E+0
,                   	,
FLOAT               	0.0E+0
)                   	)
)                   	)
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	COMPLEX
IDENT               	TEMP
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	JY
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
,                   	,
IDENT               	LENX
,                   	,
IDENT               	LENY
IDENT               	LOGICAL
IDENT               	NOCONJ
COMMENT             	*     ..
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	CONJG
,                   	,
IDENT               	MAX
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
&&                  	.AND.
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'T'
)                   	)
&&                  	.AND.
+                   	+
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'C'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
IDENT               	M
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	3
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	M
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	6
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	8
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	11
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
token(106)          	THEN
token(105)          	CALL
IDENT               	XERBLA
(                   	(
STRING              	'CGEMV '
,                   	,
IDENT               	INFO
)                   	)
return              	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	M
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
+                   	+
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
return              	RETURN
COMMENT             	*
IDENT               	NOCONJ
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'T'
)                   	)
COMMENT             	*
COMMENT             	*     Set  LENX  and  LENY, the lengths of the vectors x and y, and set
COMMENT             	*     up the start points in  X  and  Y.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	LENX
=                   	=
IDENT               	N
IDENT               	LENY
=                   	=
IDENT               	M
else                	ELSE
IDENT               	LENX
=                   	=
IDENT               	M
IDENT               	LENY
=                   	=
IDENT               	N
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INCX
>                   	.GT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	KX
=                   	=
INT                 	1
else                	ELSE
IDENT               	KX
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	LENX
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INCY
>                   	.GT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	KY
=                   	=
INT                 	1
else                	ELSE
IDENT               	KY
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	LENY
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCY
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations. In this version the elements of A are
COMMENT             	*     accessed sequentially with one pass through A.
COMMENT             	*
COMMENT             	*     First form  y := beta*y.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	LENY
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	ZERO
INT                 	10
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	20
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	LENY
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
INT                 	20
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
IDENT               	IY
=                   	=
IDENT               	KY
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	LENY
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	ZERO
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
INT                 	30
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	40
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	LENY
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
return              	RETURN
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
COMMENT             	*
COMMENT             	*        Form  y := alpha*A*x + y.
COMMENT             	*
IDENT               	JX
=                   	=
IDENT               	KX
if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
token(103)          	DO
INT                 	50
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	50
continue            	CONTINUE
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
INT                 	60
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	IY
=                   	=
IDENT               	KY
token(103)          	DO
INT                 	70
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
INT                 	70
continue            	CONTINUE
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
INT                 	80
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  y := alpha*A**T*x + y  or  y := alpha*A**H*x + y.
COMMENT             	*
IDENT               	JY
=                   	=
IDENT               	KY
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	110
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	ZERO
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	90
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	90
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	100
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
INT                 	100
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
INT                 	110
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	140
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	ZERO
IDENT               	IX
=                   	=
IDENT               	KX
if                  	IF
(                   	(
IDENT               	NOCONJ
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	120
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
INT                 	120
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	130
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
INT                 	130
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
INT                 	140
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
return              	RETURN
COMMENT             	*
COMMENT             	*     End of CGEMV .
COMMENT             	*
token(102)          	END
