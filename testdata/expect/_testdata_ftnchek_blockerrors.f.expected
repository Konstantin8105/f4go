token(97)           	program
IDENT               	blocks
COMMENT             	! program with various errors in balancing block structures
IDENT               	real
IDENT               	x
token(98)           	integer
IDENT               	n
IDENT               	x
=                   	=
IDENT               	bar
(                   	(
FLOAT               	1.0
)                   	)
if                  	if
(                   	(
IDENT               	x
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
token(105)          	call
IDENT               	baz
(                   	(
IDENT               	x
)                   	)
IDENT               	n
=                   	=
IDENT               	int
(                   	(
IDENT               	x
)                   	)
IDENT               	select
IDENT               	case
(                   	(
IDENT               	n
)                   	)
IDENT               	case
(                   	(
INT                 	1
)                   	)
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	2.0
)                   	)
IDENT               	case
(                   	(
INT                 	2
:                   	:
INT                 	10
)                   	)
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	3.0
)                   	)
IDENT               	case
(                   	(
-                   	-
INT                 	1
,                   	,
INT                 	11
:                   	:
INT                 	100
,                   	,
INT                 	300
)                   	)
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	4.0
)                   	)
IDENT               	case
IDENT               	default
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	5.0
)                   	)
token(102)          	end
IDENT               	select
else                	else
IDENT               	k
=                   	=
INT                 	0
IDENT               	loop1
:                   	:
token(103)          	do
IDENT               	i
=                   	=
INT                 	1
,                   	,
INT                 	100
IDENT               	loop2
:                   	:
token(103)          	do
IDENT               	j
=                   	=
INT                 	1
,                   	,
INT                 	10
IDENT               	write
(                   	(
*                   	*
,                   	,
*                   	*
)                   	)
IDENT               	i
,                   	,
IDENT               	j
,                   	,
IDENT               	i
*                   	*
IDENT               	j
if                  	if
(                   	(
IDENT               	i
==                  	.eq.
INT                 	50
)                   	)
IDENT               	exit
IDENT               	loopdedo
COMMENT             	! wrong construct name
IDENT               	k
=                   	=
IDENT               	k
+                   	+
IDENT               	j
if                  	if
(                   	(
IDENT               	k
==                  	.eq.
INT                 	50
)                   	)
IDENT               	cycle
IDENT               	loop2
token(102)          	end
token(103)          	do
IDENT               	loop2
IDENT               	write
(                   	(
*                   	*
,                   	,
*                   	*
)                   	)
IDENT               	k
*                   	*
IDENT               	i
token(95)           	**
INT                 	2
token(104)          	enddo
IDENT               	foop1
IDENT               	case2
:                   	:
IDENT               	select
IDENT               	case
(                   	(
IDENT               	n
)                   	)
IDENT               	case
(                   	(
INT                 	1
)                   	)
IDENT               	case2
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	2.0
)                   	)
IDENT               	case
(                   	(
INT                 	2
:                   	:
INT                 	10
)                   	)
IDENT               	caseZ
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	3.0
)                   	)
IDENT               	case
(                   	(
-                   	-
INT                 	1
,                   	,
INT                 	11
:                   	:
INT                 	100
,                   	,
INT                 	300
)                   	)
IDENT               	case2
token(105)          	call
IDENT               	baz
(                   	(
FLOAT               	4.0
)                   	)
IDENT               	case
IDENT               	default
IDENT               	case2
COMMENT             	!  do-loops with shared terminator
token(103)          	do
INT                 	100
IDENT               	i
=                   	=
INT                 	1
,                   	,
INT                 	10
token(103)          	do
INT                 	100
IDENT               	j
=                   	=
INT                 	1
,                   	,
INT                 	10
IDENT               	print
*                   	*
,                   	,
IDENT               	i
,                   	,
IDENT               	j
,                   	,
IDENT               	i
*                   	*
IDENT               	j
INT                 	100
continue            	continue
token(103)          	do
INT                 	200
IDENT               	i
=                   	=
INT                 	1
,                   	,
INT                 	10
token(103)          	do
INT                 	250
IDENT               	j
=                   	=
INT                 	1
,                   	,
INT                 	10
IDENT               	print
*                   	*
,                   	,
IDENT               	i
,                   	,
IDENT               	j
,                   	,
IDENT               	i
*                   	*
IDENT               	j
INT                 	200
continue            	continue
COMMENT             	! terminators out of order
INT                 	250
token(102)          	end
token(103)          	do
token(102)          	end
IDENT               	select
IDENT               	case2
token(102)          	end
if                  	if
if                  	if
(                   	(
IDENT               	x
==                  	.eq.
INT                 	0
)                   	)
IDENT               	exit
COMMENT             	! no enclosing DO
else                	else
if                  	if
(                   	(
IDENT               	x
<                   	.lt.
INT                 	0
)                   	)
token(106)          	then
COMMENT             	! else has no matching then
IDENT               	print
*                   	*
,                   	,
STRING              	'Hello'
token(102)          	end
IDENT               	select
COMMENT             	! should be end if
token(102)          	end
token(97)           	program
IDENT               	blocks
token(101)          	function
IDENT               	bar
(                   	(
IDENT               	c
)                   	)
IDENT               	real
IDENT               	a
,                   	,
IDENT               	b
,                   	,
IDENT               	c
,                   	,
IDENT               	d
IDENT               	read
*                   	*
,                   	,
IDENT               	a
COMMENT             	! This block is from section 8.1.2.3 of the F90 standard, except for
COMMENT             	! removing space between some keywords
if                  	if
(                   	(
IDENT               	a
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	b
=                   	=
IDENT               	c
/                   	/
IDENT               	a
if                  	if
(                   	(
IDENT               	b
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	d
=                   	=
FLOAT               	1.0
IDENT               	endif
IDENT               	elseif
(                   	(
IDENT               	c
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	b
=                   	=
IDENT               	a
/                   	/
IDENT               	c
IDENT               	d
=                   	=
-                   	-
FLOAT               	1.0
else                	else
IDENT               	b
=                   	=
IDENT               	abs
(                   	(
IDENT               	max
(                   	(
IDENT               	a
,                   	,
IDENT               	c
)                   	)
)                   	)
IDENT               	d
=                   	=
INT                 	0
IDENT               	endif
IDENT               	bar
=                   	=
IDENT               	d
*                   	*
IDENT               	b
token(102)          	end
token(96)           	subroutine
token(96)           	subroutine
IDENT               	baz
(                   	(
IDENT               	c
)                   	)
IDENT               	real
IDENT               	a
,                   	,
IDENT               	b
,                   	,
IDENT               	c
,                   	,
IDENT               	d
IDENT               	read
*                   	*
,                   	,
IDENT               	a
COMMENT             	! Same as above but with spaces restored and construct names added
IDENT               	first_if
:                   	:
if                  	if
(                   	(
IDENT               	a
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	b
=                   	=
IDENT               	c
/                   	/
IDENT               	a
IDENT               	second_if
:                   	:
if                  	if
(                   	(
IDENT               	b
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	d
=                   	=
FLOAT               	1.0
token(102)          	end
if                  	if
IDENT               	second_if
else                	else
if                  	if
(                   	(
IDENT               	c
>                   	.gt.
INT                 	0
)                   	)
token(106)          	then
IDENT               	firstif
IDENT               	b
=                   	=
IDENT               	a
/                   	/
IDENT               	c
IDENT               	d
=                   	=
-                   	-
FLOAT               	1.0
else                	else
IDENT               	first_if
IDENT               	b
=                   	=
IDENT               	abs
(                   	(
IDENT               	max
(                   	(
IDENT               	a
,                   	,
IDENT               	c
)                   	)
)                   	)
IDENT               	d
=                   	=
INT                 	0
token(102)          	end
if                  	if
IDENT               	print
*                   	*
,                   	,
IDENT               	a
,                   	,
IDENT               	b
,                   	,
IDENT               	c
,                   	,
IDENT               	d
token(102)          	end
token(96)           	subroutine
IDENT               	bazz
