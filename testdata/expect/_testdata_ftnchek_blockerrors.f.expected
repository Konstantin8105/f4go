token(97)	program
IDENT	blocks
COMMENT	! program with various errors in balancing block structures
IDENT	real
IDENT	x
token(98)	integer
IDENT	n
IDENT	x
=	=
IDENT	bar
(	(
IDENT	1
.	.
IDENT	0
)	)
IDENT	if
(	(
IDENT	x
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	call
IDENT	baz
(	(
IDENT	x
)	)
IDENT	n
=	=
IDENT	int
(	(
IDENT	x
)	)
IDENT	select
IDENT	case
(	(
IDENT	n
)	)
IDENT	case
(	(
IDENT	1
)	)
IDENT	call
IDENT	baz
(	(
IDENT	2
.	.
IDENT	0
)	)
IDENT	case
(	(
IDENT	2
:	:
IDENT	10
)	)
IDENT	call
IDENT	baz
(	(
IDENT	3
.	.
IDENT	0
)	)
IDENT	case
(	(
-	-
IDENT	1
,	,
IDENT	11
:	:
IDENT	100
,	,
IDENT	300
)	)
IDENT	call
IDENT	baz
(	(
IDENT	4
.	.
IDENT	0
)	)
IDENT	case
IDENT	default
IDENT	call
IDENT	baz
(	(
IDENT	5
.	.
IDENT	0
)	)
IDENT	end
IDENT	select
IDENT	else
IDENT	k
=	=
IDENT	0
IDENT	loop1
:	:
IDENT	do
IDENT	i
=	=
IDENT	1
,	,
IDENT	100
IDENT	loop2
:	:
IDENT	do
IDENT	j
=	=
IDENT	1
,	,
IDENT	10
IDENT	write
(	(
token(95)	*,
)	)
IDENT	i
,	,
IDENT	j
,	,
IDENT	i
*	*j
IDENT	if
(	(
IDENT	i
.	.
IDENT	eq
.	.
IDENT	50
)	)
IDENT	exit
IDENT	loopdedo
COMMENT	! wrong construct name
IDENT	k
=	=
IDENT	k
+	+
IDENT	j
IDENT	if
(	(
IDENT	k
.	.
IDENT	eq
.	.
IDENT	50
)	)
IDENT	cycle
IDENT	loop2
IDENT	end
IDENT	do
IDENT	loop2
IDENT	write
(	(
token(95)	*,
)	)
IDENT	k
token(95)	*i
*	*2
IDENT	enddo
IDENT	foop1
IDENT	case2
:	:
IDENT	select
IDENT	case
(	(
IDENT	n
)	)
IDENT	case
(	(
IDENT	1
)	)
IDENT	case2
IDENT	call
IDENT	baz
(	(
IDENT	2
.	.
IDENT	0
)	)
IDENT	case
(	(
IDENT	2
:	:
IDENT	10
)	)
IDENT	caseZ
IDENT	call
IDENT	baz
(	(
IDENT	3
.	.
IDENT	0
)	)
IDENT	case
(	(
-	-
IDENT	1
,	,
IDENT	11
:	:
IDENT	100
,	,
IDENT	300
)	)
IDENT	case2
IDENT	call
IDENT	baz
(	(
IDENT	4
.	.
IDENT	0
)	)
IDENT	case
IDENT	default
IDENT	case2
COMMENT	!  do-loops with shared terminator
IDENT	do
IDENT	100
IDENT	i
=	=
IDENT	1
,	,
IDENT	10
IDENT	do
IDENT	100
IDENT	j
=	=
IDENT	1
,	,
IDENT	10
IDENT	print
*	*,
IDENT	i
,	,
IDENT	j
,	,
IDENT	i
*	*j
IDENT	100
IDENT	continue
IDENT	do
IDENT	200
IDENT	i
=	=
IDENT	1
,	,
IDENT	10
IDENT	do
IDENT	250
IDENT	j
=	=
IDENT	1
,	,
IDENT	10
IDENT	print
*	*,
IDENT	i
,	,
IDENT	j
,	,
IDENT	i
*	*j
IDENT	200
IDENT	continue
COMMENT	! terminators out of order
IDENT	250
IDENT	end
IDENT	do
IDENT	end
IDENT	select
IDENT	case2
IDENT	end
IDENT	if
IDENT	if
(	(
IDENT	x
.	.
IDENT	eq
.	.
IDENT	0
)	)
IDENT	exit
COMMENT	! no enclosing DO
IDENT	else
IDENT	if
(	(
IDENT	x
.	.
IDENT	lt
.	.
IDENT	0
)	)
IDENT	then
COMMENT	! else has no matching then
IDENT	print
*	*,
STRING	'Hello'
IDENT	end
IDENT	select
COMMENT	! should be end if
IDENT	end
token(97)	program
IDENT	blocks
token(101)	function
IDENT	bar
(	(
IDENT	c
)	)
IDENT	real
IDENT	a
,	,
IDENT	b
,	,
IDENT	c
,	,
IDENT	d
IDENT	read
*	*,
IDENT	a
COMMENT	! This block is from section 8.1.2.3 of the F90 standard, except for
COMMENT	! removing space between some keywords
IDENT	if
(	(
IDENT	a
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	b
=	=
IDENT	c
/	/
IDENT	a
IDENT	if
(	(
IDENT	b
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	d
=	=
IDENT	1
.	.
IDENT	0
IDENT	endif
IDENT	elseif
(	(
IDENT	c
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	b
=	=
IDENT	a
/	/
IDENT	c
IDENT	d
=	=
-	-
IDENT	1
.	.
IDENT	0
IDENT	else
IDENT	b
=	=
IDENT	abs
(	(
IDENT	max
(	(
IDENT	a
,	,
IDENT	c
)	)
)	)
IDENT	d
=	=
IDENT	0
IDENT	endif
IDENT	bar
=	=
IDENT	d
*	*b
IDENT	end
token(96)	subroutine
token(96)	subroutine
IDENT	baz
(	(
IDENT	c
)	)
IDENT	real
IDENT	a
,	,
IDENT	b
,	,
IDENT	c
,	,
IDENT	d
IDENT	read
*	*,
IDENT	a
COMMENT	! Same as above but with spaces restored and construct names added
IDENT	first_if
:	:
IDENT	if
(	(
IDENT	a
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	b
=	=
IDENT	c
/	/
IDENT	a
IDENT	second_if
:	:
IDENT	if
(	(
IDENT	b
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	d
=	=
IDENT	1
.	.
IDENT	0
IDENT	end
IDENT	if
IDENT	second_if
IDENT	else
IDENT	if
(	(
IDENT	c
.	.
IDENT	gt
.	.
IDENT	0
)	)
IDENT	then
IDENT	firstif
IDENT	b
=	=
IDENT	a
/	/
IDENT	c
IDENT	d
=	=
-	-
IDENT	1
.	.
IDENT	0
IDENT	else
IDENT	first_if
IDENT	b
=	=
IDENT	abs
(	(
IDENT	max
(	(
IDENT	a
,	,
IDENT	c
)	)
)	)
IDENT	d
=	=
IDENT	0
IDENT	end
IDENT	if
IDENT	print
*	*,
IDENT	a
,	,
IDENT	b
,	,
IDENT	c
,	,
IDENT	d
IDENT	end
token(96)	subroutine
IDENT	bazz
