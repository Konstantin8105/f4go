COMMENT	> \brief \b ZHER2K
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE ZHER2K(UPLO,TRANS,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       COMPLEX*16 ALPHA
COMMENT	*       DOUBLE PRECISION BETA
COMMENT	*       INTEGER K,LDA,LDB,LDC,N
COMMENT	*       CHARACTER TRANS,UPLO
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       COMPLEX*16 A(LDA,*),B(LDB,*),C(LDC,*)
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*> ZHER2K  performs one of the hermitian rank 2k operations
COMMENT	*>
COMMENT	*>    C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C,
COMMENT	*>
COMMENT	*> or
COMMENT	*>
COMMENT	*>    C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C,
COMMENT	*>
COMMENT	*> where  alpha and beta  are scalars with  beta  real,  C is an  n by n
COMMENT	*> hermitian matrix and  A and B  are  n by k matrices in the first case
COMMENT	*> and  k by n  matrices in the second case.
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in] UPLO
COMMENT	*> \verbatim
COMMENT	*>          UPLO is CHARACTER*1
COMMENT	*>           On  entry,   UPLO  specifies  whether  the  upper  or  lower
COMMENT	*>           triangular  part  of the  array  C  is to be  referenced  as
COMMENT	*>           follows:
COMMENT	*>
COMMENT	*>              UPLO = 'U' or 'u'   Only the  upper triangular part of  C
COMMENT	*>                                  is to be referenced.
COMMENT	*>
COMMENT	*>              UPLO = 'L' or 'l'   Only the  lower triangular part of  C
COMMENT	*>                                  is to be referenced.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] TRANS
COMMENT	*> \verbatim
COMMENT	*>          TRANS is CHARACTER*1
COMMENT	*>           On entry,  TRANS  specifies the operation to be performed as
COMMENT	*>           follows:
COMMENT	*>
COMMENT	*>              TRANS = 'N' or 'n'    C := alpha*A*B**H          +
COMMENT	*>                                         conjg( alpha )*B*A**H +
COMMENT	*>                                         beta*C.
COMMENT	*>
COMMENT	*>              TRANS = 'C' or 'c'    C := alpha*A**H*B          +
COMMENT	*>                                         conjg( alpha )*B**H*A +
COMMENT	*>                                         beta*C.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] N
COMMENT	*> \verbatim
COMMENT	*>          N is INTEGER
COMMENT	*>           On entry,  N specifies the order of the matrix C.  N must be
COMMENT	*>           at least zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] K
COMMENT	*> \verbatim
COMMENT	*>          K is INTEGER
COMMENT	*>           On entry with  TRANS = 'N' or 'n',  K  specifies  the number
COMMENT	*>           of  columns  of the  matrices  A and B,  and on  entry  with
COMMENT	*>           TRANS = 'C' or 'c',  K  specifies  the number of rows of the
COMMENT	*>           matrices  A and B.  K must be at least zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] ALPHA
COMMENT	*> \verbatim
COMMENT	*>          ALPHA is COMPLEX*16 .
COMMENT	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] A
COMMENT	*> \verbatim
COMMENT	*>          A is COMPLEX*16 array, dimension ( LDA, ka ), where ka is
COMMENT	*>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
COMMENT	*>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
COMMENT	*>           part of the array  A  must contain the matrix  A,  otherwise
COMMENT	*>           the leading  k by n  part of the array  A  must contain  the
COMMENT	*>           matrix A.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDA
COMMENT	*> \verbatim
COMMENT	*>          LDA is INTEGER
COMMENT	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT	*>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
COMMENT	*>           then  LDA must be at least  max( 1, n ), otherwise  LDA must
COMMENT	*>           be at least  max( 1, k ).
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] B
COMMENT	*> \verbatim
COMMENT	*>          B is COMPLEX*16 array, dimension ( LDB, kb ), where kb is
COMMENT	*>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
COMMENT	*>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
COMMENT	*>           part of the array  B  must contain the matrix  B,  otherwise
COMMENT	*>           the leading  k by n  part of the array  B  must contain  the
COMMENT	*>           matrix B.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDB
COMMENT	*> \verbatim
COMMENT	*>          LDB is INTEGER
COMMENT	*>           On entry, LDB specifies the first dimension of B as declared
COMMENT	*>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
COMMENT	*>           then  LDB must be at least  max( 1, n ), otherwise  LDB must
COMMENT	*>           be at least  max( 1, k ).
COMMENT	*>           Unchanged on exit.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] BETA
COMMENT	*> \verbatim
COMMENT	*>          BETA is DOUBLE PRECISION .
COMMENT	*>           On entry, BETA specifies the scalar beta.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] C
COMMENT	*> \verbatim
COMMENT	*>          C is COMPLEX*16 array, dimension ( LDC, N )
COMMENT	*>           Before entry  with  UPLO = 'U' or 'u',  the leading  n by n
COMMENT	*>           upper triangular part of the array C must contain the upper
COMMENT	*>           triangular part  of the  hermitian matrix  and the strictly
COMMENT	*>           lower triangular part of C is not referenced.  On exit, the
COMMENT	*>           upper triangular part of the array  C is overwritten by the
COMMENT	*>           upper triangular part of the updated matrix.
COMMENT	*>           Before entry  with  UPLO = 'L' or 'l',  the leading  n by n
COMMENT	*>           lower triangular part of the array C must contain the lower
COMMENT	*>           triangular part  of the  hermitian matrix  and the strictly
COMMENT	*>           upper triangular part of C is not referenced.  On exit, the
COMMENT	*>           lower triangular part of the array  C is overwritten by the
COMMENT	*>           lower triangular part of the updated matrix.
COMMENT	*>           Note that the imaginary parts of the diagonal elements need
COMMENT	*>           not be set,  they are assumed to be zero,  and on exit they
COMMENT	*>           are set to zero.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] LDC
COMMENT	*> \verbatim
COMMENT	*>          LDC is INTEGER
COMMENT	*>           On entry, LDC specifies the first dimension of C as declared
COMMENT	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
COMMENT	*>           max( 1, n ).
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date December 2016
COMMENT	*
COMMENT	*> \ingroup complex16_blas_level3
COMMENT	*
COMMENT	*> \par Further Details:
COMMENT	*  =====================
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*>  Level 3 Blas routine.
COMMENT	*>
COMMENT	*>  -- Written on 8-February-1989.
COMMENT	*>     Jack Dongarra, Argonne National Laboratory.
COMMENT	*>     Iain Duff, AERE Harwell.
COMMENT	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
COMMENT	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
COMMENT	*>
COMMENT	*>  -- Modified 8-Nov-93 to set C(J,J) to DBLE( C(J,J) ) when BETA = 1.
COMMENT	*>     Ed Anderson, Cray Research Inc.
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	ZHER2K
(	(
IDENT	UPLO
,	,
IDENT	TRANS
,	,
IDENT	N
,	,
IDENT	K
,	,
IDENT	ALPHA
,	,
IDENT	A
,	,
IDENT	LDA
,	,
IDENT	B
,	,
IDENT	LDB
,	,
IDENT	BETA
,	,
IDENT	C
,	,
IDENT	LDC
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level3 routine (version 3.7.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     December 2016
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
IDENT	COMPLEX
*	*1
IDENT	6
IDENT	ALPHA
IDENT	DOUBLE
IDENT	PRECISION
IDENT	BETA
token(98)	INTEGER
IDENT	K
,	,
IDENT	LDA
,	,
IDENT	LDB
,	,
IDENT	LDC
,	,
IDENT	N
IDENT	CHARACTER
IDENT	TRANS
,	,
IDENT	UPLO
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	COMPLEX
*	*1
IDENT	6
IDENT	A
(	(
IDENT	LDA
,	,
*	*)
,	,
IDENT	B
(	(
IDENT	LDB
,	,
*	*)
,	,
IDENT	C
(	(
IDENT	LDC
,	,
*	*)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. External Functions ..
IDENT	LOGICAL
IDENT	LSAME
IDENT	EXTERNAL
IDENT	LSAME
COMMENT	*     ..
COMMENT	*     .. External Subroutines ..
IDENT	EXTERNAL
IDENT	XERBLA
COMMENT	*     ..
COMMENT	*     .. Intrinsic Functions ..
IDENT	INTRINSIC
IDENT	DBLE
,	,
IDENT	DCONJG
,	,
IDENT	MAX
COMMENT	*     ..
COMMENT	*     .. Local Scalars ..
IDENT	COMPLEX
*	*1
IDENT	6
IDENT	TEMP1
,	,
IDENT	TEMP2
token(98)	INTEGER
IDENT	I
,	,
IDENT	INFO
,	,
IDENT	J
,	,
IDENT	L
,	,
IDENT	NROWA
IDENT	LOGICAL
IDENT	UPPER
COMMENT	*     ..
COMMENT	*     .. Parameters ..
IDENT	DOUBLE
IDENT	PRECISION
IDENT	ONE
IDENT	PARAMETER
(	(
IDENT	ONE
=	=
IDENT	1
.	.
IDENT	0
IDENT	D
+	+
IDENT	0
)	)
IDENT	COMPLEX
*	*1
IDENT	6
IDENT	ZERO
IDENT	PARAMETER
(	(
IDENT	ZERO
=	=
(	(
IDENT	0
.	.
IDENT	0
IDENT	D
+	+
IDENT	0
,	,
IDENT	0
.	.
IDENT	0
IDENT	D
+	+
IDENT	0
)	)
)	)
COMMENT	*     ..
COMMENT	*
COMMENT	*     Test the input parameters.
COMMENT	*
if	IF
(	(
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'N'
)	)
)	)
IDENT	THEN
IDENT	NROWA
=	=
IDENT	N
IDENT	ELSE
IDENT	NROWA
=	=
IDENT	K
IDENT	END
if	IF
IDENT	UPPER
=	=
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'U'
)	)
COMMENT	*
IDENT	INFO
=	=
IDENT	0
if	IF
(	(
(	(
.	.
IDENT	NOT
.	.
IDENT	UPPER
)	)
.	.
IDENT	AND
.	.
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	UPLO
,	,
STRING	'L'
)	)
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	1
IDENT	ELSE
if	IF
(	(
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'N'
)	)
)	)
.	.
IDENT	AND
.	.
+	+
(	(
.	.
IDENT	NOT
.	.
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'C'
)	)
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	2
IDENT	ELSE
if	IF
(	(
IDENT	N
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	3
IDENT	ELSE
if	IF
(	(
IDENT	K
.	.
IDENT	LT
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	4
IDENT	ELSE
if	IF
(	(
IDENT	LDA
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	NROWA
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	7
IDENT	ELSE
if	IF
(	(
IDENT	LDB
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	NROWA
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	9
IDENT	ELSE
if	IF
(	(
IDENT	LDC
.	.
IDENT	LT
.	.
IDENT	MAX
(	(
IDENT	1
,	,
IDENT	N
)	)
)	)
IDENT	THEN
IDENT	INFO
=	=
IDENT	12
IDENT	END
if	IF
if	IF
(	(
IDENT	INFO
.	.
IDENT	NE
.	.
IDENT	0
)	)
IDENT	THEN
IDENT	CALL
IDENT	XERBLA
(	(
STRING	'ZHER2K'
,	,
IDENT	INFO
)	)
IDENT	RETURN
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Quick return if possible.
COMMENT	*
if	IF
(	(
(	(
IDENT	N
.	.
IDENT	EQ
.	.
IDENT	0
)	)
.	.
IDENT	OR
.	.
(	(
(	(
(	(
IDENT	ALPHA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
.	.
IDENT	OR
.	.
+	+
(	(
IDENT	K
.	.
IDENT	EQ
.	.
IDENT	0
)	)
)	)
.	.
IDENT	AND
.	.
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	ONE
)	)
)	)
)	)
IDENT	RETURN
COMMENT	*
COMMENT	*     And when  alpha.eq.zero.
COMMENT	*
if	IF
(	(
IDENT	ALPHA
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
if	IF
(	(
IDENT	UPPER
)	)
IDENT	THEN
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	DO
IDENT	20
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	10
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	10
IDENT	CONTINUE
IDENT	20
IDENT	CONTINUE
IDENT	ELSE
IDENT	DO
IDENT	40
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	30
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
-	-
IDENT	1
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	30
IDENT	CONTINUE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	40
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	DO
IDENT	60
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	50
IDENT	I
=	=
IDENT	J
,	,
IDENT	N
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	50
IDENT	CONTINUE
IDENT	60
IDENT	CONTINUE
IDENT	ELSE
IDENT	DO
IDENT	80
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	DO
IDENT	70
IDENT	I
=	=
IDENT	J
+	+
IDENT	1
,	,
IDENT	N
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	70
IDENT	CONTINUE
IDENT	80
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	END
if	IF
IDENT	RETURN
IDENT	END
if	IF
COMMENT	*
COMMENT	*     Start the operations.
COMMENT	*
if	IF
(	(
IDENT	LSAME
(	(
IDENT	TRANS
,	,
STRING	'N'
)	)
)	)
IDENT	THEN
COMMENT	*
COMMENT	*        Form  C := alpha*A*B**H + conjg( alpha )*B*A**H +
COMMENT	*                   C.
COMMENT	*
if	IF
(	(
IDENT	UPPER
)	)
IDENT	THEN
IDENT	DO
IDENT	130
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	DO
IDENT	90
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	90
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	NE
.	.
IDENT	ONE
)	)
IDENT	THEN
IDENT	DO
IDENT	100
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
-	-
IDENT	1
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	100
IDENT	CONTINUE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	ELSE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	END
if	IF
IDENT	DO
IDENT	120
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
if	IF
(	(
(	(
IDENT	A
(	(
IDENT	J
,	,
IDENT	L
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	TEMP1
=	=
IDENT	ALPHA
*	*D
IDENT	CONJG
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	TEMP2
=	=
IDENT	DCONJG
(	(
IDENT	ALPHA
*	*A
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	DO
IDENT	110
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
-	-
IDENT	1
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	A
(	(
IDENT	I
,	,
IDENT	L
)	)
*	*T
IDENT	EMP1
+	+
+	+
IDENT	B
(	(
IDENT	I
,	,
IDENT	L
)	)
*	*T
IDENT	EMP2
IDENT	110
IDENT	CONTINUE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
+	+
+	+
IDENT	DBLE
(	(
IDENT	A
(	(
IDENT	J
,	,
IDENT	L
)	)
*	*T
IDENT	EMP1
+	+
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
*	*T
IDENT	EMP2
)	)
IDENT	END
if	IF
IDENT	120
IDENT	CONTINUE
IDENT	130
IDENT	CONTINUE
IDENT	ELSE
IDENT	DO
IDENT	180
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	DO
IDENT	140
IDENT	I
=	=
IDENT	J
,	,
IDENT	N
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ZERO
IDENT	140
IDENT	CONTINUE
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	NE
.	.
IDENT	ONE
)	)
IDENT	THEN
IDENT	DO
IDENT	150
IDENT	I
=	=
IDENT	J
+	+
IDENT	1
,	,
IDENT	N
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
IDENT	150
IDENT	CONTINUE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	ELSE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
IDENT	END
if	IF
IDENT	DO
IDENT	170
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
if	IF
(	(
(	(
IDENT	A
(	(
IDENT	J
,	,
IDENT	L
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	TEMP1
=	=
IDENT	ALPHA
*	*D
IDENT	CONJG
(	(
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	TEMP2
=	=
IDENT	DCONJG
(	(
IDENT	ALPHA
*	*A
(	(
IDENT	J
,	,
IDENT	L
)	)
)	)
IDENT	DO
IDENT	160
IDENT	I
=	=
IDENT	J
+	+
IDENT	1
,	,
IDENT	N
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	A
(	(
IDENT	I
,	,
IDENT	L
)	)
*	*T
IDENT	EMP1
+	+
+	+
IDENT	B
(	(
IDENT	I
,	,
IDENT	L
)	)
*	*T
IDENT	EMP2
IDENT	160
IDENT	CONTINUE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
+	+
+	+
IDENT	DBLE
(	(
IDENT	A
(	(
IDENT	J
,	,
IDENT	L
)	)
*	*T
IDENT	EMP1
+	+
IDENT	B
(	(
IDENT	J
,	,
IDENT	L
)	)
*	*T
IDENT	EMP2
)	)
IDENT	END
if	IF
IDENT	170
IDENT	CONTINUE
IDENT	180
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	ELSE
COMMENT	*
COMMENT	*        Form  C := alpha*A**H*B + conjg( alpha )*B**H*A +
COMMENT	*                   C.
COMMENT	*
if	IF
(	(
IDENT	UPPER
)	)
IDENT	THEN
IDENT	DO
IDENT	210
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	200
IDENT	I
=	=
IDENT	1
,	,
IDENT	J
IDENT	TEMP1
=	=
IDENT	ZERO
IDENT	TEMP2
=	=
IDENT	ZERO
IDENT	DO
IDENT	190
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP1
=	=
IDENT	TEMP1
+	+
IDENT	DCONJG
(	(
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*B
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	TEMP2
=	=
IDENT	TEMP2
+	+
IDENT	DCONJG
(	(
IDENT	B
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*A
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	190
IDENT	CONTINUE
if	IF
(	(
IDENT	I
.	.
IDENT	EQ
.	.
IDENT	J
)	)
IDENT	THEN
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
)	)
IDENT	ELSE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
+	+
+	+
IDENT	DBLE
(	(
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
)	)
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
IDENT	END
if	IF
IDENT	END
if	IF
IDENT	200
IDENT	CONTINUE
IDENT	210
IDENT	CONTINUE
IDENT	ELSE
IDENT	DO
IDENT	240
IDENT	J
=	=
IDENT	1
,	,
IDENT	N
IDENT	DO
IDENT	230
IDENT	I
=	=
IDENT	J
,	,
IDENT	N
IDENT	TEMP1
=	=
IDENT	ZERO
IDENT	TEMP2
=	=
IDENT	ZERO
IDENT	DO
IDENT	220
IDENT	L
=	=
IDENT	1
,	,
IDENT	K
IDENT	TEMP1
=	=
IDENT	TEMP1
+	+
IDENT	DCONJG
(	(
IDENT	A
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*B
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	TEMP2
=	=
IDENT	TEMP2
+	+
IDENT	DCONJG
(	(
IDENT	B
(	(
IDENT	L
,	,
IDENT	I
)	)
)	)
*	*A
(	(
IDENT	L
,	,
IDENT	J
)	)
IDENT	220
IDENT	CONTINUE
if	IF
(	(
IDENT	I
.	.
IDENT	EQ
.	.
IDENT	J
)	)
IDENT	THEN
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	DBLE
(	(
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
)	)
IDENT	ELSE
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*D
IDENT	BLE
(	(
IDENT	C
(	(
IDENT	J
,	,
IDENT	J
)	)
)	)
+	+
+	+
IDENT	DBLE
(	(
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
)	)
IDENT	END
if	IF
IDENT	ELSE
if	IF
(	(
IDENT	BETA
.	.
IDENT	EQ
.	.
IDENT	DBLE
(	(
IDENT	ZERO
)	)
)	)
IDENT	THEN
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
IDENT	ELSE
IDENT	C
(	(
IDENT	I
,	,
IDENT	J
)	)
=	=
IDENT	BETA
*	*C
(	(
IDENT	I
,	,
IDENT	J
)	)
+	+
IDENT	ALPHA
*	*T
IDENT	EMP1
+	+
+	+
IDENT	DCONJG
(	(
IDENT	ALPHA
)	)
*	*T
IDENT	EMP2
IDENT	END
if	IF
IDENT	END
if	IF
IDENT	230
IDENT	CONTINUE
IDENT	240
IDENT	CONTINUE
IDENT	END
if	IF
IDENT	END
if	IF
COMMENT	*
IDENT	RETURN
COMMENT	*
COMMENT	*     End of ZHER2K.
COMMENT	*
IDENT	END
