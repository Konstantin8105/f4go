COMMENT	  Derived from Brian Downing's WC program, replacing common decls by INCLUDEs
COMMENT	C
COMMENT	C     main(){   Get a file, open it, read and determine semi-useful
COMMENT	C               statistics, print them to screen, and exit quietly.
COMMENT	C           };
COMMENT	C
COMMENT	C     This program is an example word counter that makes use of several
COMMENT	C     Fortran intrinsic functions and data structures, such as; 
COMMENT	C     common, sub-routines, functions, inplied do loops, and much, much more.
COMMENT	C
token(97)	Program
IDENT	WC
COMMENT	CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
COMMENT	C     Program:    Word_Count_And_Other_Stuff                                 C
COMMENT	C     Written_By: Brian Downing                                              C
COMMENT	C                 Fordham University                                         C
COMMENT	C     Date:       October 1st-16th, 1990                                     C
COMMENT	CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
IDENT	Character
IDENT	Fname
*	*8
IDENT	0
IDENT	Call
IDENT	Initialize
IDENT	Call
IDENT	GetFileName
(	(
IDENT	Fname
)	)
IDENT	Call
IDENT	GetStats
(	(
IDENT	Fname
)	)
IDENT	Call
IDENT	PrintStats
IDENT	End
COMMENT	C
COMMENT	C     SubRoutine to get all kinds of neat statistics.
COMMENT	C
token(96)	SubRoutine
IDENT	GetStats
(	(
IDENT	Fname
)	)
IDENT	Include
STRING	'stats.h'
IDENT	Character
IDENT	Inline
*	*8
IDENT	2
,	,
IDENT	Fname
*	*8
IDENT	0
,	,
IDENT	Ch
IDENT	Open
(	(
IDENT	Unit
=	=
IDENT	8
,	,
IDENT	File
=	=
IDENT	Fname
,	,
IDENT	Err
=	=
IDENT	999
)	)
IDENT	Do
IDENT	While
(	(
.	.
IDENT	TRUE
.	.
)	)
IDENT	Read
(	(
IDENT	8
,	,
IDENT	10
,	,
IDENT	End
=	=
IDENT	888
)	)
IDENT	InLine
IDENT	NL
=	=
IDENT	NL
+	+
IDENT	1
IDENT	LastPos
=	=
IDENT	INDEX
(	(
IDENT	InLine
,	,
STRING	'  '
)	)
IDENT	Do
IDENT	J
=	=
IDENT	1
,	,
IDENT	LastPos
IDENT	Ch
=	=
IDENT	InLine
(	(
IDENT	J
:	:
IDENT	J
)	)
IDENT	L
=	=
IDENT	IntUpCase
(	(
IDENT	ICHAR
(	(
IDENT	Ch
)	)
)	)
IDENT	NEC
(	(
IDENT	L
)	)
=	=
IDENT	NEC
(	(
IDENT	L
)	)
+	+
IDENT	1
if	If
(	(
(	(
IDENT	Ch
.	.
IDENT	NE
.	.
STRING	' '
)	)
.	.
IDENT	AND
.	.
(	(
IDENT	Ch
.	.
IDENT	NE
.	.
STRING	'.'
)	)
)	)
IDENT	Then
IDENT	NC
=	=
IDENT	NC
+	+
IDENT	1
IDENT	ElseIf
(	(
IDENT	Ch
.	.
IDENT	EQ
.	.
STRING	'.'
)	)
IDENT	Then
IDENT	NP
=	=
IDENT	NP
+	+
IDENT	1
else	Else
IDENT	NW
=	=
IDENT	NW
+	+
IDENT	1
IDENT	EndIf
IDENT	EndDo
IDENT	EndDo
IDENT	888
IDENT	Continue
IDENT	ACPW
=	=
IDENT	REAL
(	(
IDENT	NC
)	)
/	/
IDENT	REAL
(	(
IDENT	NW
)	)
IDENT	AWPS
=	=
IDENT	REAL
(	(
IDENT	NW
)	)
/	/
IDENT	REAL
(	(
IDENT	NP
)	)
IDENT	Return
IDENT	10
IDENT	Format
(	(
IDENT	a
)	)
IDENT	999
IDENT	Print
*	*,
STRING	'Error opening file, please verify filename and try again.'
COMMENT	C
COMMENT	C     In the event of improper filename exit abruptly.
COMMENT	C
IDENT	STOP
IDENT	End
COMMENT	C
COMMENT	C     SubRoutine to print to terminal all of these neat statistics.
COMMENT	C
token(96)	SubRoutine
IDENT	PrintStats
IDENT	Include
STRING	'stats.h'
IDENT	Write
(	(
IDENT	5
,	,
IDENT	10
)	)
IDENT	ACPW
,	,
IDENT	AWPS
,	,
IDENT	NW
,	,
IDENT	NP
,	,
IDENT	NL
,	,
IDENT	NC
IDENT	Write
(	(
IDENT	5
,	,
IDENT	20
)	)
IDENT	Do
IDENT	J
=	=
IDENT	65
,	,
IDENT	90
IDENT	Write
(	(
IDENT	5
,	,
IDENT	40
)	)
(	(
IDENT	CHAR
(	(
IDENT	J
)	)
,	,
IDENT	NEC
(	(
IDENT	J
)	)
,	,
(	(
STRING	'@'
,	,
IDENT	K
=	=
IDENT	1
,	,
(	(
IDENT	NEC
(	(
IDENT	J
)	)
/	/
IDENT	10
)	)
)	)
,	,
IDENT	1
(	(
STRING	'*'
,	,
IDENT	K
=	=
IDENT	1
,	,
IDENT	MOD
(	(
IDENT	NEC
(	(
IDENT	J
)	)
,	,
IDENT	10
)	)
)	)
)	)
IDENT	EndDo
IDENT	Write
(	(
IDENT	5
,	,
IDENT	50
)	)
IDENT	10
IDENT	Format
(	(
STRING	'1'
IDENT	30
IDENT	X
STRING	'Word Statistics'
/	/
IDENT	1
IDENT	x
,	,
IDENT	80
(	(
STRING	'*'
)	)
/	/
IDENT	1
IDENT	1
IDENT	X
STRING	'Average characters per word = '
IDENT	F6
.	.
IDENT	2
/	/
IDENT	2
IDENT	1
IDENT	X
STRING	'Average words per sentence  = '
IDENT	F6
.	.
IDENT	2
/	/
IDENT	3
IDENT	1
IDENT	X
STRING	'Total number of words       = '
IDENT	I5
/	/
IDENT	4
IDENT	1
IDENT	X
STRING	'Total number of sentences   = '
IDENT	I5
/	/
IDENT	5
IDENT	1
IDENT	X
STRING	'Total number of lines       = '
IDENT	I5
/	/
IDENT	6
IDENT	1
IDENT	X
STRING	'Total number of characters  = '
IDENT	I5
/	/
)	)
IDENT	20
IDENT	Format
(	(
IDENT	29
IDENT	x
STRING	'Character Statistics'
/	/
IDENT	1
IDENT	x
,	,
IDENT	80
(	(
STRING	'*'
)	)
/	/
)	)
IDENT	30
IDENT	Format
(	(
IDENT	1
IDENT	X
,	,
IDENT	A
)	)
IDENT	40
IDENT	Format
(	(
IDENT	1
IDENT	X
,	,
IDENT	A
STRING	','
IDENT	I3
,	,
IDENT	1
IDENT	x
,	,
IDENT	125
(	(
IDENT	A
)	)
)	)
IDENT	50
IDENT	Format
(	(
IDENT	1
IDENT	X
STRING	'Legend:'
/	/
IDENT	9
IDENT	x
STRING	'@ equals ten characters'
,	,
IDENT	1
STRING	', * equals one character.'
)	)
IDENT	Return
IDENT	End
COMMENT	C
COMMENT	C     SubRoutine to prompt for and return a filename.
COMMENT	C
token(96)	SubRoutine
IDENT	GetFileName
(	(
IDENT	Fname
)	)
IDENT	Character
IDENT	Fname
*	*8
IDENT	0
,	,
IDENT	Prompt
*	*7
IDENT	Prompt
=	=
STRING	'_File: '
IDENT	Write
(	(
IDENT	5
,	,
IDENT	10
)	)
IDENT	Prompt
IDENT	Read
(	(
IDENT	5
,	,
IDENT	20
)	)
IDENT	Fname
IDENT	10
IDENT	Format
(	(
IDENT	1
IDENT	XA
)	)
IDENT	20
IDENT	Format
(	(
IDENT	A
)	)
IDENT	Return
IDENT	End
COMMENT	C
COMMENT	C     SubRoutine to initailize globally used variables.
COMMENT	C
token(96)	SubRoutine
IDENT	Initialize
IDENT	Common
/	/
IDENT	Stats
/	/
IDENT	A
,	,
IDENT	B
,	,
IDENT	J
,	,
IDENT	K
,	,
IDENT	L
,	,
IDENT	M
,	,
IDENT	N
(	(
IDENT	26
)	)
IDENT	Do
IDENT	O
=	=
IDENT	1
,	,
IDENT	26
IDENT	N
(	(
IDENT	O
)	)
=	=
IDENT	0
IDENT	EndDo
IDENT	A
=	=
IDENT	0
.	.
IDENT	0
IDENT	B
=	=
IDENT	0
.	.
IDENT	0
IDENT	J
=	=
IDENT	0
IDENT	K
=	=
IDENT	0
IDENT	L
=	=
IDENT	0
IDENT	M
=	=
IDENT	0
IDENT	Return
IDENT	End
COMMENT	C
COMMENT	C     Function to return integer value of a character in range of uppercase.
COMMENT	C
token(101)	Function
IDENT	IntUpCase
(	(
IDENT	I
)	)
if	If
(	(
(	(
IDENT	I
.	.
IDENT	LE
.	.
IDENT	ICHAR
(	(
STRING	'z'
)	)
)	)
.	.
IDENT	AND
.	.
(	(
IDENT	I
.	.
IDENT	GE
.	.
IDENT	ICHAR
(	(
STRING	'a'
)	)
)	)
)	)
IDENT	Then
IDENT	IntUpCase
=	=
IDENT	I
-	-
IDENT	ICHAR
(	(
STRING	' '
)	)
else	Else
IDENT	IntUpCase
=	=
IDENT	I
IDENT	EndIf
IDENT	Return
IDENT	End
