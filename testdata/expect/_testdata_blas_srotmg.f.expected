COMMENT	> \brief \b SROTMG
COMMENT	*
COMMENT	*  =========== DOCUMENTATION ===========
COMMENT	*
COMMENT	* Online html documentation available at
COMMENT	*            http://www.netlib.org/lapack/explore-html/
COMMENT	*
COMMENT	*  Definition:
COMMENT	*  ===========
COMMENT	*
COMMENT	*       SUBROUTINE SROTMG(SD1,SD2,SX1,SY1,SPARAM)
COMMENT	*
COMMENT	*       .. Scalar Arguments ..
COMMENT	*       REAL SD1,SD2,SX1,SY1
COMMENT	*       ..
COMMENT	*       .. Array Arguments ..
COMMENT	*       REAL SPARAM(5)
COMMENT	*       ..
COMMENT	*
COMMENT	*
COMMENT	*> \par Purpose:
COMMENT	*  =============
COMMENT	*>
COMMENT	*> \verbatim
COMMENT	*>
COMMENT	*>    CONSTRUCT THE MODIFIED GIVENS TRANSFORMATION MATRIX H WHICH ZEROS
COMMENT	*>    THE SECOND COMPONENT OF THE 2-VECTOR  (SQRT(SD1)*SX1,SQRT(SD2)*>    SY2)**T.
COMMENT	*>    WITH SPARAM(1)=SFLAG, H HAS ONE OF THE FOLLOWING FORMS..
COMMENT	*>
COMMENT	*>    SFLAG=-1.E0     SFLAG=0.E0        SFLAG=1.E0     SFLAG=-2.E0
COMMENT	*>
COMMENT	*>      (SH11  SH12)    (1.E0  SH12)    (SH11  1.E0)    (1.E0  0.E0)
COMMENT	*>    H=(          )    (          )    (          )    (          )
COMMENT	*>      (SH21  SH22),   (SH21  1.E0),   (-1.E0 SH22),   (0.E0  1.E0).
COMMENT	*>    LOCATIONS 2-4 OF SPARAM CONTAIN SH11,SH21,SH12, AND SH22
COMMENT	*>    RESPECTIVELY. (VALUES OF 1.E0, -1.E0, OR 0.E0 IMPLIED BY THE
COMMENT	*>    VALUE OF SPARAM(1) ARE NOT STORED IN SPARAM.)
COMMENT	*>
COMMENT	*>    THE VALUES OF GAMSQ AND RGAMSQ SET IN THE DATA STATEMENT MAY BE
COMMENT	*>    INEXACT.  THIS IS OK AS THEY ARE ONLY USED FOR TESTING THE SIZE
COMMENT	*>    OF SD1 AND SD2.  ALL ACTUAL SCALING OF DATA IS DONE USING GAM.
COMMENT	*>
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Arguments:
COMMENT	*  ==========
COMMENT	*
COMMENT	*> \param[in,out] SD1
COMMENT	*> \verbatim
COMMENT	*>          SD1 is REAL
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] SD2
COMMENT	*> \verbatim
COMMENT	*>          SD2 is REAL
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in,out] SX1
COMMENT	*> \verbatim
COMMENT	*>          SX1 is REAL
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[in] SY1
COMMENT	*> \verbatim
COMMENT	*>          SY1 is REAL
COMMENT	*> \endverbatim
COMMENT	*>
COMMENT	*> \param[out] SPARAM
COMMENT	*> \verbatim
COMMENT	*>          SPARAM is REAL array, dimension (5)
COMMENT	*>     SPARAM(1)=SFLAG
COMMENT	*>     SPARAM(2)=SH11
COMMENT	*>     SPARAM(3)=SH21
COMMENT	*>     SPARAM(4)=SH12
COMMENT	*>     SPARAM(5)=SH22
COMMENT	*> \endverbatim
COMMENT	*
COMMENT	*  Authors:
COMMENT	*  ========
COMMENT	*
COMMENT	*> \author Univ. of Tennessee
COMMENT	*> \author Univ. of California Berkeley
COMMENT	*> \author Univ. of Colorado Denver
COMMENT	*> \author NAG Ltd.
COMMENT	*
COMMENT	*> \date November 2017
COMMENT	*
COMMENT	*> \ingroup single_blas_level1
COMMENT	*
COMMENT	*  =====================================================================
token(96)	SUBROUTINE
IDENT	SROTMG
(	(
IDENT	SD1
,	,
IDENT	SD2
,	,
IDENT	SX1
,	,
IDENT	SY1
,	,
IDENT	SPARAM
)	)
COMMENT	*
COMMENT	*  -- Reference BLAS level1 routine (version 3.8.0) --
COMMENT	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT	*     November 2017
COMMENT	*
COMMENT	*     .. Scalar Arguments ..
IDENT	REAL
IDENT	SD1
,	,
IDENT	SD2
,	,
IDENT	SX1
,	,
IDENT	SY1
COMMENT	*     ..
COMMENT	*     .. Array Arguments ..
IDENT	REAL
IDENT	SPARAM
(	(
IDENT	5
)	)
COMMENT	*     ..
COMMENT	*
COMMENT	*  =====================================================================
COMMENT	*
COMMENT	*     .. Local Scalars ..
IDENT	REAL
IDENT	GAM
,	,
IDENT	GAMSQ
,	,
IDENT	ONE
,	,
IDENT	RGAMSQ
,	,
IDENT	SFLAG
,	,
IDENT	SH11
,	,
IDENT	SH12
,	,
IDENT	SH21
,	,
IDENT	SH22
,	,
IDENT	SP1
,	,
IDENT	SP2
,	,
IDENT	SQ1
,	,
IDENT	SQ2
,	,
IDENT	STEMP
,	,
IDENT	SU
,	,
IDENT	TWO
,	,
IDENT	ZERO
COMMENT	*     ..
COMMENT	*     .. Intrinsic Functions ..
IDENT	INTRINSIC
IDENT	ABS
COMMENT	*     ..
COMMENT	*     .. Data statements ..
COMMENT	*
IDENT	DATA
IDENT	ZERO
,	,
IDENT	ONE
,	,
IDENT	TWO
/	/
IDENT	0
.	.
IDENT	E0
,	,
IDENT	1
.	.
IDENT	E0
,	,
IDENT	2
.	.
IDENT	E0
/	/
IDENT	DATA
IDENT	GAM
,	,
IDENT	GAMSQ
,	,
IDENT	RGAMSQ
/	/
IDENT	4096
.	.
IDENT	E0
,	,
IDENT	1
.	.
IDENT	67772
IDENT	E7
,	,
IDENT	5
.	.
IDENT	96046
IDENT	E
-	-
IDENT	8
/	/
COMMENT	*     ..
IDENT	IF
(	(
IDENT	SD1
.	.
IDENT	LT
.	.
IDENT	ZERO
)	)
IDENT	THEN
COMMENT	*        GO ZERO-H-D-AND-SX1..
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	SH11
=	=
IDENT	ZERO
IDENT	SH12
=	=
IDENT	ZERO
IDENT	SH21
=	=
IDENT	ZERO
IDENT	SH22
=	=
IDENT	ZERO
COMMENT	*
IDENT	SD1
=	=
IDENT	ZERO
IDENT	SD2
=	=
IDENT	ZERO
IDENT	SX1
=	=
IDENT	ZERO
IDENT	ELSE
COMMENT	*        CASE-SD1-NONNEGATIVE
IDENT	SP2
=	=
IDENT	SD2
*	*S
IDENT	Y1
IDENT	IF
(	(
IDENT	SP2
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SFLAG
=	=
-	-
IDENT	TWO
IDENT	SPARAM
(	(
IDENT	1
)	)
=	=
IDENT	SFLAG
IDENT	RETURN
IDENT	END
IDENT	IF
COMMENT	*        REGULAR-CASE..
IDENT	SP1
=	=
IDENT	SD1
*	*S
IDENT	X1
IDENT	SQ2
=	=
IDENT	SP2
*	*S
IDENT	Y1
IDENT	SQ1
=	=
IDENT	SP1
*	*S
IDENT	X1
COMMENT	*
IDENT	IF
(	(
IDENT	ABS
(	(
IDENT	SQ1
)	)
.	.
IDENT	GT
.	.
IDENT	ABS
(	(
IDENT	SQ2
)	)
)	)
IDENT	THEN
IDENT	SH21
=	=
-	-
IDENT	SY1
/	/
IDENT	SX1
IDENT	SH12
=	=
IDENT	SP2
/	/
IDENT	SP1
COMMENT	*
IDENT	SU
=	=
IDENT	ONE
-	-
IDENT	SH12
*	*S
IDENT	H21
COMMENT	*
IDENT	IF
(	(
IDENT	SU
.	.
IDENT	GT
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SFLAG
=	=
IDENT	ZERO
IDENT	SD1
=	=
IDENT	SD1
/	/
IDENT	SU
IDENT	SD2
=	=
IDENT	SD2
/	/
IDENT	SU
IDENT	SX1
=	=
IDENT	SX1
*	*S
IDENT	U
IDENT	END
IDENT	IF
IDENT	ELSE
IDENT	IF
(	(
IDENT	SQ2
.	.
IDENT	LT
.	.
IDENT	ZERO
)	)
IDENT	THEN
COMMENT	*              GO ZERO-H-D-AND-SX1..
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	SH11
=	=
IDENT	ZERO
IDENT	SH12
=	=
IDENT	ZERO
IDENT	SH21
=	=
IDENT	ZERO
IDENT	SH22
=	=
IDENT	ZERO
COMMENT	*
IDENT	SD1
=	=
IDENT	ZERO
IDENT	SD2
=	=
IDENT	ZERO
IDENT	SX1
=	=
IDENT	ZERO
IDENT	ELSE
IDENT	SFLAG
=	=
IDENT	ONE
IDENT	SH11
=	=
IDENT	SP1
/	/
IDENT	SP2
IDENT	SH22
=	=
IDENT	SX1
/	/
IDENT	SY1
IDENT	SU
=	=
IDENT	ONE
+	+
IDENT	SH11
*	*S
IDENT	H22
IDENT	STEMP
=	=
IDENT	SD2
/	/
IDENT	SU
IDENT	SD2
=	=
IDENT	SD1
/	/
IDENT	SU
IDENT	SD1
=	=
IDENT	STEMP
IDENT	SX1
=	=
IDENT	SY1
*	*S
IDENT	U
IDENT	END
IDENT	IF
IDENT	END
IDENT	IF
COMMENT	*     PROCESURE..SCALE-CHECK
IDENT	IF
(	(
IDENT	SD1
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	WHILE
(	(
(	(
IDENT	SD1
.	.
IDENT	LE
.	.
IDENT	RGAMSQ
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	SD1
.	.
IDENT	GE
.	.
IDENT	GAMSQ
)	)
)	)
IDENT	IF
(	(
IDENT	SFLAG
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH11
=	=
IDENT	ONE
IDENT	SH22
=	=
IDENT	ONE
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	ELSE
IDENT	SH21
=	=
-	-
IDENT	ONE
IDENT	SH12
=	=
IDENT	ONE
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	END
IDENT	IF
IDENT	IF
(	(
IDENT	SD1
.	.
IDENT	LE
.	.
IDENT	RGAMSQ
)	)
IDENT	THEN
IDENT	SD1
=	=
IDENT	SD1
*	*G
IDENT	AM
*	**
IDENT	2
IDENT	SX1
=	=
IDENT	SX1
/	/
IDENT	GAM
IDENT	SH11
=	=
IDENT	SH11
/	/
IDENT	GAM
IDENT	SH12
=	=
IDENT	SH12
/	/
IDENT	GAM
IDENT	ELSE
IDENT	SD1
=	=
IDENT	SD1
/	/
IDENT	GAM
*	**
IDENT	2
IDENT	SX1
=	=
IDENT	SX1
*	*G
IDENT	AM
IDENT	SH11
=	=
IDENT	SH11
*	*G
IDENT	AM
IDENT	SH12
=	=
IDENT	SH12
*	*G
IDENT	AM
IDENT	END
IDENT	IF
IDENT	ENDDO
IDENT	END
IDENT	IF
IDENT	IF
(	(
IDENT	SD2
.	.
IDENT	NE
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	DO
IDENT	WHILE
(	(
(	(
IDENT	ABS
(	(
IDENT	SD2
)	)
.	.
IDENT	LE
.	.
IDENT	RGAMSQ
)	)
.	.
IDENT	OR
.	.
(	(
IDENT	ABS
(	(
IDENT	SD2
)	)
.	.
IDENT	GE
.	.
IDENT	GAMSQ
)	)
)	)
IDENT	IF
(	(
IDENT	SFLAG
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SH11
=	=
IDENT	ONE
IDENT	SH22
=	=
IDENT	ONE
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	ELSE
IDENT	SH21
=	=
-	-
IDENT	ONE
IDENT	SH12
=	=
IDENT	ONE
IDENT	SFLAG
=	=
-	-
IDENT	ONE
IDENT	END
IDENT	IF
IDENT	IF
(	(
IDENT	ABS
(	(
IDENT	SD2
)	)
.	.
IDENT	LE
.	.
IDENT	RGAMSQ
)	)
IDENT	THEN
IDENT	SD2
=	=
IDENT	SD2
*	*G
IDENT	AM
*	**
IDENT	2
IDENT	SH21
=	=
IDENT	SH21
/	/
IDENT	GAM
IDENT	SH22
=	=
IDENT	SH22
/	/
IDENT	GAM
IDENT	ELSE
IDENT	SD2
=	=
IDENT	SD2
/	/
IDENT	GAM
*	**
IDENT	2
IDENT	SH21
=	=
IDENT	SH21
*	*G
IDENT	AM
IDENT	SH22
=	=
IDENT	SH22
*	*G
IDENT	AM
IDENT	END
IDENT	IF
IDENT	END
IDENT	DO
IDENT	END
IDENT	IF
IDENT	END
IDENT	IF
IDENT	IF
(	(
IDENT	SFLAG
.	.
IDENT	LT
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SPARAM
(	(
IDENT	2
)	)
=	=
IDENT	SH11
IDENT	SPARAM
(	(
IDENT	3
)	)
=	=
IDENT	SH21
IDENT	SPARAM
(	(
IDENT	4
)	)
=	=
IDENT	SH12
IDENT	SPARAM
(	(
IDENT	5
)	)
=	=
IDENT	SH22
IDENT	ELSE
IDENT	IF
(	(
IDENT	SFLAG
.	.
IDENT	EQ
.	.
IDENT	ZERO
)	)
IDENT	THEN
IDENT	SPARAM
(	(
IDENT	3
)	)
=	=
IDENT	SH21
IDENT	SPARAM
(	(
IDENT	4
)	)
=	=
IDENT	SH12
IDENT	ELSE
IDENT	SPARAM
(	(
IDENT	2
)	)
=	=
IDENT	SH11
IDENT	SPARAM
(	(
IDENT	5
)	)
=	=
IDENT	SH22
IDENT	END
IDENT	IF
IDENT	SPARAM
(	(
IDENT	1
)	)
=	=
IDENT	SFLAG
IDENT	RETURN
IDENT	END
