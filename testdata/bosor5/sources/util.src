C=DECK      UTILLIB
C
C  THIS IS THE UTIL LIBRARY (SOURCE FILE)
C
C
C  200-SEGMENT VERSION OF BOSOR5
C
C=DECK      SR100T
	SUBROUTINE SR100T(I)
      COMMON/PRMOUT/IFILE3,IFILE4
      real temp(2), T
         return
	IF (I.EQ.1) THEN
c               T = dtime(temp)
                T = 0
	        RETURN
	ENDIF
	IF (I.EQ.2) THEN
c               T = dtime(temp)
                T = 0
	        WRITE (IFILE4,900) T
900             FORMAT (' ELAPSED CPU TIME IN SECONDS =',G13.4)
	        RETURN
	ENDIF
	RETURN
	END
C BEG AUG 2003
C=DECK              INTER
      subroutine    INTER (x, xo, ic, n)
 
*     implicit real (a-h,o-z)
*     implicit double precision (a-h,o-z)
C+---------------------------------------------------------------------+
C|    for a given value of (xo), this function searches the array      |
C|    x(*) which may be INCREASING or DECREASING, to locate the        |
C|    closest point x(i) in the array, and returns it index (ic).      |
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C|                  C O M M O N   &   G L O B A L S                    |
C+---------------------------------------------------------------------+
*     include       'interc.inc'
      common/RERUN/ iflag
C+---------------------------------------------------------------------+
C|                  A R G U M E N T S                                  |
C+---------------------------------------------------------------------+
      integer       ic,       n
 
      real          xo,       x(*)
*     double precision        xo,       x(*)
C+---------------------------------------------------------------------+
C|                  L O C A L   V A R I A B L E S                      |
C+---------------------------------------------------------------------+
      integer       k,        klo,      khi

      real          rat,      ratmax,   hlf
*     double precision        rat,      ratmax,   hlf
C+---------------------------------------------------------------------+
C|                  D A T A                                            |
C+---------------------------------------------------------------------+
      data          ratmax / 2.000e-02 /
*     data          ratmax / 2.000d-02 /

      data          hlf    / 0.500e+00 /
*     data          hlf    / 0.500d+00 /
C+---------------------------------------------------------------------+
C|                  L O G I C                                          |
C+---------------------------------------------------------------------+
      iflag =  0

      if (n .le. 1)                    then
        ic    =  1
        return
      endif
C+---------------------------------------------------------------------+
C|    check for x(-) ascending or descending ?                         |
C+---------------------------------------------------------------------+
      if (x(1) .le. x(n))              then
C+---------------------------------------------------------------------+
C|                                                                     |
C|      x(n) is in  ASCENDING  order                                   |
C|                                                                     |
C+---------------------------------------------------------------------+
C|      check if (xo) is in range of table                             |
C+---------------------------------------------------------------------+
        if     (xo .le. x(1))          then
          ic   =  1

          if (xo .lt. x(1))            then
            rat  =  (x(1) - xo) / (x(n) - x(1))
            if (rat .gt. ratmax)       then
              write(6,3000) xo, 1, 1, x(1), n, n, x(n), rat, ratmax
              iflag =  1
*             stop
            endif
          endif

C BEG OCT 2003
C         yval = ydat(ic)
C END OCT 2003
          return
 
        elseif (xo .ge. x(n))          then
          ic   =  n

          if (xo .gt. x(n))            then
            rat  =  (xo - x(n)) / (x(n) - x(1))
            if (rat .gt. ratmax)       then
              write(6,3000) xo, 1, 1, x(1), n, n, x(n), rat, ratmax
              iflag =  1
*             stop
            endif
          endif

          return
        endif
C+---------------------------------------------------------------------+
C|      use a BINARY search throuygh x(*) to find (xo)                 |
C+---------------------------------------------------------------------+
        klo   =  1
        khi   =  n
 
   10   if ((khi-klo) .gt. 1)        then
          k   =  (khi + klo) / 2
          if (x(k) .gt. xo)          then
            khi   =  k
          else
            klo   =  k
          endif
           go to 10
        endif
C+---------------------------------------------------------------------+
C|      xo now lies between x(klo) and x(khi), find closest point      |
C+---------------------------------------------------------------------+
        rat  =  (xo - x(klo)) / (x(khi) - x(klo))

        if (rat .le. hlf)            then
          ic  =  klo
        else
          ic  =  khi
        endif
C+---------------------------------------------------------------------+
C|                                                                     |
C|      x(n) is in  DECENDING  order                                   |
C|                                                                     |
C+---------------------------------------------------------------------+
      else
C+---------------------------------------------------------------------+
C|      check if (xo) is in range of table                             |
C+---------------------------------------------------------------------+
        if     (xo .ge. x(1))          then
          ic  =  1

          if (xo .gt. x(1))            then
            rat  =  (xo - x(1)) / (x(1) - x(n))
            if (rat .gt. ratmax)       then
              write(6,3000) xo, n, n, x(n), 1, 1, x(1), rat, ratmax
              iflag =  1
*             stop
            endif
          endif

C BEG OCT 2003
C         yval = ydat(ic)
C END OCT 2003
          return
 
        elseif (xo .le. x(n))          then
          ic  =  n

          if (xo .lt. x(n))            then
            rat  =  (x(n) - xo) / (x(1) - x(n))
            if (rat .gt. ratmax)       then
              write(6,3000) xo, n, n, x(n), 1, 1, x(1), rat, ratmax
              iflag =  1
*             stop
            endif
          endif

          return
        endif
C+---------------------------------------------------------------------+
C|      use a BINARY search throuygh x(*) to find (xo)                 |
C+---------------------------------------------------------------------+
        khi   =  1
        klo   =  n
C BEG DEC 2003 
C  20   if ((khi-klo) .gt. 1)        then
   20   if ((klo-khi) .gt. 1)        then
C END DEC 2003
          k   =  (khi + klo) / 2
          if (x(k) .gt. xo)          then
            khi   =  k
          else
            klo   =  k
          endif
          go to 20
        endif
C+---------------------------------------------------------------------+
C|      xo now lies between x(klo) and x(khi), find closest point      |
C+---------------------------------------------------------------------+
        rat  =  (xo - x(klo)) / (x(khi) - x(klo))

        if (rat .le. hlf)            then
          ic  =  klo
        else
          ic  =  khi
        endif
C+---------------------------------------------------------------------+
C|      finished, return to caller                                     |
C+---------------------------------------------------------------------+
      endif
 
      return
C+---------------------------------------------------------------------+
C|    format statements                                                |
C+---------------------------------------------------------------------+
 3000 format (/,' INTER:  selected point (xo) lies too far outside',
     $          ' range of array values',
     $       //,'         test    point =        xo     = ',1pe15.6,
     $        /,'         lowest  point = ',i3,',   x(',i3,') = ',e15.6,
     $        /,'         highest point = ',i3,',   x(',i3,') = ',e15.6,
     $       //,'         relative distance away (rat)  = ', e15.6,
     $        /,'         span of array x(-)  (ratmax)  = ', e15.6,/)
      end
C END AUG 2003
C
C
C
C=DECK      INTER 
C     SUBROUTINE INTER(S,STEST,IPOINT,NMESH)    
C     INTERPOLATING ROUTINE FOR FINDING MESH POINT CLOSEST TO CALLOUT
C     , STEST. CALLED FROM STA, WHICH IS CALLED FROM MANY OF THE  
C     SUBROUTINES IN THE READIT OVERLAY.  
C     
C     COMMON/RERUN/IFLAG
C     DIMENSION S(100)  
C     IFLAG = 0   
C     SA = S(1)
C     SB = S(NMESH)
C     SDIFF = SB - SA
C     IF (SDIFF.EQ.0.) GO TO 85
C     IF (ABS(SA/SDIFF).LT.0.00001) SA = 0.
C     IF (ABS(SB/SDIFF).LT.0.00001) SB = 0.
C     ST = STEST
C     IF (ABS(ST/SDIFF).LT.0.00001) ST = 0.
C     IF (SDIFF) 3,85,5  
C 3   CONTINUE    
C     FACT1 = 0.999     
C     IF(S(NMESH).LT.0.0) FACT1 = 1.001   
C     FACT2 = 1.001     
C     IF (S(1).LT.0.0) FACT2 = 0.999
C     IF (ST.GE.SB*FACT1.AND.ST.LE.SA*FACT2) GO TO 9
C     GO TO 7     
C 5   CONTINUE    
C     FACT1 = 0.999     
C     IF (S(1).LT.0.0) FACT1 = 1.001
C     FACT2 = 1.001     
C     IF(S(NMESH).LT.0.0) FACT2 = 0.999   
C     IF (ST.GE.SA *FACT1.AND.ST.LE.SB*FACT2) GO TO 9  
C 7   CONTINUE    
C     WRITE(6,8) STEST,S(1),S(NMESH)
C 8   FORMAT(//' INPUT DATA ERROR...'/
C    1'   CALLOUT = ', 1PE15.4/
C    1'   IT SHOULD BE BETWEEN ',1PE15.4,' AND',1PE15.4/
C    1'   OR EQUAL TO ONE OF THEM.' //)
C     IFLAG = 1   
C     RETURN
C
C  85 CONTINUE
C     WRITE(6,87) S(1), S(NMESH)
C  87 FORMAT(//' BEGINNING OF SEGMENT IS AT', 1PE12.4/
C    1         '       END OF SEGMENT IS AT', 1PE12.4//
C    1' VARIABLE CHOSEN FOR CALLOUTS IS UNSUITABLE BECAUSE IT IS NOT'/
C    1' MONOTONIC THROUGHOUT THE SHELL SEGMENT.  PLEASE CHOOSE A DIF-'/
C    1' FERENT VARIABLE FOR CALLOUTS.'//)
C
C     CALL ERREX
C
C 9   SDIFF = 0.0 
C     DO 10 I=1,NMESH   
C     IF ((S(I)-STEST).NE.0.0) GO TO 10   
C     IPOINT = I  
C     RETURN
C 10  SDIFF = AMAX1(ABS(1./(S(I)-STEST)),SDIFF) 
C     DO 20 I=1,NMESH   
C     IF (SDIFF.NE.ABS(1./(S(I)-STEST))) GO TO 20     
C     IPOINT = I  
C     RETURN
C 20  CONTINUE    
C     RETURN
C     END   
C
C
C
C=DECK      STA
      SUBROUTINE STA(IPOINT,ZAXIAL,RAD,RADD,S,NPOINT,NMESH)
C     CALLED FROM SEVERAL SUBROUTINES IN READIT LINK
      DIMENSION IPOINT(50),ZAXIAL(100),RAD(100),RADD(100),S(100),Z(50)
      DIMENSION R(50),SARC(50),THETA(50)
      COMMON/SSARC/SEND,DSTOT,DSS(2000)
      COMMON/IMISC/ISEG,ITOT,KRING
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
C BEG JAN 2006
      COMMON/GORIGL/RORIGL(100),ZORIGL(100)
C END JAN 2006
      COMMON/RERUN/IFLAG
      COMMON/JRING/JJRING
      CHARACTER*4 CHARAC
      DIMENSION ITEMP(50)
   10 FORMAT(10I6)
   20 FORMAT(6E12.8)
      CALL DATUM(IFILE2,IPRM(2),1,2,NTYPE,REALL,CHARAC,IOUT,0,1)
C BEG SEP 2011
C     IF (NTYPE.NE.2.AND.NTYPE.NE.3) THEN
C      WRITE(IFILE4,*)' NTYPE  MUST BE EITHER   2   OR   3'
      IF (NTYPE.NE.1.AND.NTYPE.NE.2.AND.NTYPE.NE.3) THEN
       WRITE(IFILE4,*)' NTYPE MUST BE EITHER    1   OR   2   OR   3'
C END SEP 2011 
       CALL ERREX
      ENDIF
C
C     NTYPE = 1    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY
C                   MESH POINT NUMBERS
C           = 2    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY
C                  AXIAL COORDINATE, Z
C           = 3    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY
C                  RADIAL COORDINATE, R
C           = 4    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY
C                  ARC LENGTH FROM BEGINNING OF CURRENT SEGMENT, S
C           = 5    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY
C                  ANGLE BETWEEN AXIS OF REVOLUTION AND NORMAL TO WALL
C
      GO TO (30,50,70,90,110),NTYPE
C     IPOINT = LOCAL MESH POINT TAGS TO WHICH INPUT DATA CORRESPOND
C BEG SEP 2011 
C30    READ (5,10)(IPOINT(J),J=1,NPOINT)
   30 CONTINUE
      REWIND IFILE2
      DO 35 J = 1,NPOINT
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,267,1,2,IPOINT(J),REALL,CHARAC,IOUT,J,IPROMP)
   35 CONTINUE
      REWIND IFILE2
C END SEP 2011 
      IF (IPOINT(NPOINT).GE.(NMESH-1)) IPOINT(NPOINT) = NMESH-2
      JSTART = 1
      IF (IPOINT(1).EQ.1) JSTART = 2
      IF (NPOINT.LT.JSTART) RETURN
      DO 40 J=JSTART,NPOINT
   40 IPOINT(J) = IPOINT(J) + 1
      IF (IPOINT(NPOINT).EQ.(NMESH-1)) IPOINT(NPOINT)=IPOINT(NPOINT) + 1
      RETURN
   50 CONTINUE
      DO 55 J = 1,NPOINT
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,IPRM(2)+1,1,2,INT,Z(J),CHARAC,IOUT,J,IPROMP)
   55 CONTINUE
      DO 60 J=1,NPOINT
C BEG JAN 2006
C     CALL INTER(ZAXIAL,Z(J),IPOINT(J),NMESH)
      CALL INTER(ZORIGL,Z(J),IPOINT(J),NMESH)
C END JAN 2006
      IF (IFLAG.EQ.0) GO TO 60
      REWIND IFILE2
      GO TO 50
   60 CONTINUE
      IF (IPOINT(1).NE.1.AND.JJRING.EQ.0) THEN
C BEG JAN 2006
C        DIFF = ABS(Z(1) - ZAXIAL(1))/ABS(ZAXIAL(NMESH)-ZAXIAL(1))
         DIFF = ABS(Z(1) - ZORIGL(1))/ABS(ZORIGL(NMESH)-ZORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(1).LE.3) IPOINT(1) = 1
C        WRITE(IFILE4,62) Z(1), ZAXIAL(1), IPOINT(1)
         WRITE(IFILE4,62) Z(1), ZORIGL(1), IPOINT(1)
C END JAN 2006
   62    FORMAT(/' BAD AXIAL CALLOUT AT BEGINNING OF SEGMENT:'//
     1'  Z( 1 ) =',1PE14.5,'.  Z( 1 ) SHOULD BE EQUAL TO',
     1   1PE14.5,'.'/'  IPOINT(1) =',I4,' IT SHOULD BE EQUAL TO 1')
      ENDIF
C
      IF (IPOINT(NPOINT).NE.NMESH.AND.JJRING.EQ.0) THEN
C BEG JAN 2006
C        DIFF = ABS(Z(NPOINT) - ZAXIAL(NMESH))/
C    1               ABS(ZAXIAL(NMESH)-ZAXIAL(1))
         DIFF = ABS(Z(NPOINT) - ZORIGL(NMESH))/
     1               ABS(ZORIGL(NMESH)-ZORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(NPOINT).GE.(NMESH-2))
     1                                 IPOINT(NPOINT) = NMESH
C        WRITE(IFILE4,64) Z(NPOINT), ZAXIAL(NMESH),IPOINT(NPOINT),NMESH
         WRITE(IFILE4,64) Z(NPOINT), ZORIGL(NMESH),IPOINT(NPOINT),NMESH
C END JAN 2006
   64    FORMAT(/' BAD AXIAL CALLOUT AT    END    OF SEGMENT:'//
     1'  Z(end) =',1PE14.5,'.  Z(end) SHOULD BE EQUAL TO',
     1   1PE14.5,'.'/'  IPOINT(NPOINT) =',I4,
     1'  IT SHOULD BE EQUAL TO',I4)
      ENDIF
C
      IF (JJRING.EQ.0) THEN
         IF (IPOINT(1).NE.1.OR.IPOINT(NPOINT).NE.NMESH) CALL ERREX
      ENDIF
C
      GO TO 130
   70 CONTINUE
      DO 75 J = 1,NPOINT
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,IPRM(2)+2,1,2,INT,R(J),CHARAC,IOUT,J,IPROMP)
   75 CONTINUE
      DO 80 J=1,NPOINT
C BEG JAN 2006
C     CALL INTER(RAD,R(J),IPOINT(J),NMESH)
      CALL INTER(RORIGL,R(J),IPOINT(J),NMESH)
C END JAN 2006
      IF (IFLAG.EQ.0) GO TO 80
      REWIND IFILE2
      GO TO 70
   80 CONTINUE
C
      IF (IPOINT(1).NE.1.AND.JJRING.EQ.0) THEN
C BEG JAN 2006
C        DIFF = ABS(R(1) - RAD(1))/ABS(RAD(NMESH)-RAD(1))
         DIFF = ABS(R(1) - RORIGL(1))/ABS(RORIGL(NMESH)-RORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(1).LE.3) IPOINT(1) = 1
C        WRITE(IFILE4,82) R(1), RAD(1), IPOINT(1)
         WRITE(IFILE4,82) R(1), RORIGL(1), IPOINT(1)
C END JAN 2006
   82    FORMAT(/' BAD RADIAL CALLOUT AT BEGINNING OF SEGMENT:'//
     1'  R( 1 ) =',1PE14.5,'.  R( 1 ) SHOULD BE EQUAL TO',
     1   1PE14.5,'.'/'  IPOINT(1) =',I4,' IT SHOULD BE EQUAL TO 1')
      ENDIF
C
      IF (IPOINT(NPOINT).NE.NMESH.AND.JJRING.EQ.0) THEN
C BEG JAN 2006
C        DIFF = ABS(R(NPOINT) - RAD(NMESH))/
C    1               ABS(RAD(NMESH)-RAD(1))
         DIFF = ABS(R(NPOINT) - RORIGL(NMESH))/
     1               ABS(RORIGL(NMESH)-RORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(NPOINT).GE.(NMESH-2))
     1                                 IPOINT(NPOINT) = NMESH
C        WRITE(IFILE4,84) R(NPOINT), RAD(NMESH),IPOINT(NPOINT),NMESH
         WRITE(IFILE4,84) R(NPOINT), RORIGL(NMESH),IPOINT(NPOINT),NMESH
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JAN 2006
   84    FORMAT(/' BAD RADIAL CALLOUT AT    END    OF SEGMENT:'//
     1'  R(end) =',1PE14.5,'.  R(end) SHOULD BE EQUAL TO',
     1   1PE14.5,'.'/'  IPOINT(NPOINT) =',I4,
     1'  IT SHOULD BE EQUAL TO',I4)
      ENDIF
C
      IF (JJRING.EQ.0) THEN
         IF (IPOINT(1).NE.1.OR.IPOINT(NPOINT).NE.NMESH) CALL ERREX
      ENDIF
C
      GO TO 130
   90 READ (5,20)(SARC(J),J=1,NPOINT)
      DO 100 J=1,NPOINT
      SA = SARC(J) + SEND
  100 CALL INTER(S,SA,IPOINT(J),NMESH)
      GO TO 130
  110 READ (5,20)(THETA(J),J=1,NPOINT)
      DO 120 J=1,NPOINT
      THETAR = THETA(J)*3.1415927/180.
      RADDJ = COS(THETAR)
      IF (ABS(RADDJ).LT.0.0005) RADDJ = 0.0
  120 CALL INTER(RADD,RADDJ,IPOINT(J),NMESH)
  130 CONTINUE
      IF (NPOINT.EQ.1) RETURN
      ILOOP = 0
  140 DO 150 J=1,NPOINT
  150 ITEMP(J) = IPOINT(J)
      IFLAG = 0
      DO 170 J=2,NPOINT
      JM = J - 1
      IF (IPOINT(J).NE.IPOINT(JM)) GO TO 170
      IFLAG = IFLAG + 1
      IF (IPOINT(J).NE.NMESH) GO TO 160
      ITEMP(JM) = IPOINT(JM) - 1
      GO TO 170
  160 ITEMP(J) = IPOINT(J) + 1
  170 CONTINUE
      IF (IFLAG.EQ.0) RETURN
      ILOOP = ILOOP + 1
      IF (ILOOP.EQ.1) WRITE (IFILE4,180)ISEG,NTYPE
  180 FORMAT(//   87H CALLOUT POINTS,(IPOINT(J),J=1,NPOINT), AS ORIGINAL
     1LY COMPUTED BY SUBR. INTER FOR SEG.  I2,7H NTYPE= I2)
      IF (ILOOP.EQ.1) WRITE (IFILE4,210)(IPOINT(J),J=1,NPOINT)
      DO 190 J=1,NPOINT
  190 IPOINT(J) = ITEMP(J)
      WRITE (IFILE4,200)ISEG,NTYPE
  200 FORMAT(// 78H NOTE... CALLOUT POINTS, (IPOINT(J),J=1,NPOINT), HAVE
     1 BEEN SHIFTED FOR SEGMENT I2,7H NTYPE=I2//)
      WRITE (IFILE4,210)(IPOINT(J),J=1,NPOINT)
  210 FORMAT(//12H IPOINT(J) =  35I3/(35I3))
      IF (ILOOP.LE.3) GO TO 140
      WRITE (IFILE4,220)ISEG
  220 FORMAT(//  36H REVISE CALLOUT STATIONS IN SEGMENT  I2,   66H MORE
     1CALLOUT POINTS THAN MESH POINTS IN SOME AREAS OF THIS SEG.    //)
      IF (ILOOP.GT.3) CALL ERREX
      RETURN
      END
C=DECK      FINDZ
      SUBROUTINE FINDZ(NZVALU,IZVAL,ZVAL,NMESH,Z,S)
C
C     THIS IS A SIMPLE LINEAR INTERPOLATOR. THE INPUT VALUES ARE IN ZVAL
C     AND THE OUTPUT VALUES IN Z.
C
      DIMENSION IZVAL(50),ZVAL(50),Z(100),S(100)
      Z(1) = ZVAL(1)
      J = 1
      DO 40 I=2,NMESH
      J1 = J + 1
      ZIZ = ZVAL(J)
      IZJ = IZVAL(J)
      IZJ1 = IZVAL(J1)
      FDIF1 = S(I) - S(IZJ)
      FDIF2 = S(IZJ1) - S(IZJ)
      IF (FDIF2.NE.0.) GO TO 20
      WRITE (6,10)I
   10 FORMAT(//   35H TOO MANY CALLOUTS NEAR MESH POINT   I2, 47H.  THIS
     1 MESSAGE PRINTED OUT FROM SUBR. FINDZ.    //)
      CALL ERREX
   20 CONTINUE
      Z(I) = ZIZ +(ZVAL(J1) - ZIZ)*FDIF1/FDIF2
      IF (I.EQ.IZVAL(J1)) GO TO 30
      GO TO 40
   30 J = J + 1
   40 CONTINUE
      RETURN
      END
C=DECK      URNDM
      SUBROUTINE URNDM (K, N, U)
C
C     GENERATES	A RANDOM SEQUENCE HAVING UNIFORM OR
C     NORMAL DISTRIBUTION - IBM	360 VERSION
C
C     K	= 0 GIVES UNIFORM DISTRIBUTION IN (0.,1.)
C     K	= 1 GIVES AN APPROXIMATE NORMAL	DISTRIBUTION WITH MEAN=0. AND
C	    VARIANCE =1.0
C     N	= NUMBER OF RANDOM VALUES TO BE	STORED IN VECTOR U
C
C
      DOUBLE PRECISION U(N)
      DATA IX/1/
      IF (K.NE.0) GO TO 500
C     UNIFORM DISTRIBUTION
C     POWER RESIDUE METHOD DISCUSSED IN	IBM MANUAL C20-8011
C
      DO 100 I = 1,N
      IY = IX*65539
      IF (IY) 5,6,6
    5 IY = IY +	2147483647 + 1
    6 YFL = IY
      YFL = YFL*.4656613E-9
      IX = IY
  100 U(I) = YFL
      RETURN
  500 CONTINUE
C     NORMAL DISTRIBUTION
C
C     METHOD-- USES 12 UNIFORM RANDOM NUMBERS TO COMPUTE NORMAL	RANDOM
C	       NUMBERS BY CENTRAL LIMIT	THEOREM. THE RESULT IS THEN
C	       ADJUSTED	TO MATCH THE GIVEN MEAN	AND STANDARD DEVIATION.
C	       THE UNIFORM RANDOM NUMBERS ARE COMPUTED BY THE POWER
C	       RESIDUE METHOD.
C
C     S	= DESIRED STANDARD DEVIATION OF	THE NORMAL DISTRIBUTION.
C     AM =  DESIRED MEAN OF THE	NORMAL DISTRIBUTION
C
      AM = 0.0
      S	= 1.0
      DO 800 I = 1,N
      A	= 0.0
      DO 600 J = 1,12
      IY = IX*65539
      IF (IY) 650,660,660
  650 IY = IY +	2147483647 + 1
  660 YFL = IY
      YFL = YFL*.4656613E-9
      IX = IY
  600 A	= A + YFL
      V	= (A-6.0)*S + AM
  800 U(I) = V
      RETURN
      END
C=DECK      ERREX 
      SUBROUTINE ERREX  
C     
C    PURPOSE IS TO TRIGGER A SYSTEM ERROR TERMINATION.
C     
C BEG OCT 1995
C     DENOM = 0.  
C     FNUM  = 1.  
C     QUOT  = FNUM/DENOM
      CALL EXIT(1)
C END OCT 1995
      RETURN
      END   
C
      integer function lastch(str)
      character*(*) str
c lastch returns the index of the last character in a string that is not
c whitespace.  ASSUMES ASCII CODING SCHEME!
c input:  str - the string
c output: lastch
c ----------------- Declarations -----------------------------------
#define debug 0
      integer i, ch
c ----------------- Executable Code --------------------------------
      do 10 i = len(str), 1, -1
        ch = ichar(str(i:i))
c If character is printing non-whitespace, then end-of-string found.
        if (ch .ge. 33 .and. ch .le. 126) then
          go to 20
        endif
   10 continue
   20 lastch = i
      return
      end
C
C
