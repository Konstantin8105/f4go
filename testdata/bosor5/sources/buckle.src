C=DECK      BUCKLELIB
C
C THIS IS THE BUCKLE LIBRARY (SOURCE FILE)
C
C
C
C=DECK      BUCKLE
      SUBROUTINE BUCKLE
C
C  200-SEGMENT VERSION OF BOSOR5
C     OVERLAY(7,0)   (CDC VERSION)
C     PROGRAM BUCKLE (CDC VERSION)
C
      COMMON/TOTPTS/M3
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/BUCKEG/BLOAD(100)
      COMMON/BUCKN/N0B,NMINB,NMAXB,INCRB
      COMMON/WAVES/N
      COMMON/SIGNALL/ISIG,KKKK,NSTEPS,LSTEPS(50),TIMES(51)
      COMMON/ISNL/ISIGNL
      COMMON/INSTAB/INDIC
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/DETER/DET,NEX
      COMMON/KKSSP/KMIN,KMAX
      COMMON/ECFFI/TPAST(100)
      DIMENSION ALOAD(100)
      COMMON/      /B(160000)
      DOUBLE PRECISION DB
#if cray
      DIMENSION DB(160000)
#else
      DIMENSION DB(80000)
#endif
      EQUIVALENCE (B(1),DB(1))
C
C     HOW THE WORKING SPACE STORAGE, B(     ), IS ALLOCATED...
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    M3 = NUMBER OF DEGREES OF FREEDOM IN    BUCKLING PROBLEM
C    IMAXB = LENGTH OF BLOCK OF STIFFNESS MATRIX,    BUCKLING PROBLEM
C
C /2*IMAXB/--M3-/2*IMAXB/--2*M3-/--M3-/--2*M3-/--2*M3-/-4*M3--/
C /---AS--/FLOC-/---TP--/---DI--/DIAG-/---X---/---Y---/---Z---/
C /-DB(1)-/B(N1)/DB(N2D)/DB(N3D)/B(N4)/DB(N5D)/DB(N6D)/DB(N7D)/
C 1       N1   N2D     N3D      N4   N5D     N6D     N7D
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     DB(1)    STABILITY MATRIX
C   N1    B(N1)    NUMBERS WHICH INDICATE THE LOCATION OF THE MAIN DIAG-
C                  ONAL ELEMENTS RELATIVE TO THE BEGINNING OF EACH BLOCK
C                  OF THE STIFFNESS MATRIX
C   N2D   DB(N2D)  WORKING SPACE REQUIRED IN FACTOR AND SOLVE
C   N3D   DB(N3D)  WORKING SPACE REQUIRED IN FACTOR
C   N4    B(N4)    DIAGONAL ELEMENTS OF FACTORED STABILITY MATRIX
C   N5D   DB(N5D)  EIGENVECTOR
C   N6D   DB(N6D)  EIGENVECTOR
C   N7D   DB(N7D)  EIGENVECTORS
C
      N1 = 2*IMAXB + 1
      N2D = IMAXB + (M3+1)/2 + 1
      N3D = N2D + IMAXB
      N4 = 4*IMAXB + 3*M3 + 2
      N5D = 2*IMAXB + 2*M3 + 2
      N6D = N5D + M3
      N7D = N6D + M3
      CALL EBAND2(DB(1),B(N1),DB(N2D),DB(N3D),B(N4),DB(N5D),DB(N6D),
     1 DB(N7D))
      IF (N.LT.NMAXB) GO TO 100
      I = 0
      DO 10 N = NMINB,NMAXB,INCRB
      I = I + 1
      IF (N.EQ.N0B) GO TO 20
   10 CONTINUE
   20 FACT = ABS(BLOAD(I))
      IF (FACT.LE.1.0) FACT = 1.0
      I = 0
      DO 30 N = NMINB,NMAXB,INCRB
      I = I + 1
      ALOAD(I) = BLOAD(I)/FACT
      IF (ALOAD(I).NE.0.0) GO TO 30
      WRITE(6,66)
      WRITE(6,25) N,KSTEP
   25 FORMAT(/' NOTE THAT FOR N='I6,' CIRCUMFERENTIAL WAVES THE LOWEST B
     1UCKLING LOAD WAS NOT FOUND. WE ONLY KNOW THAT IT IS LESS'/
     2' THAN THAT SPECIFIED IN LOAD STEP NO.'I3/
     3' AN INDIC = -3 ANALYSIS SHOULD BE MADE WITH N0B SET EQUAL TO THIS
     4 OR SOME NEARBY VALUE OF N.'/
     3' IT IS IMPORTANT TO REALIZE THAT UNDER THIS CIRCUMSTANCE, THE MES
     4SAGE FOLLOWING ABOUT N CORRESPONDING TO THE MINIMUM '/' LOAD, MAY
     5NOT APPLY.'/)
   30 CONTINUE
C     FIND THE SMALLEST VALUE OF ALOAD
      AMINLD = ALOAD(1)
      I = 0
      DO 40 N = NMINB,NMAXB,INCRB
      I = I + 1
      AMINLD = AMIN1(ALOAD(I),AMINLD)
   40 CONTINUE
      I = 0
      DO 50 N = NMINB,NMAXB,INCRB
      I = I + 1
      IF (AMINLD.EQ.ALOAD(I)) GO TO 60
   50 CONTINUE
   60 CONTINUE
      KSTEPL = KSTEP - 1
      WRITE(6,65)
   65 FORMAT(1H1)
   66 FORMAT(' ************************************************** ')
      WRITE(6,66)
      WRITE(6,66)
      WRITE(6,66)
      IF (N.EQ.NMINB) WRITE(6,70) N
      IF (N.EQ.NMAXB) WRITE(6,71) N
      IF (N.GT.NMINB.AND.N.LT.NMAXB) WRITE(6,72)N
   70 FORMAT(/' MINIMUM BUCKLING LOAD CORRESPONDS TO N='I6,' CIRCUMFEREN
     1TIAL WAVES.'/' THIS MINIMUM IS AT THE LOWER EXTREME OF THE N-RANGE
     2 SPECIFIED BY THE USER.'/' THE USER SHOULD COVER SMALLER VALUES OF
     3 N (UNLESS NMINB=0) IN HIS SEARCH FOR A MINIMUM BUCKLING LOAD.'/)
   71 FORMAT(/' MINIMUM BUCKLING LOAD CORRESPONDS TO N='I6,' CIRCUMFEREN
     1TIAL WAVES.'/' THIS MINIMUM IS AT THE UPPER EXTREME OF THE N-RANGE
     2 SPECIFIED BY THE USER.'/' THE USER SHOULD COVER LARGER  VALUES OF
     3 N IN HIS SEARCH FOR A MINIMUM BUCKLING LOAD.'/)
   72 FORMAT(/' MINIMUM BUCKLING LOAD CORRESPONDS TO N='I6,' CIRCUMFEREN
     1TIAL WAVES.'/)
      IF(AMINLD.LE.0.0) WRITE(6,75)KSTEP
   75 FORMAT(/' BUCKLING LOAD IS LESS THAN THAT SPECIFIED BY TIME STEP
     1NUMBER' I3/)
      KSTEPP = KSTEP + 1
      IF (AMINLD.GT.0.0.AND.ISIGNL.EQ.0) WRITE(6,76)KSTEP,KSTEPP
   76 FORMAT(/' BUCKLING LOAD IS BETWEEN THAT SPECIFIED IN TIME STEP NUM
     1BER' I3,'  AND THAT SPECIFIED IN TIME STEP NO.' I3/)
      IF (AMINLD.GT.0.0.AND.ISIGNL.NE.0) WRITE(6,77) KSTEP
   77 FORMAT(/' BUCKLING LOAD IS GREATER THAN THAT SPECIFIED IN TIME STE
     1P NUMBER' I3/)
      WRITE(6,66)
      WRITE(6,66)
      WRITE(6,66)
      IF (N.EQ.N0B) GO TO 99
      IF (AMINLD.GT.0.0.AND.ISIGNL.EQ.0) GO TO 99
      IF (AMINLD.LT.0.0) ISIGNL = 1
      KMAX = KSTEP + 1
      KMIN = 1
      INDIC = -2
      ISIG = 1
      AXB = 0.0
      DET = 1.0
      KKKK = 0
      NSTEPS = KMAX - KMIN + 1
      IF (NSTEPS.GT.50) THEN
        WRITE(6,*)' TOO MANY LOAD STEPS. MAXIMUM=50, NSTEPS=',NSTEPS
        CALL EXIT
      ENDIF
      DO 79 I = 1,NSTEPS
      LSTEPS(I) = KMIN - 1 + I
      J = LSTEPS(I)
      TIMES(I) = TPAST(J)
   79 CONTINUE
C
      TIMES(NSTEPS+1) = TIMES(NSTEPS)
      GO TO 100
   99 CONTINUE
      N = NMAXB
  100 CONTINUE
      RETURN
C     RETURN CARD NOT NEEDED IN CDC VERSION
      END
C=DECK      ADD2
      SUBROUTINE ADD2(AXT,B,C,IDRW,FLOC,IID)
C
C     CALLED FROM EBAND2 (VIBRATION PROBLEMS). TRACE IS BUCKLE,MAIN
C
      DOUBLE PRECISION AXD,B,C
      COMMON/BLK/ IBLK,NGBK(20),NKF(20)
      DIMENSION B(*),C(*),IDRW(20,5),FLOC(*)
C     THE MATRIX B - AXT*C IS FORMED AND STORED IN IDRW(I,5),I=1,IBLK
C
      AXD = AXT
      DO 20 I=1,IBLK
      NLAST = NGBK(I)
      LENGTH = 2.*FLOC(NLAST)
      CALL GASP(B,LENGTH,3,IDRW(I,1))
      CALL GASP(C,LENGTH,3,IDRW(I,IID))
      L2 = LENGTH/2
      DO 10 J=1,L2
   10 B(J) = B(J) - AXD*C(J)
      IF (IBLK.GT.1) CALL GASP(B,LENGTH,1,IDRW(I,5))
   20 CONTINUE
      RETURN
      END
C=DECK      EBAND2
      SUBROUTINE EBAND2(B,FLOC,C,DI,DIAG,X,Y,Z)
C     THIS SUBROUTINE IS USED TO CALCULATE NVEC VIBRATION FREQUENCIES
C     FOR A GIVEN CIRCUMFERENTIAL WAVENUMBER N.  THE EIGENVALUE
C     PROBLEM HAS THE FORM . .
C                               A*X  - OMEGA**2*M*X  = 0
C
C     SEE ADDITIONAL COMMENTS SPRINKLED THROUGHOUT EBAND
C
C
C
      DOUBLE PRECISION B,C,DI,Z,X,Y
      DOUBLE PRECISION SUM,SUM1,SUM2,SM,BIG
      COMMON/BUCKN/N0B,NMINB,NMAXB,INCRB
      COMMON/BUCKEG/BLOAD(100)
      COMMON/TOTPTS/NT
      COMMON/EIGNO/NVEC,ROOT(50),AXB
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(201),IROWCB(201),IIWP,IIWB
      COMMON/OUTP/NPRINT
      COMMON/GMASS/GM(50)
      COMMON /EIG1/IDI,IMI,AX,ACX(3),DM(3,3),IMXP(3),IMDV(3)
      COMMON /EIG2/ ITP1(1),ITP2,ITP3,ITP4,ITP5
C     COMMON/EIG3/RHO,SD
      COMMON /EIG4/NEG(100)
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/WAVES/ N
      COMMON/IDVEC/IBVC(50),IPV2(50)
      COMMON/IDEIG/IVEC(2,25), NTRY
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/INSTAB/INDIC
      COMMON/SHFTS/AXBS,AXBSS
      DIMENSION SM(50),ISAVE1(50),ISAVE2(50)
      DIMENSION C(*),B(*),DI(*),DIAG(*),X(*),Y(*),Z(*),FLOC(*)
   10 FORMAT(25X,11HROOT NUMBER I4,11H  ITERATION I4, 5H  AX=E14.8,
     1 6H  DET=E14.8, 1H+I6,28H, NUMBER OF NEGATIVE ROOTS=  I3)
   20 FORMAT (12H0  THERE ARE I5,25H EIGENVALUES IN THE RANGE E15.7,
     1 4H TO  E15.7)
   30 FORMAT (12H  THERE ARE  I5,20H EIGENVALUES BETWEEN  E15.7, 4H AND
     1 E15.7)
   40 FORMAT (12H  THERE ARE  I5,20H FREQUENCIES BETWEEN  E15.7,4H AND
     1 E15.7)
   50 FORMAT (15X,14H SUB ITERATION  I4,7H,  ARQ= E14.8,9H,   DARQ=E14.8
     1 ,9H,   FREQ= E14.8)
   60 FORMAT (12H0ROOT NUMBER  I3,1H.,I7, 17H SPECTRAL SHIFTS. ,I7,
     1 16H SUB ITERATIONS.,5X,11HEIGENVALUE= E14.8,15H,    FREQUENCY=
     1 E14.8)
      DATA IDB1,IMAX,MAX,EPS,EPS1,EPS2/1,3,18,.000005,.0002,.005/
      DATA C1,C2,C3,C4/.99,.95,.85,.7/
      DATA KA, KB,CC,SD/0,0,1.,.1591549/
      DATA ARQ,AXG,AX2,DARQ,DZ,ER/0.,0.,0.,0.,0.,0./
   70 FORMAT (63H0  NO FURTHER EIGENVALUES CAN BE FOUND IN THE SPECIFIED
     1 RANGE.   )
   80 FORMAT (8H0 VECTOR     /(6E15.6))
   90 FORMAT (18H GENERALIZED MASS=  E15.8//)
  100 CONTINUE
      IF (NPRINT.GT.1) WRITE(6,110) NVEC,N
  110 FORMAT(///34H ENTER EBAND2 TO CALCULATE LOWEST  I2,40H  EIGENVALUE
     1S.            WAVENUMBER,N=  I6, 6H WAVES  /)
      IF (NPRINT.GT.1) CALL SR100T(2)
      IID = 2
      IF (INDIC.EQ.2) IID = 3
      ITHIS = 0
      NSHIFT = 0
      DECR = 0.95
      M3 = NT
      ITOTL = 0
      NEXT = 1
      IEND = 0
      IFLAG = 0
      NPRT = 0
      SUM2 = 0.
      NROW = NT
      N8=0
      ND=NROW
      ND2 = ND*2
      LGTH = 2.*FLOC(NT)
      AX1 = 0.0
      N9=5
      IMAX=10
      ITP1(1) = 0
      ITP2=0
C
      IF (INDIC.NE.-1) IFLGG = 0
      MAX=18
      AROOT=0.
      ASTEP=1.E+20
      KB=100000
      AX2=1.E+20
  120 FORMAT(52H       FINISH FORMING B - AXT*C AND START FACTORING.   )
  130 FORMAT(//I5,34H  NEGATIVE ROOTS  FOR SHIFT. AXT =  1PE13.5//)
      IF (IBLK.EQ.1) CALL GASP(C,LGTH,3,IDRW(1,IID))
      N3=0
      N4=0
      N5=0
      N6=0
      N7=0
      IDF=0
      TOP=0.0
      NIT=0
      NITT=0
      IPOW=0
      NEIG=0
      IDIF=50
      NTOT=ND2
      IDF1=IDIF-1
      TOP1=TOP
      AXR2 = AXB
      GO TO 200
C
C     USE THE LAST EIGENVALUE:
C
  140 AXR2=AXR+CC*ARQ
      IF (AXR2.GT.AX2) GO TO 980
      IF (AXR2.LT.AX1) GO TO 180
      IF (AXG.LT.AX1) GO TO 180
      IF (AXR2) 150,590,150
  150 IF (ABS(ARQ/AXR2).LT.0.01) GO TO 160
      GO TO 170
  160 CONTINUE
      N3 = N3 + 1
      IF (N3.GT.IMAX) GO TO 960
      IF (NIT.EQ.MAX) GO TO 930
      NIT = 1
      GO TO 590
  170 CONTINUE
      AXM=AMAX1(ASTEP,C4*AROOT)
      CX=AXM/ABS(ARQ)
      CC=AMIN1(CC,CX)
      AXR2=AXR+CC*ARQ
      GO TO 210
  180 CONTINUE
      IF (INDIC.NE.-1) GO TO 190
      IF (KTM.LE.KROOTS) GO TO 190
      IF (KTM.EQ.(KROOTS+1)) GO TO 210
  190 AXR2 = AXR - 1.5*ARQ
  200 CALL URNDM(0,ND,Y)
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,FLOC)
  210 N3 =N3+1
      NSHIFT = NSHIFT + 1
      AXR=AXR2
      IF (N3-IMAX) 220,220,960
  220 CONTINUE
  230 CONTINUE
      AXT =-AXR
      CALL ADD2(AXT,B,C,IDRW,FLOC,IID)
      NEX=0
      IF (NPRINT.GT.1) WRITE (6,120)
      IF (NPRINT.GT.1) CALL SR100T(2)
      CALL FACTR(C,B,IDRW(1,5),DET,NEX,IBLK,NGBK,NFK,FLOC,DIAG,DI,KMAXB)
      IF (IBLK.EQ.1) CALL GASP(C,LGTH,3,IDRW(1,IID))
      IF (NPRINT.GT.0) WRITE(6,130) KTM,AXT
      KDIFF = KTM - KROOTS
      IF (KDIFF.LE.1) GO TO 235
      IF (N4.EQ.0) GO TO 235
      KDIFF1 = KDIFF - 1
      WRITE(6,233) N,KDIFF1,AROOT
  233 FORMAT(//' FOR THIS CIRCUMFERENTIAL WAVENUMBER (N='I6,' ) THE   '/
     1' SUBROUTINE EBAND2 FAILED TO CONVERGE TO THE SMALLEST EIGEN-   '/
     2' VALUE. THERE EXIST'I3,'  ADDITIONAL EIGENVALUES BETWEEN  0 AND'/
     3' THE COMPUTED ROOT,'1PE15.4,' .  BECAUSE OF THIS, THE CIRCUM-  '/
     4' FERENTIAL WAVENUMBER IDENTIFIED BELOW AS BEING THAT CORRESPOND'/
     5' ING TO THE MINIMUM LOAD, MAY NOT ACTUALLY BE THE CRITICAL N. '/)
  235 CONTINUE
      IF (NPRINT.GT.1) CALL SR100T(2)
      IF (NPRT.NE.0) WRITE (6,10)N4,N3,AXR,DET,NEX,KTM
      IF (N5.EQ.0) GO TO 270
      KT=KTM-KA
  240 IF (AXR.LT.0.0.OR.INDIC.NE.2) GO TO 250
      F1=SQRT(AX1)*SD
      F2=SQRT(AXR)*SD
      WRITE (6,40)KT,F1,F2
      GO TO 260
  250 CONTINUE
      IF (NPRINT.GT.0) WRITE(6,30) KT,AX1,AXR
  260 CONTINUE
      IF (N7.GE.NVEC) GO TO 990
      GO TO 310
  270 N5=1
      KA=KTM
      IF (KTM.LE.KROOTS) GO TO 370
      KDIFF = KTM - KROOTS
  280 FORMAT(  24H ******************         )
      IF (KDIFF.LE.1) GO TO 305
      WRITE (6,280)
      WRITE (6,280)
      WRITE (6,280)
      IF (AXT.EQ.0.0) WRITE(6,300) N,N,N
  300 FORMAT(//' FOR THIS CIRCUMFERENTIAL WAVE NUMBER (N = 'I6,' ), THER
     1E ARE LOWER BUCKLING LOADS OR TIMES WHICH HAVE BEEN MISSED.'/
     2 ' PLEASE USE THE INDIC= -3 OPTION WITH N0B='I6,'  IN ORDER TO FIN
     3D THE MINIMUM CRITICAL LOAD FOR N='I6/'  IT MAY BE NECESSARY TO DO
     4 MORE PREBUCKLING ANALYSIS WITH SMALLER TIME/LOAD INCREMENTS.'//)
      WRITE (6,290)KDIFF,AXT,N
      BLOAD(NTRY) = 0.0
  290 FORMAT( I3,47H EIGENVALUES BETWEEN 0 AND INITIAL SHIFT, AXT=
     1 1PE12.3, 9H FOR N =  I6, 8H WAVES.     )
      WRITE (6,280)
      WRITE (6,280)
      WRITE (6,280)
  305 CONTINUE
      IF (AXT.EQ.0.0) GO TO 370
      IF (KDIFF.EQ.0) GO TO 370
      AXB = 0.0
      GO TO 100
  310 KN=KTM-KA
      IF (KN.LE.N7) GO TO 370
      IF (KN.EQ.1) GO TO 370
  320 IFLAG = IFLAG + 1
  330 FORMAT(//54H IT IS POSSIBLE FOR THIS WAVENUMBER THAT EIGENVALUES
     1        /54H MAY BE CALCULATED OUT OF ORDER OR THAT SOME MAY BE
     1        /54H MISSED.  COMPARE THE NUMBER OF EIGENVALUES IN THE
     1        /54H LOAD RANGE WITH THE NUMBER OF EIGENVALUES ACTUALLY
     1        /25H COMPUTED.                                      //)
      IF (N7.GT.0.OR.IFLAG.GT.10) GO TO 370
      GO TO (340,350,360,360,360,360,360,360,360,360),IFLAG
  340 AXR2 = 0.7*AXR2 + 0.3*AX1
      GO TO 200
  350 AXR2 =0.83*AXR2 + 0.3*AX1
      GO TO 200
  360 AXR2 =0.93*AXR2 + 0.3*AX1
      GO TO 200
C     ***********************
C     INVERSE POWER SECTION:
C     ***********************
  370 MW = 1
      NITT=NITT+NIT
      NIT= 0
      N41 = N4 + 1
      IF (NPRINT.GT.1) WRITE (6,380)N41,N
  380 FORMAT(///53H     BEGIN INVERSE POWER ITERATIONS FOR EIGENVALUE NO
     1 I3,2H, I6,24H  CIRCUMFERENTIAL WAVES.  /)
  390 CALL SOLVE(B,X,IBLK,IDRW(1,5),NGBK,FLOC,DIAG,M3,1)
C
      BIG = 0.0
      SUM = 0.0
      SUM1= SUM2
      SUM2= 0.0
      IF (IDB1.GT.IDF.OR.IPOW.EQ.2) GO TO 480
      BR=2.*ABS(ARQ)
      IHIGH = N4*2*NT
      ILOW = IHIGH - IEND + 1
      ISUB = NEXT
      IF (NEXT.GT.1) CALL GASP(Z,J22,3,IPV2(N4))
      I = IDF + 1
  400 I = I - 1
      IF (I.LT.IDB1) GO TO 470
      IF (NIT*N8.EQ.0) GO TO 410
      BRA=ABS(ROOT(I)-AXR)
      IF (BRA.GT.BR) GO TO 470
  410 CONTINUE
      ISTART = (I-1)*2*NT + 1
  420 IF (ISTART.GE.ILOW.AND.ISTART.LE.IHIGH) GO TO 430
      ISUB = ISUB - 1
      LEGTH = 2*ISAVE1(ISUB)
      CALL GASP(Z,LEGTH,3,IBVC(ISUB))
      IHIGH = ISAVE2(ISUB)*2*NT
      ILOW = IHIGH - ISAVE1(ISUB) + 1
      GO TO 420
  430 CONTINUE
      ILESS = 0
      ISUB1 = ISUB - 1
      IF (ISUB1) 460,460,440
  440 DO 450 K=1,ISUB1
  450 ILESS = ILESS + ISAVE1(K)
  460 IARG = ISTART - ILESS
      CALL ORTHO2(X,Z(IARG),Z(IARG+NT),I,ND,SM)
      GO TO 400
  470 CONTINUE
  480 DO 490 I=1,ND
      BIG = DMAX1(BIG,DABS(X(I)))
      SUM=SUM+X(I)*Y(I)
      SUM2= SUM2+X(I)**2
  490 CONTINUE
      DO 500 I=1,ND
      Y(I)=X(I)/BIG
  500 CONTINUE
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,FLOC)
      SUM2=SUM2/BIG**2
      ARQ2=ARQ
      IF (SUM.NE.0.0) ARQ = SUM1/SUM
      ARQ=-ARQ
      AXG=AXR+ARQ
      DZ1= DZ
      DZ = ARQ-ARQ2
      DARQ2=DARQ
      DZZ = DZ - DZ1
      DARQ = ARQ
      IF (DZZ.NE.0.0) DARQ = ARQ - DZ**2/DZZ
      G = ABS(AXR + ARQ)
      FREQ = SQRT(G)*SD
      IF (NPRT.GT.0) WRITE (6,50)NIT,ARQ,DARQ,FREQ
      ER2=ER
  510 CONTINUE
      ER = 0.0
      ERR = 0.0
      ARX = ARQ + AXR
      FREQ = SQRT(ABS(ARX))/(2.*3.1415927)
      IF (NPRINT.GT.1.AND.INDIC.EQ.2) WRITE (6,600)N,NIT,FREQ
      IF (NPRINT.GT.1.AND.INDIC.NE.2) WRITE (6,520)N,NIT,ARX
  520 FORMAT(18H    CIRC. WAVES,N=  I6,17H,  ITERATION NO.= I3,48H,  EIG
     1ENVALUE (FACTOR TO BE MULT. BY LOAD STEP)=  1PE13.5)
      IF (NPRINT.GT.1) CALL SR100T(2)
      IF (ARX.NE.0.0) ER = ABS((ARQ-ARQ2)/ARX)
      IF (ARX.NE.0.0) ERR= ABS((DARQ-DARQ2)/ARX)
      ER =AMAX1(ER,ERR)
      IF (NIT.LT.4) GO TO 530
      IF (KN.NE.1) GO TO 530
      IF (N4.NE.0) GO TO 530
      IF (ARQ.LT.0.) GO TO 530
      GO TO 320
  530 CONTINUE
      IF (NIT.LE.1) GO TO 590
      IF (ER.GT.EPS2) GO TO 590
      IF (NIT.GT.N9) GO TO 540
      IF (ER.LT.EPS) GO TO 640
  540 IF (ER.LT.EPS1) GO TO 550
      IF (NIT.LT.13) GO TO 590
      IF (ER.LT.0.001) GO TO 610
      IF (ER2.GT.2.*EPS2) GO TO 590
      CC=C3
      GO TO 140
  550 IF (NIT.LT.N9) GO TO 590
      IF (IPOW.GT.0) GO TO 570
      IF (NIT.LT.10) GO TO 560
      GO TO 610
  560 CC=C1
      N8 = N8+1
      IPOW= 1
      GO TO 140
  570 CONTINUE
  580 IF (ER.LT.EPS) GO TO 640
  590 NIT=NIT+1
  600 FORMAT(18H    CIRC. WAVES,N=  I6,17H,  ITERATION NO.=  I3,47H,  EI
     1GENVALUE (FREQUENCY IN CYCLES PER SECOND)=  1PE13.5)
      IF (NIT.LT.MAX) GO TO 390
      IF (ER.GT.EPS1) GO TO 620
  610 CC=C2
      N8=N8+1
      GO TO 140
  620 IF (ER.GT.EPS2) GO TO 630
      CC=C3
      N8=N8+1
      GO TO 140
  630 CC=C4
      GO TO 140
  640 CONTINUE
C     **************************
C     THE ROOT HAS BEEN ACCEPTED
C     **************************
      AROOT=AXR+ARQ
      IF (N4.LE.0) GO TO 680
      RDIFF = ABS(ROOT(1)) - ABS(AXR)
      IF (N4.EQ.1) GO TO 660
      DO 650 I=2,N4
      R1DIFF = ABS(ROOT(I)) - ABS(AXR)
      RDIFF = AMIN1(RDIFF,R1DIFF)
  650 CONTINUE
  660 RRATIO = ABS(ARQ/RDIFF)
      IF (RRATIO.LT.1000.) GO TO 680
      WRITE (6,710)
      WRITE (6,710)
      WRITE (6,710)
      WRITE (6,670)RRATIO
  670 FORMAT(' NEED TO CHECK ROOT BY ADDITIONAL SHIFTS SINCE (AROOT-SHIF
     1T)/MIN(ROOT(I)-SHIFT).GT.1000. IT ='1PE14.1)
      WRITE (6,710)
      WRITE (6,710)
      WRITE (6,710)
      CC = 0.95
      GO TO 140
  680 TOP = AMAX1(TOP,AROOT)
      ADL=AROOT-TOP
      IF (N4.LE.0) GO TO 690
      IF (ABS(TOP-TOP1)-EPS1) 700,700,690
  690 TOP1=TOP
  700 N4  = N4+1
      GM(N4) = 0.0
      FREQ = SQRT(ABS(AROOT))/(2.*3.1415927)
  710 FORMAT(32H ******************************       )
  720 CONTINUE
      IF (INDIC.EQ.2) WRITE (6,730)N4,FREQ,N
      IF (INDIC.NE.2) WRITE (6,740)N4,AROOT,N
  730 FORMAT(//' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3/
     1' FREQUENCY (CPS) =',1PE13.5,',  ',
     1  I6,' CIRCUMFERENTIAL WAVES')
  740 FORMAT(//' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3/
     1'      EIGENVALUE =',1PE13.5,',  ',
     1  I6,' CIRCUMFERENTIAL WAVES')
      CALL SR100T(2)
      ITP3=N4
      NITT=NITT+NIT
      IF (NPRT.EQ.0) GO TO 750
      WRITE (6,60)N4,N3,NITT,AROOT,FREQ
  750 CONTINUE
      NIT=0
      NITT=0
      ROOT(N4)=AROOT
      IPOW=0
      BLOAD(NTRY) = AROOT
      NEIG=0
      N6  =0
      IDF=MIN0( N4, IDIF)
      IF (N4.LE.IDIF) GO TO 770
      DO 760 I=1,IDF1
      SM(I)=SM(I+1)
  760 CONTINUE
  770 CONTINUE
      SUMM= 0.0
      DO 780 J=1,ND
      SUMM=SUMM+X(J)*Y(J)
  780 CONTINUE
      N8=0
      SM(IDF)=SUMM
      IF (ADL) 790,810,810
  790 IF (INDIC.EQ.-1) GO TO 810
      N6 = 1
      NI=N4-IDIF
      IF (NI.LT.1) GO TO 810
      ARR=ABS(ROOT(N4))
      DO 800 I=1,NI
      ER2 = 0.0
      ARX2 = ARR + ABS(ROOT(I))
      IF (ARX2.NE.0.0) ER2 = ABS(ROOT(I)-ROOT(N4))/ARX2
      IF (ER2.LT.0.005) GO TO 890
  800 CONTINUE
  810 N3=0
      J22 = 2*J2
      IF (NEXT.GT.1) CALL GASP(Z,J22,3,IPV2(N4-1))
  820 IPOS = ITOTL + 1
      IENDS = IEND
      IEND = IPOS + 2*NT - 1
      IF (IEND.LE.(2*NT)) GO TO 830
      IENDS2 = 2*IENDS
      CALL GASP(Z,IENDS2,1,IBVC(NEXT))
      ITOTL = 0
      ISAVE1(NEXT) = IENDS
      ISAVE2(NEXT) = N4-1
      NEXT = NEXT + 1
      GO TO 820
  830 CONTINUE
      DO 840 I=1,NT
      J1 = IPOS + I - 1
      J2 = IPOS + NT + I - 1
      Z(J1) = Y(I)
  840 Z(J2) = X(I)
      J2 = IPOS + 2*NT - 1
  850 CALL GASP(Y,NTOT,1,IVEC(N4,NTRY))
      ITOTL = ITOTL + 2*NT
      J22 = 2*J2
      IF (NEXT.GT.1) CALL GASP(Z,J22,1,IPV2(N4))
      IF (INDIC.NE.2) GO TO 870
      DO 860 I=1,ND
  860 GM(N4) = GM(N4) + X(I)*Y(I)
  870 CONTINUE
      N3=0
      IF (AROOT.GT.AX2) GO TO 980
      IF (AROOT.GE.AX1.OR.INDIC.EQ.-1) GO TO 880
      AXR2=AX1-1.5*AROOT
      GO TO 200
  880 CONTINUE
      IF (INDIC.EQ.-1) GO TO 900
      IF (AROOT) 910,900,900
C     THIS IS A PREVIOUSLY COMPUTED ROOT.  REJECT IT.
  890 N4  =N4-1
      NEIG=0
      GO TO 950
  900 N7=N7+1
      N3=0
      MW=2
      ART = AROOT
      GO TO (510,920),MW
  910 N6=1
  920 IF (N7.LT.NVEC) GO TO 940
  930 CONTINUE
      AXR2=1.0003*AROOT
      AXR=AXR2
      GO TO 230
  940 CONTINUE
      NEIG=0
      CALL URNDM(0,ND,Y)
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,FLOC)
      GO TO 370
  950 AXR= TOP-ADL*0.85
      GO TO 210
  960 N5=N7+1
      WRITE (6,970)N5,ER,AXR
  970 FORMAT(//23H THE ITERATION FOR ROOT    I4,12H HAS FAILED.,
     1      ///21H FINAL VALUE OF ER = , E15.8
     2        / 21H FINAL VALUE OF AXR=  , E15.8 ///)
      GO TO 1030
  980 IF (AX2.EQ.0.0) GO TO 990
      WRITE (6,70)
  990 CONTINUE
      NVEC = N4
      IF (N.EQ.NMINB) GO TO 1000
      AXBSS = AXBS
 1000 I = 0
 1010 I = I + 1
      IF (I.GT.N4.OR.INDIC.EQ.-1) GO TO 1030
      IF (ROOT(I).GT.0.) GO TO 1020
      GO TO 1010
 1020 AXBS = ROOT(I)
      IF (N.EQ.NMINB) AXBSS = 2.*AXBS - AXB
      AXB = AXBS + AXBS - AXBSS
      IF (AXB.LT.0.) AXB = 0.0
 1030 IF (NPRINT.GT.1) WRITE (6,1040)
 1040 FORMAT(//27H LEAVING SUBROUTINE EBAND2.  )
      RETURN
      END
C=DECK      ORTHO2
      SUBROUTINE ORTHO2(X,Y,Z,I,ND,SM)
C
C
C     CALLED FROM EBAND2, WHOSE TRACE IS BUCKLE, MAIN
C     PERFORMS ORTHOGONALIZATION CORRESPONDING TO THE EIGENVALUE
C     PROBLEM    A*X  - OMEGA**2*B*X  = 0
C
      DOUBLE PRECISION X,Y,Z,SM,SUM,SUM2,SF
      DIMENSION Z(*),SM(50)
      COMMON/ORTA/IFLGG,KTM,KROOTS
      DIMENSION Y(*),X(*)
   10 FORMAT (5H0  I=  I3,6H, Y*Z= E16.7,6H,X*Z= E16.7,6H, X*X=  E16.7)
      SUM2=0.
      SUM=0.
      DO 20 J=1,ND
      IF(IFLGG.GT.0) SUM2=SUM2+X(J)*X(J)
   20 SUM = SUM +X(J)*Z(J)
      SF=SUM/SM(I)
      DO 30 J=1,ND
   30 X(J)=X(J)-SF*Y(J)
      IF(IFLGG.EQ.0) RETURN
      S0=SM(I)
      S1=SUM
      S2=SUM2
      WRITE (6,10)I,S0,S1,S2
      RETURN
      END
C=DECK      VEC
      SUBROUTINE VEC(IZERO,A,X,Y,NBLK,IBLK,KEQ,FLOC)
C
C     CALLED FROM EBAND,EBAND2, AND EIGEN IN THE BUCKLE OVERLAY
C     PERFORMS MULTIPLICATION OF A MATRIX TIMES A VECTOR FOR
C     MATRICES WHICH ARE STORED IN BLOCKS ON DISK
C     CALCULATIONS GIVE . .    Y = Y*IZERO  + A*X
      DOUBLE PRECISION A,X,Y
      DIMENSION X(*),Y(*),A(*),KEQ(*),FLOC(*),IBLK(*)
      IF (IZERO.NE.0) GO TO 20
      N=KEQ(NBLK)
      DO 10 I=1,N
   10 Y(I)=0.
   20 I1 = 1
      DO 50 I=1,NBLK
      I2=KEQ(I)
      NW = FLOC(I2)*2.
      IF (NBLK.GT.1) CALL GASP(A,NW,3,IBLK(I))
      K1=1
      DO 40 J=I1,I2
      K2 = FLOC(J)
      FKL= FLOAT(J) - FLOC(J)
      KL = FKL
      DO 30 K=K1,K2
      Y(K+KL) = Y(K+KL) + X(J)*A(K)
   30 Y(J)=Y(J)+X(K+KL)*A(K)
      Y(J) = Y(J) - X(J)*A(K2)
   40 K1=K2+1
   50 I1=I2+1
      RETURN
      END
