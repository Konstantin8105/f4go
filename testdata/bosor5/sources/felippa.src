C$FORTRAN           CMATCH       
      logical function  CMATCH
     $              (key1, key2)
      character*(*) key1, key2
      character     ch1, ch2
      integer       i, j, root
      i =        0
      root =     1
      CMATCH =   .TRUE.
      do 2000   j = 1,len(key2)
        ch2 =      key2(j:j)
        if (ch2 .eq. '^')                then
          root =   0
          go to 2000
        end if
        if (ichar(ch2) .ge. ichar('a') .and.
     $      ichar(ch2) .le. ichar('z'))       then
          ch2 =    char(ichar(ch2)-(ichar('a')-ichar('A')))
          root =   0
        end if
        ch1 =    ' '
        i =      i + 1
        if (i .le. len(key1))            ch1 = key1(i:i)
        if (ch1 .eq. ' ' .and. root .eq. 0)  return
        if (ch1 .eq. '*')                return
        if (ch1 .eq. '%')                ch1 = ch2
        if (ch1 .ne. ch2)                then
          CMATCH =   .FALSE.
          return
        end if
        if (ch2 .eq. ' ')              return
 2000   continue
      return
      end
C$FORTRAN           GETLIN       
      subroutine     GETLIN
     $               (unit, line, nch)
      character*(*)  line
      integer        unit, nch, LENETB
      line =   ' '
      if (unit .eq. 0)                 then
        read (*,'(A)',err=5000)    line
      else
        read (unit,'(A)',err=5000,end=5000)  line
      end if
      nch =       LENETB (line)
      return
 5000 nch =       -1
      return
      end
C$FORTRAN           GETTOK       
      subroutine     GETTOK (s, j, uc, token, n)
      character*(*)  s, token
      character      ch
      integer        i, j, m, n, uc
      token =     ' '
      n  =       0
      i =        j
 2000   i =        i + 1
        if (i .gt. len(s))             return
        j =        i
        ch =       s(i:i)
        if (ch .eq. ' ' .or. ch .eq. ',')  go to 2000
        if (ch .eq. '/')               go to 3200
 3000   continue
        ch =       s(i:i)
        if (ch .eq. ' ' .or.
     $      ch .eq. ',' .or.
     $      ch .eq. '/')               return
 3200   continue
        if (n .lt. len(token))         then
          n =        n + 1
          if (uc .eq. 1)               then
          if (ichar(ch) .le. ichar('z') .and.
     $        ichar(ch) .ge. ichar('a'))
     $              ch = char(ichar(ch)-(ichar('a')-ichar('A')))
          end if
          token(n:n) = ch
        end if
        j =        i
        i =        i + 1
        if (i .le. len(s))              go to 3000
      return
      end
C$FORTRAN           HELPER       
      subroutine    HELPER
     $       (hfname, topics, ntopic, prtunt, screen, ierr)
      character     hfname*(*), topics(*)*(*)
      character     line*80, sentin, token*24, topic*8
      integer       ntopic, prtunt, screen, ierr
      integer       i, j, k, m, n, s
      integer       currlv, nchlin, treelv
      integer       hfline, hlpinp, hlpout, kprint
      logical       masked, prtall
      integer       LENETB
      logical       CMATCH, HMATCH
      integer       HUNIT
      parameter    (HUNIT=33)
      character     UPTREE, DNTRE1, DNTRE2
      character     ENDSEC, NEXTOP, INF, MORINF
      parameter    (UPTREE='>', DNTRE1='<', DNTRE2=':')
      parameter    (ENDSEC='*', NEXTOP='?', INF='.', MORINF='!')
      data          hlpinp /HUNIT/
      hfline =   -1
      ierr =     0
      open (unit=hlpinp, file=hfname, status='OLD',
     $      err=6000)
#if rs6k
      rewind(hlpinp)
#endif
      currlv =   0
      treelv =   -1
      hfline =   0
      hlpout =   prtunt
      kprint =   0
      s =        screen
      prtall =   .false.
      if (ntopic .ge. 1 .and.
     $    topics(1)(1:2) .eq. '**')       then
        prtall =   .true.
        currlv =   ntopic
        s =        0
      end if
      masked =   prtall
 1000   continue
        call      GETLIN (hlpinp, line, nchlin)
        hfline =  hfline + 1
        if (nchlin .lt. 0)                then
          if (kprint .eq. 0)              go to 6200
          close (hlpinp)
          return
        end if
        sentin =  line(1:1)
        if (sentin .eq. DNTRE1 .or.
     $      sentin .eq. DNTRE2)           then
          treelv =   treelv - 1
          if (treelv .lt. -1)             go to 6400
        else if (sentin .eq. UPTREE)      then
          treelv =   treelv + 1
          if (treelv .eq. currlv .or. prtall) then
            j =      index(line,' ')
            call     GETTOK (line(1:nchlin), j, 1, token, n)
            if (n .le. 0)                 go to 6600
            if (treelv .eq. 0)            then
              line =    ' <'//token(1:n)//'>'
              call      PUTLIN (hlpout, line, n+3)
              topic =   token
            end if
            n =      min(8,n)
            if (CMATCH (topic, token(1:n)) .or. prtall)  then
              if (currlv .eq. ntopic)      then
                m =      1
                call     HPRINT (hlpinp, hlpout, s, m, line, hfline)
                kprint =  kprint + 1
                if (.not. masked)          then
                  close (hlpinp)
                  return
                end if
                go to 1000
              end if
              topic =   topics(currlv+1)
              do 2100  i = 1,8
                if (topic(i:i) .eq. '*' .or.
     $              topic(i:i) .eq. '%')   masked = .true.
 2100           continue
              if (HMATCH (hlpinp, topic, line, hfline)) then
                currlv =   currlv + 1
              else
                if (masked .and.
     $              currlv .lt. ntopic)     go to 1000
                line =    '0   Sorry.  No documentation on'
                k =        32
                do 2500  i = 1,ntopic
                  line(k+2:) =  topics(i)
                  k =    min (LENETB(line),78)
 2500             continue
                call     PUTLIN (hlpout, line(1:k), 0)
                m =      2
                call     HPRINT (hlpinp, hlpout, s, m, line, hfline)
                close (hlpinp)
                return
              end if
            end if
          end if
        end if
        go to 1000
 5000 continue
 6000 line =   ' *HELPER* Can''t open file '//hfname
      go to 8000
 6200 line =   ' *HELPER* Help file inconsistency on given topics'
      go to 8000
 6400 write (line,'(A,I6,A)') ' *HELPER* Unbalanced help tree: '//
     $                      'check line', hfline, ' of help file'
      go to 8000
 6600 write (line,'(A,I6,A)') ' *HELPER* Line ',hfline,
     $                        ' of help file has no label'
      go to 8000
 8000 continue
      call     PUTLIN (hlpout, line, 0)
      if (hfline .ge. 0)              close (hlpinp)
      ierr =   hfline
      return
      end
C$FORTRAN           HMATCH       
      logical function HMATCH
     $               (inp, key, line, kline)
      character      line*80, key*8
      character      token*8
      integer        inp, kline
      integer        j, k, n
      logical        CMATCH
      character     UPTREE, DNTRE1, DNTRE2
      character     ENDSEC, NEXTOP, INF, MORINF
      parameter    (UPTREE='>', DNTRE1='<', DNTRE2=':')
      parameter    (ENDSEC='*', NEXTOP='?', INF='.', MORINF='!')
      HMATCH =  .false.
 1000   continue
        call      GETLIN (inp, line, n)
        kline =   kline + 1
        if (n .lt. 0 .or.
     $      line(1:1) .ne. NEXTOP)     return
        j =     2
 2000     continue
          call     GETTOK (line, j, 1, token, k)
          if (k .gt. 0)                then
            if (CMATCH (key, token(1:k))) then
              HMATCH = .true.
              return
            end if
            go to 2000
          end if
        go to 1000
      end
C$FORTRAN           HPRINT       
      subroutine     HPRINT
     $               (inp, out, screen, what, line, kline)
      character*80   line
      character      ans
      integer        inp, out, screen, what, kline
      integer        k, m, n
      character     UPTREE, DNTRE1, DNTRE2
      character     ENDSEC, NEXTOP, INF, MORINF
      parameter    (UPTREE='>', DNTRE1='<', DNTRE2=':')
      parameter    (ENDSEC='*', NEXTOP='?', INF='.', MORINF='!')
      k =      -1
 1000   continue
        call      GETLIN (inp, line, n)
        kline =   kline + 1
        if (n .lt. 0)                  return
        m =       0
        if (line(1:1) .eq. INF)        m = 1
        if (line(1:1) .eq. MORINF)     m = 2
        if (m .lt. what)               then
          if (k .ge. 0)                then
          if (line(1:1) .eq. ENDSEC .or.
     $        line(1:1) .eq. DNTRE1 .or.
     $        line(1:1) .eq. DNTRE2)   return
          end if
          go to 1000
        end if
        line(1:1) =  ' '
        if (screen .gt. 0 .and.
     $      out .eq. 0 .and.
     $      k .ge. screen)             then
          print '('' More?'',$)'
          read  '(A)',  ans
          if (ans .eq. 'N' .or. ans .eq. 'n') return
          k =      0
        end if
        call      PUTLIN (out, line, n)
        k =       k + 1
        go to 1000
      end
C$FORTRAN           LENETB       
      integer function LENETB
     $              (c)
      character*(*) c
      integer       i
      LENETB =  len(c)
      do 2000  i = len(c),1,-1
        if (c(i:i) .ne. ' ')         return
        LENETB =  i-1
 2000   continue
      return
      end
C$FORTRAN           PUTLIN       
      subroutine     PUTLIN
     $               (unit, line, nch)
      character*(*)  line
      integer        unit, nch, n
      n =      nch
      if (n .le. 0)                    n = len(line)
      if (unit .eq. 0)                 then
        write (*,'(A)',err=5000)       line(1:n)
      else
        write (unit,'(A)',err=5000)    line(1:n)
      end if
      return
 5000 continue
      return
      end
