C=DECK      PRE33LIB
C
C  THIS IS THE PRE33 LIBRARY (SOURCE FILE)
C
C
C
C=DECK      PRE33
      SUBROUTINE PRE33
C
C  200-SEGMENT VERSION OF BOSOR5
C
C     OVERLAY(5,0)       (CDC VERSION)
C     PROGRAM PRE33      (CDC VERSION)
C
      DIMENSION T(900),TTT(1000)
C BEG AUG 2005
      COMMON/EPSEFX/EPSMAX(201,100,1),EPSMXX(201)
C END AUG 2005
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/SMODE/IPMODE(99),ICMODE(99),ISMODE(99),IQMODE(99),IHMOD(99)
      COMMON/DEFM/EPEX1,EPEX2,FKEX1,FKEX2,JUP,IPLS(1),AT1
      COMMON/FANDD/ALPHA1,ALPHA2,TTURE,F1,F2,IHINGE,ITEST
      COMMON/FDATA/S25,ECOEF,S26
      COMMON/MDATA/MP,E,U,U1,S24,S23,E11,E12,E22,EALP1,EALP2
      COMMON/TTTHK/TP(10),ZP(10),NTHICK,ZREF
      COMMON/ZGRAD/NTSGD
      COMMON/IBUKKK/IBUCKL
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/IGOVN/ITTURE(201),IDEPTH(201),IREFZ(201),ILONG
      COMMON/      /B(160000)
      COMMON/RLSTAT/LSTAT,KRSEG,KRING,BET(99),BETS(99),WS(99),WSS(99)
      COMMON/SHEL/IWAL(201)
      COMMON/IFLOWS/IFLOW,ICREEP,IJNCT,IJNTB,ITSTOR,ITHSTR,IZSTOR,IBSTOR
      COMMON/INSTAB/INDIC
      COMMON/TIMLFT/MARGIN,NBEGIN
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/ITERS/ITER
      COMMON/THERWD/NWORD(201),NPLAST(201),NCREEP(201),NMAT(201),
     1              NALRED(201)
      COMMON/RINDEX/JBEGIN,KBEGIN,LBEGIN,KSEGS
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/TLOADS/FTLOAD(100,2),NTIME(11),ITIME
      COMMON/TOMER/TOME,DTIME
      COMMON/AUXSTO/IDD,ISER,ILAST,ICUR,ISTAT
      COMMON/NBGSTP/NBEG(201),NSTOPP(201),INTVAL(201)
      COMMON/IDEFOM/INDEXX
      COMMON/IDEIG/IVEC(50),NTRY
      COMMON/ECFFI/TPAST(100)
      COMMON/ITOTLL/ITOTL,PLPNT(2000,2),E1MAX,E2MAX
      COMMON/IDHIGH/IDMAX
      DIMENSION BB(650),IBB(650)
      EQUIVALENCE (BB(1),IBB(1))
      common/case/casename
      character*28 casename
      character*32 fname
      integer stofile
      logical exists
C
C     HOW THE WORKING SPACE STORAGE, B(     ), IS ALLOCATED...
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    I2 = NUMBER OF 'MESH' POINTS IN ENTIRE STRUCTURE
C    IPRE = NUMBER OF DIFFERENT KINDS OF VARIABLES STORED FOR EACH RING
C    NTOT = TOTAL NUMBER OF DISCRETE RINGS IN STRUCTURE
C    ITSTOR = NUMBER OF QUANTITIES NEEDED FOR TEMPERATURE CALLOUTS,SHELL
C    ITHSTR = NUMBER OF QUANTITIES NEEDED FOR THICKNESS SPECIFICATION
C    IZSTOR = NUMBER OF QUANTITIES NEEDED FOR REF. SURFACE SPECIFICATION
C    ILONG = NUMBER OF STATIONS WHERE YIELD STRESS, EFFECTIVE PLASTIC
C            STRAIN, PLASTIC AND CREEP STRAIN COMPONENTS ARE SAVED
C    LBEGIN = NUMBER OF PLACES IN DISCRETE RINGS WHERE YIELD STRESS,
C             EFFECTIVE PLASTIC STRAIN, AND CREEP STRAIN ARE STORED
C
C/10*I2/4*I2-/IPRE*NTOT/--I2-/--I2-/4*I2-/4*I2-/ITSTOR/ITHSTR/IZSTOR/
C/--C--/THERM/--RING---/-FK1-/-FK2-/--E1-/-E1S-/TSTORE/THSTOR/ZSTORE/
C/B(1)-/B(N1)/--B(N2)--/B(N3)/B(N4)/B(N5)/B(N6)/B(N7)-/B(N8)-/B(N9)-/
C1     N1    N2        N3    N4    N5    N6    N7     N8     N9    N10
C
C     CONTINUE ON NEXT LINE...
C
C /--I2--/ILONG-/ILONG-/----2*ILONG----/----2*ILONG----/LBEGIN/
C /---S--/SBBAR-/EPBAR-/EP(1,K),EP(2,K)/EC(1,K),EC(2,K)/SIGMA0/
C /B(N10)/B(N11)/B(N12)/----B(N13)-----/-----B(N14)----/B(N15)/
CN10    N11    N12    N13             N14             N15    N16
C
C     CONTINUE ON NEXT LINE
C
C /LBEGIN/LBEGIN/ILONG-/-3*I2-/
C /-EPS0-/EPCREP/ECBAR-/CSHEAR/
C /B(N16)/B(N17)/B(N18)/B(N19)/
CN16    N17    N18    N19
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     B(1)     CONSTITUTIVE LAW COEFFICIENTS, C(I,J)
C   N1    B(N1)    NEGATIVE OF PLASTIC+CREEP+THERMAL STRAINS INTEGRATED
C                  THROUGH SHELL WALL THICKNESS. LIKE THERMAL STRESS AND
C                  MOMENT RESULTANTS.
C   N2    B(N2)    DISCRETE RING VARIABLES, SUCH AS ECCENTRICITIES AND
C                  EP+EC+ET ('THERMAL STRAINS') INTEGRATED OVER RING
C                  CROSS-SECTION AREA, AND EA, EIX, EIY, ETC...
C   N3    B(N3)    MERIDIONAL CURVATURE, 1/R1
C   N4    B(N4)    CIRCUMFERENTIAL CURVATURE, 1/R2
C   N5    B(N5)    REF. SURF. STRAINS AND CURVATURE CHANGES, THIS STEP
C   N6    B(N6)    REF. SURF. STRAINS AND CURVATURE CHANGES, LAST STEP
C   N7    B(N7)    SHELL WALL TEMPERATURE CALLOUTS
C   N8    B(N8)    SHELL WALL THICKNESS CALLOUTS
C   N9    B(N9)    SHELL WALL REFERENCE SURFACE POSITION CALLOUTS
C   N10   B(N10)   MERIDIONAL ARC LENGTH, S
C   N11   B(N11)   YIELD STRESSES EVERYWHERE IN ENTIRE STRUCTURE
C   N12   B(N12)   EFFECTIVE PLASTIC STRAIN EVERYWHERE IN SHELL STRUCT.
C   N13   B(N13)   PLASTIC STRAIN COMPONENTS EVERYWHERE IN SHELL WALL
C   N14   B(N14)   CREEP STRAIN COMPONENTS EVERYWHERE IN SHELL WALL
C   N15   B(N15)   YIELD STRESSES EVERYWHERE IN DISCRETE RINGS
C   N16   B(N16)   PLASTIC STRAINS EVERYWHERE IN DISCRETE RINGS
C   N17   B(N17)   CREEP STRAINS EVERYWHERE IN DISCRETE RINGS
C   N18   B(N18)   EFFECTIVE CREEP STRAIN IN SHELL SEGMENTS
C   N19   B(N19)   CONSTITUTIVE LAW COEFFICIENTS C33, C36, C66 EVERY-
C                  WHERE IN SHELL WALL.
      IF (IFLOW.NE.0) INDEXX = 1
      IFLOW = 0
      N1 = 10*I2 + 1
      N2 = N1 + 4*I2
      N3 = N2 + IPRE*NTOT
      N4 = N3 + I2
      N5 = N4 + I2
      N6 = N5 + 4*I2
      N7 = N6 + 4*I2
      N8 = N7 + ITSTOR
      N9 = N8 + ITHSTR
      N10 = N9 + IZSTOR
      N11 = N10 + I2
      N12 = N11 + ILONG
      N13 = N12 + ILONG
      N14 = N13 + 2*ILONG
      IF (ICREEP.EQ.0) N14 = N13
      N15 = N14 + 2*ILONG
      N16 = N15 + LBEGIN
      N17 = N16 + LBEGIN
      N18 = N17 + LBEGIN
      N19 = N18 + ILONG
      IF (ICREEP.EQ.0) N19=N18
      NLONG1 = IBSTOR + I2
      CALL GASP(B(N7),NLONG1,3,IWAL(3))
      NLONG2 = 7*ILONG + 3*LBEGIN
      IF(ICREEP.EQ.0) NLONG2 = 4*ILONG + 3*LBEGIN
      IARG = KSTEP - 1
      IF (IARG.EQ.0) IARG = 1
      CALL GASP(B(N11),NLONG2,3,ISMODE(IARG))
      I3 = 3*I2
      CALL GASP(B(N19),I3,3,IHMOD(IARG))
    5 CONTINUE
      INOWKK = 1
      ITOTL = 0
      KRSEG = 0
      LSTAT = 1
      KRING = 1
      DO 7 J = 1,2
      DO 7 I = 1,2000
    7 PLPNT(I,J) = 0
      E1MAX = 0.
      E2MAX = 0.
C
      DO 40 J=1,NSEG
      JTEST = MOD(KSTEP,INTVAL(J))
      INOW = ITTURE(J)
      INOWH = IDEPTH(J)
      INOWZ = IREFZ(J)
      I5I = I5(J)
      IPOS = 10*ITOTL + 1
      IPOS1 = 4*ITOTL + N1
      IPOS2 = 3*ITOTL + N19
      IPOS3 = 4*ITOTL + N5
      IPOS4 = 4*ITOTL + N6
      IARG1 = N3 + ITOTL
      IARG2 = N4 + ITOTL
      IARG3 = INOW + N7 - 1
      IARG4 = INOWH + N8 - 1
      IARG5 = INOWZ + N9 - 1
      IARG6 = N10 + ITOTL
      DO 20 I=1,I5I
C BEG AUG 2005
      EPSMAX(J,I,1) = 0.0
      EP1DSM = 0.
      EP1D = 0.
C END AUG 2005
      IF (NPLAST(J).EQ.0) GO TO 10
      K1 = IPOS3 + I - 1
      KK1= IPOS4 + I - 1
      K2 = IPOS3 + I5I + I - 1
      KK2= IPOS4 + I5I + I - 1
      K3 = IPOS3 + 2*I5I + I - 1
      KK3= IPOS4 + 2*I5I + I - 1
      K4 = IPOS3 + 3*I5I + I - 1
      KK4= IPOS4 + 3*I5I + I - 1
      INOWK2 = 2*INOWKK - 1
      IARG7 = N11 + INOWKK - 1
      IARG8 = N12 + INOWKK - 1
      IARG9 = N13 + INOWK2 - 1
      IARG10 = N14 + INOWK2 - 1
      IARG11 = N18 + INOWKK - 1
      CALL PLAST(J,I,I5I,INTTOT,T,TTT,B(IPOS),B(IPOS1),B(N2),B(IARG1),
     1 B(IARG2),B(K1),B(K2),B(K3),B(K4),B(KK1),B(KK2),B(KK3),B(KK4),
     2 B(IARG3),B(IARG4),B(IARG5),B(IARG6),B(IARG7),B(IARG8),B(IARG9),
C BEG AUG 2005
     3 B(IARG10), B(N15),B(N16),B(N17),B(IARG11),B(IPOS2),EP1DSM,EP1D)
C END AUG 2005
      INOWKK = INOWKK + INTTOT
   10 CONTINUE
   20 CONTINUE
      IF (NPLAST(J).EQ.0) GO TO 30
      IF (ITER.NE.1) GO TO 30
      IF (JTEST.NE.0) GO TO 30
      CALL PRNTC(J,B(IPOS),B(IPOS2),I5I,IFLOW,INDEXX)
   30 CONTINUE
      ITOTL = ITOTL + I5I
   40 CONTINUE
      NLONG = 14*I2 + IPRE*NTOT
      IF (IFLOW.EQ.0) CALL GASP(B(1),NLONG,1,ICMODE(KSTEP))
      IF (ITER.NE.1) GO TO 120
      IARG = KSTEP + 50
      IF (IFLOW.EQ.1) CALL GASP(B(1),NLONG,1,ICMODE(IARG))
      IF (IFLOW.EQ.0) CALL GASP(B(N11),NLONG2,1,ISMODE(KSTEP))
      IF (IFLOW.EQ.0) CALL GASP(B(N19),I3,1,IHMOD(KSTEP))
      IF (INDEXX.EQ.0) GO TO 45
      INDEXX = 0
      IFLOW = 1
      GO TO 5
   45 CONTINUE
   50 FORMAT( /40H ***********************************          )
C     WRITE(6,50)
C     WRITE(6,60)KSTEP,IPMODE(KSTEP),ICMODE(KSTEP),ISMODE(KSTEP),IQMODE(
C    1KSTEP),IHMOD(KSTEP)
   60 FORMAT(8H KSTEP = I3,18H  IPMODE(KSTEP) =  I8,
     1 18H  ICMODE(KSTEP) =  I8, 18H  ISMODE(KSTEP) =  I8/
     2 13X, 17H IQMODE(KSTEP) =  I8, 17H  IHMOD(KSTEP) =     I8)
C     NOW STORE THE NEW VALUES OF ISER,...ETC.
      IBB(1) = IDD
      IBB(2) = ISER
      IBB(3) = IDMAX
      IBB(4) = ICUR
      IBB(5) = ISTAT
      DO 70 I = 1,495
      IP = I + 5
   70 IBB(IP) = IPMODE(I)
      DO 75 I = 1,50
      IP = I + 500
   75 IBB(IP) = IVEC(I)
      DO 76 I = 1,100
      IP = I + 550
   76 BB(IP) = TPAST(I)
c
      stofile = 9
      fname = casename(1:index(casename, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=stofile, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(stofile)
#endif
      else
	OPEN(UNIT=stofile, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL STORCM
      close(stofile)
c
      WRITE (6,80)KSTEP,TOME
   80 FORMAT(//67H ALL INFORMATION HAS BEEN STORED UP TO AND INCLUDING
     1TIME STEP NO.    I3,17H. CURRENT TIME =      1PE12.3/)
      KKTEST = 0
      IF (MARGIN.EQ.0) GO TO 90
C     KKTEST = MXTIME(MARGIN)
   90 NT1 = NTIME(1)
      TMAX = FTLOAD(NT1,2)
      IF (TOME.GE.TMAX.OR.KKTEST.NE.0) GO TO 100
      GO TO 120
  100 CONTINUE
      WRITE (6,50)
      WRITE (6,50)
      WRITE (6,110)
  110 FORMAT(68H CALLING EXIT BECAUSE OF MAX TIME OR TIME RANGE EXCEEDED
     1.                                                                )
      WRITE (6,50)
      WRITE (6,50)
      CALL EXIT
  120 CONTINUE
      RETURN
C     RETURN CARD NOT NEEDED IN CDC VERSION
      END
C=DECK      PLAST
      SUBROUTINE PLAST(IS,I,I5,INTTOT,T,TTT,C,THERM,RING,CK1,CK2,E1,E2,
     1K1,K2,EST1,EST2,FKST1,FKST2,TSTORE,THSTOR,ZSTORE,S,SBBAR,EBARP,EP,
C BEG AUG 2005
     2 EC,SIGMA0,EPS0,EPCREP,EBARC,CSHEAR,EP1DSM,EP1D)
C END AUG 2005
      REAL K1, K2
      DIMENSION C(I5,10),THERM(I5,4),T(I5,9),ZR(100),TSTORE(*)
      DIMENSION CSHEAR(I5,3),RING(*),SIGMA0(*),EPS0(*),EPCREP(*)
      DIMENSION SBBAR(*),EBARP(*),EP(2,*),EC(2,*),CK1(*),CK2(*)
      DIMENSION THSTOR(*),ZSTORE(*),TAXIAL(11,20),ITVAL(20)
      DIMENSION TPOINT(20),TTT(I5,10),S(I5),ITIN(20)
      DIMENSION DC(11,13),DTHERM(11,4),EBARC(*)
      DIMENSION MTEMP(10),MPROP(10),IZIN(20)
      DIMENSION SGEFT(20),EPEFT(20),ETANT(20)
C BEG AUG 2005
      COMMON/EPSEFX/EPSMAX(201,100,1),EPSMXX(201)
C END AUG 2005
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/RLSTAT/LSTAT,KRSEG,KRING,BET(99),BETS(99),WS(99),WSS(99)
      COMMON/TEMTUR/TEMP(201),P(201)
      COMMON/RPLST5/NTYP(99),NPARTS(99)
      COMMON/DEFM/EPEX1,EPEX2,FKEX1,FKEX2,JUP,IPLS(1) ,AT1
      COMMON/FANDD/ALPHA1,ALPHA2,TTURE,F1,F2,IHINGE,ITEST
      COMMON/FDATA/ S25,ECOEF,S26
      COMMON/MDATA/MP,E,U,U1,S24,S23,E11,E12,E22,EALP1,EALP2
      COMMON/IBUNCH/INOW,INOWH,INOWZ,MPROPX,NANR,NSME,NQ1,NQ2,NQ3,ICHNGE
      COMMON/THERWD/NWORD(201),NPLAST(201),NCREEP(201),NMAT(201),
     1              NALRED(201)
      COMMON/MATPRO/EPEFF(20,9),SGEFF(20,9),NITEG(9),EE(9),FNUE(9),AP(9)
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/ITERS/ITER
      COMMON/TTTHK/TP(10),ZP(10),NTHICK,ZREF
      COMMON/ZGRAD/NTSGD
      COMMON/IBUKKK/IBUCKL
      COMMON/IFLOWS/IFLOW,ICREEP,IJNCT,IJNTB,ITSTOR,ITHSTR,IZSTOR,IBSTOR
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/NBGSTP/NBEG(201),NSTOPP(201),INTVAL(201)
      COMMON/CDATA/TFLOOR,CREEPN(9),CREEPM(9),CREEPA(9),CREEPB(9)
      COMMON/ORTHP/AL1(20),AL2(20),EXX(20),EYY(20),FNUXY(20),GS(20)
      COMMON/ITOTLL/ITOTL,PLPNT(2000,2),E1MAX,E2MAX
      JTEST = MOD(KSTEP,INTVAL(IS))
      FK1 = CK1(I)
      FK2 = CK2(I)
      G12 = 0.0
      NQ2 = 0
      NQ3 = 0
      JUP = 10
      NTSGD = 0
      DO 20 J=1,4
   20 THERM(I,J) = 0.0
      DO 30 J=1,JUP
   30 C(I,J) = 0.0
      IF (ITER.NE.1) GO TO 50
      DO 40 J=1,3
   40 CSHEAR(I,J) = 0.0
   50 CONTINUE
      IF (I.GT.1) GO TO 440
      S23 = SQRT(2.)/3.
      S26 = 2./SQRT(3.)
      KK = 0
      NTHICK = NWORD(IS)/10000000
      N2 = NTHICK * 10000000
      NTSTAT = (NWORD(IS)      - N2)/100000
      N3 = NTSTAT*100000
C  BUG FOUND AUG. 25, 1986:  1000 CHANGED TO 2000 (SEE GEOM.NEW, NFACTS)
      NZIN =(NWORD(IS)      - N2 - N3)/2000
      N4 = NZIN*2000
C  END AUG 25, 1986 BUG
      NTIN = (NWORD(IS)      - N2 - N3 - N4)/10
      LAYERS = NWORD(IS)      - N2 - N3 - N4 - NTIN*10
      IF (NTSTAT.EQ.0) GO TO 130
      KUP1 = 2*(NTHICK-1) + 1
      IF(NTHICK.EQ.1) KUP1 = 2
      KK = 0
      DO 70 K=1,NTSTAT
      DO 60 J=1,KUP1
      KK = KK + 1
      TAXIAL(J,K) = TSTORE(KK)
   60 CONTINUE
   70 CONTINUE
      KUP = KUP1 - 1
      DO 80 K=1,NTSTAT
   80 ITVAL(K) = TAXIAL(KUP1,K) + .01
      IF (NQ2.EQ.3) WRITE (6,90)(ITVAL(K),K=1,NTSTAT)
   90 FORMAT(//' ITVAL=' 20I5)
      DO 120 K=1,KUP
      DO 100 L=1,NTSTAT
  100 TPOINT(L) = TAXIAL(K,L)
      IF (NQ2.EQ.3) WRITE (6,110)(TPOINT(L),L=1,NTSTAT)
  110 FORMAT(//' TEMP=' 1P11E11.2)
      CALL FINDZ(NTSTAT,ITVAL,TPOINT,I5,TTT(1,K),S)
  120 CONTINUE
      GO TO 130
  130 CONTINUE
      KCUP1 = LAYERS + 1
      KK = 0
      DO 150 K=1,NTIN
      DO 140 J=1,KCUP1
      KK = KK + 1
      TAXIAL(J,K) = THSTOR(KK)
  140 CONTINUE
  150 CONTINUE
      KCUP = LAYERS
      DO 160 K=1,NTIN
  160 ITIN(K) = TAXIAL(KCUP1,K) + .01
      IF (NQ2.EQ.3) WRITE (6,170)(ITIN(K),K=1,NTIN)
  170 FORMAT(' ITIN=' 20I5)
      DO 200 K=1,KCUP
      DO 180 L=1,NTIN
  180 TPOINT(L) = TAXIAL(K,L)
      IF (NQ2.EQ.3) WRITE (6,190)(TPOINT(L),L=1,NTIN)
  190 FORMAT(//' THCK=' 1P11E11.2)
      CALL FINDZ(NTIN,ITIN ,TPOINT,I5,T(1,K),S)
  200 CONTINUE
      KK = 0
      DO 220 K=1,NZIN
      DO 210 J=1,2
      KK = KK + 1
      TAXIAL(J,K) = ZSTORE(KK)
  210 CONTINUE
  220 CONTINUE
      DO 230 K=1,NZIN
  230 IZIN(K) = TAXIAL(2,K) + .01
      IF (NQ2.EQ.3) WRITE (6,240)(IZIN(K),K=1,NZIN)
  240 FORMAT('  IZIN = '  20I5)
      DO 250 L=1,NZIN
  250 TPOINT(L) = TAXIAL(1,L)
      IF (NQ2.EQ.3) WRITE (6,260)(TPOINT(L),L=1,NZIN)
  260 FORMAT(//' ZIN =' 1P11E11.2)
      CALL FINDZ(NZIN,IZIN,TPOINT,I5,ZR,S)
      IF (NQ2.LT.3) GO TO 400
      WRITE (6,270)IS
  270 FORMAT(//' REF. SURFACE, THICKNESS, AND TEMPERATURE DISTRIBUTIONS
     1IN SEGMENT ' I3//)
      WRITE (6,280)
  280 FORMAT(/'  PT.   ZREF      TH1       TH2       TH3       TH4
     1  TH5      TEMP1     TEMP2     TEMP3     TEMP4     TEMP5     TEMP6
     2         '   / )
      LUP = NTHICK
      DO 390 K=1,I5
      GO TO (290,300,310,320,330),LAYERS
  290 WRITE (6,340)K,ZR(K),(T(K,L),L=1,LAYERS),(TTT(K,L),L=1,LUP)
      GO TO 390
  300 WRITE (6,350)K,ZR(K),(T(K,L),L=1,LAYERS),(TTT(K,L),L=1,LUP)
      GO TO 390
  310 WRITE (6,360)K,ZR(K),(T(K,L),L=1,LAYERS),(TTT(K,L),L=1,LUP)
      GO TO 390
  320 WRITE (6,370)K,ZR(K),(T(K,L),L=1,LAYERS),(TTT(K,L),L=1,LUP)
      GO TO 390
  330 WRITE (6,380)K,ZR(K),(T(K,L),L=1,LAYERS),(TTT(K,L),L=1,LUP)
  340 FORMAT(I4,1P2E10.2,40X,1P6E10.2)
  350 FORMAT(I4,1P3E10.2,30X,1P6E10.2)
  360 FORMAT(I4,1P4E10.2,20X,1P6E10.2)
  370 FORMAT(I4,1P5E10.2,10X,1P6E10.2)
  380 FORMAT(I4,1P12E10.2)
  390 CONTINUE
  400 CONTINUE
      MPROP(1) = NMAT(IS)
      MP = MPROP(1)
      IF (LAYERS.EQ.1) INTTOT = NITEG(MP)
      IF (LAYERS.EQ.1) GO TO 440
      DO 410 K=1,LAYERS
      KDIV = 10**(LAYERS-K)
  410 MTEMP(K) = NMAT(IS)/KDIV
      MPROP(1) = MTEMP(1)
      MP = MPROP(1)
      INTTOT = NITEG(MP)
      DO 420 K=2,LAYERS
      KM = K - 1
      MPROP(K) = MTEMP(K) - MTEMP(KM)*10
      MP = MPROP(K)
  420 INTTOT = INTTOT + NITEG(MP)
      DO 430 K=1,10
      TP(K) = 0.0
  430 ZP(K) = 0.0
  440 CONTINUE
      IFK = 51/(INTTOT+1)
      ITEST=MOD(I,IFK)
      IF (NTSTAT.EQ.0) GO TO 480
      ZP(1) = 0.0
      DO 450 K=1,NTHICK
      KP = K + 1
      TP(K) = TTT(I,K)
      NTH2 = NTHICK- 2
      IF (K.GT.NTH2) GO TO 450
      KTHICK = NTHICK + K
      ZP(KP) = TTT(I,KTHICK)
  450 CONTINUE
      ZP(NTHICK) = T(I,1)
      IF (LAYERS.EQ.1) GO TO 470
      DO 460 K=2,LAYERS
  460 ZP(NTHICK) = ZP(NTHICK) + T(I,K)
  470 CONTINUE
  480 CONTINUE
      ZREF = ZR(I)
C     FIND STRAINS THROUGH THE THICKNESS.
C     STRAINI(Z) = STRAINI(0) - Z*KAPPAI(0) - ALPHA(Z)*TTURE(Z)
      IF (NQ2.EQ.3) WRITE (6,490)ZREF,(TP(K),K=1,6),(ZP(K),K=1,6)
  490 FORMAT(' ZREF,TP,ZP='      13F8.3)
      IF (IFLOW.EQ.1) GO TO 520
      IF (JTEST.NE.0) GO TO 520
      IF (I.LT.NBEG(IS).OR.I.GT.NSTOPP(IS)) GO TO 520
      IF (ITER.NE.1) GO TO 520
      IF (ITEST.NE.0.AND.I.NE.1) GO TO 520
      WRITE (6,500)
  500 FORMAT(1H1)
      WRITE (6,510)
  510 FORMAT(     ' SEG. PT. LAYER  Z  EFFECT. MERID.  CIRC. PLASTIC STR
     1AIN  CREEP STRAIN  EFFECT. TEMP. YIELD  TANGENT   TOTAL-THERMAL
     2EFFECT.      '/  '          (FROM     STRESS  STRESS STRESS MERID.
     3  CIRC.   MERID.  CIRC. PLASTIC (DEG) STRESS MODULUS STRAIN COMPON
     4ENTS UNIAXIAL     '/  '          INNER)    (KSI)   (KSI)  (KSI) (P
     5 E R C E N T) (P E R C E N T)STRAIN        (KSI)   X10-6   MERID.
     6  CIRC.    STRAIN         ')
  520 CONTINUE
      IPLS(1) = 0
  530 KK = 0
      TTOTL = 0.0
      IHINGE = 1
      EP1LOC = 0.
      EP2LOC = 0.
      DO 670 K=1,LAYERS
      EPEX1 = E1
      EPEX2 = E2
      FKEX1 = K1
      FKEX2 = K2
      MP = MPROP(K)
      NTOTL = NITEG(MP)
      THICK = T(I,K)
      TTOTL = TTOTL + THICK
      ZBEGIN = TTOTL - THICK - ZREF
      DZETA = THICK/FLOAT(NTOTL-1)
      E = EE(MP)
      U = FNUE(MP)
      U1 = 1.-U
      S24 = (2.*U-1.)/(3.*E)
      S25 = 2.*(1.+U)/(3.*E)
      ECOEF = E/(1.-U*U)
      IATW = ATWEEN(MP) + 1
      IORTH = 0
      ALPHA1 = AL1(MP)
      ALPHA2 = AL2(MP)
      GO TO (540,550,560),IATW
  540 EX = E/(1.-U*U)
      EY = EX
      GTEST = EXX(MP)/(2.*(1.+U))
      IF (EXX(MP).NE.EYY(MP).OR.GS(MP).LT.0.8*GTEST) IORTH = 1
      UP = 0.5
      GO TO 570
  550 EX = E
      EY = 0.
      S24 = 0.0
      S25 = 1./E
      U = 0.
      UP = 0.
      EPEX2 = 0.0
      FKEX2 = 0.0
      EST2 = 0.0
      FKST2 = 0.0
      GO TO 570
  560 EX = 0.
      EY = E
      S24 = 0.0
      S25 = 1./E
      U = 0.
      UP = 0.
      EPEX1 = 0.0
      FKEX1 = 0.0
      EST1 = 0.0
      FKST1 = 0.0
  570 CONTINUE
      DO 580 J=1,20
      SGEFT(J) = SGEFF(J,MP)
      EPEFT(J) = EPEFF(J,MP)
      ETANT(J) = ETAN(J,MP)
  580 CONTINUE
      Z = ZBEGIN - DZETA
      FN = CREEPN(MP)
      FM = CREEPM(MP)
      CPA = CREEPA(MP)
      CPB = CREEPB(MP)
      IF (CPA.EQ.0.0) NCREEP(IS) = 0
C BEG AUG 2005
      IF (MP.EQ.1) THEN
         EPSMAX(IS,I,MP) = 0.0
         EP1D = 0.0
         EP1DSM = 0.0
         KOUNT = 0
      ENDIF
C END AUG 2005
      DO 610 J=1,NTOTL
      KK = KK + 1
      EP1 = EP(1,KK)
      EP2 = EP(2,KK)
      EC1 = 0.0
      EC2 = 0.0
      IF (ICREEP.NE.0) EC1 = EC(1,KK)
      IF (ICREEP.NE.0) EC2 = EC(2,KK)
      Z = Z + DZETA
      FMUL = 0.0
      F1 = 1. + FMUL *Z*FK1
      F2 = 1. + FMUL *Z*FK2
      TTURE = 0.0
      IF (NTSTAT.NE.0) TTURE=FUNCT(Z)
      IF (IORTH.NE.1) GO TO 590
C
C     BRANCH FOR ORTHOTROPIC ELASTIC LAYER...
C
      UYX = 0.0
      IF (EXX(MP).GT.0.) UYX = FNUXY(MP)*EYY(MP)/EXX(MP)
      UDEN = 1. - UYX*FNUXY(MP)
      E11 = EXX(MP)/UDEN
      E22 = EYY(MP)/UDEN
      E12 = E11*UYX
      TSTR1 = AL1(MP)*TTURE*TEMP(IS)
      TSTR2 = AL2(MP)*TTURE*TEMP(IS)
      EALP1 = (E11*TSTR1 +E12*TSTR2)*F2
      EALP2 = (E12*TSTR1 +E22*TSTR2)*F1
      G12 = GS(MP)
      GO TO 595
  590 CALL FLOW(IS,I,S(I),K,EP1,EP2,EC1,EC2,Z,KK,SBBAR,EBARP,
     1 EPEFT,ETANT,NQ2,SGEFT,G12,EST1,EST2,FKST1,FKST2,EX,EY,UP,EBARC,
C BEG AUG 2005
     2 FN,FM,CPA,CPB,NCREEP(IS),IFLOW,EP1D)
      IF (MP.EQ.1) THEN
         EP1DSM = EP1DSM + EP1D
         KOUNT = KOUNT + 1
         IF (J.EQ.NTOTL) THEN
            EP1DSM = EP1DSM/FLOAT(KOUNT)
            EPSMAX(IS,I,MP) = EP1DSM
         ENDIF
      ENDIF
C END AUG 2005
  595 CONTINUE
      EP(1,KK) = EP1
      EP(2,KK) = EP2
      E1MAX = AMAX1(E1MAX,ABS(EP1))
      E2MAX = AMAX1(E2MAX,ABS(EP2))
      EP1LOC = AMAX1(EP1LOC,ABS(EP1))
      EP2LOC = AMAX1(EP2LOC,ABS(EP2))
C
      IF (ICREEP.NE.0) EC(1,KK) = EC1
      IF (ICREEP.NE.0) EC(2,KK) = EC2
      E1S = E11*F2/F1
      E2S = E22*F1/F2
      IF (UP.EQ.0.) G12 = 0.0
      ZINC =DZETA/3.
      P1 = Z*ZINC
      P2 = Z*Z*ZINC
      DC(J,1) = E1S*ZINC
      DC(J,2) = E12*ZINC
      DC(J,3) = - E1S*P1
      DC(J,4) = -E12*P1
      DC(J,5) = E2S*ZINC
      DC(J,6) = -E12*P1
      DC(J,7) = - E2S*P1
      DC(J,8) = +E1S*P2
      DC(J,9) = E12*P2
      DC(J,10)= E2S*P2
      DC(J,11)= G12*ZINC
      DC(J,12)= G12*P1
      DC(J,13)= G12*P2
      IF (IFLOW.EQ.1) GO TO 600
      DTHERM(J,1) = - EALP1*ZINC
      DTHERM(J,2) = - EALP2*ZINC
      DTHERM(J,3) =  EALP1*P1
      DTHERM(J,4) =  EALP2*P1
  600 IC = NTOTL - 1
  610 CONTINUE
      DO 640 J=1,IC,2
      DO 620 JJ=1,10
  620 C(I,JJ) = C(I,JJ) +DC(J,JJ) +4.*DC(J+1,JJ) +DC(J+2,JJ)
      IF (IFLOW.EQ.1) GO TO 640
      DO 630 JJ=1,4
  630 THERM(I,JJ)= THERM(I,JJ)
     1   +DTHERM(J,JJ) +4.*DTHERM(J+1,JJ) +DTHERM(J+2,JJ)
  640 CONTINUE
      IF (ITER.NE.1) GO TO 670
      DO 660 J=1,IC,2
      DO 650 JJ=11,13
      JJJ = JJ - 10
  650 CSHEAR(I,JJJ)= CSHEAR(I,JJJ) + DC(J,JJ) +4.*DC(J+1,JJ) +DC(J+2,JJ)
  660 CONTINUE
  670 CONTINUE
C
      IIADR = ITOTL + I
      DO 675 K = 1,KK
      IF (EP1LOC.LT.0.00001.AND.EP2LOC.LT.0.00001) GO TO 675
      IF (EP1LOC.LT.0.00001) GO TO 672
      DIFF = (EP1LOC - ABS(EP(1,K)))/EP1LOC
      IF (DIFF.LT.0.001) PLPNT(IIADR,1) = EP(1,K)
  672 CONTINUE
      IF (EP2LOC.LT.0.00001) GO TO 675
      DIFF = (EP2LOC - ABS(EP(2,K)))/EP2LOC
      IF (DIFF.LT.0.001) PLPNT(IIADR,2) = EP(2,K)
  675 CONTINUE
C
      IF (IFLOW.EQ.1) GO TO 690
C     TEST TO SEE IF ELASTIC-PLASTIC RING IS LOCATED AT THIS POINT
      IF (KRING.GT.NTOT) GO TO 690
      IPOS = (KRING - 1)*IPRE + 1
      KSEG = RING(IPOS)/1000.
      FSEG = KSEG
      KPOINT = RING(IPOS) - FSEG*1000.
      IF (IS.NE.KSEG) GO TO 690
      IF (I.NE.KPOINT) GO TO 690
C
C     THERE IS A RING AT THIS STATION. CHECK TO SE IF IT IS AN
C     ELASTIC-PLASTIC RING.
      IF (NTYP(KRING).EQ.0) GO TO 680
C     THE RING IS AN ELASTIC-PLASTIC RING
      CALL RPLAST(RING(IPOS),IS,I,SIGMA0,EPS0,EPCREP,ITRIAL,IFLOW)
  680 KRING = KRING + 1
  690 CONTINUE
      RETURN
      END
C=DECK      PRNTC
      SUBROUTINE PRNTC(JSEG,C,CSHEAR,I5,IFLOW,INDEX)
      DIMENSION C(I5,10),CSHEAR(I5,3)
    5 FORMAT(//55H WALL STIFFNESS COEFFICIENTS, CIJ, FOR SEGMENT NUMBER
     1    I2,46H  USED IN THE PREBUCKLING ANALYSIS                    /)
    7 FORMAT(//55H WALL STIFFNESS COEFFICIENTS, CIJ, FOR SEGMENT NUMBER
     1    I2,49H  USED IN THE PREBUCKLING AND BUCKLING ANALYSES       /)
      IF (IFLOW.EQ.0.AND.INDEX.EQ.0) WRITE(6,7)JSEG
      IF (IFLOW.EQ.0.AND.INDEX.EQ.1) WRITE(6,5)JSEG
      IF (IFLOW.EQ.1) WRITE(6,10) JSEG
   10 FORMAT(//55H WALL STIFFNESS COEFFICIENTS, CIJ, FOR SEGMENT NUMBER
     1    I2,46H  TO BE USED IN BIFURCATION BUCKLING ANALYSIS         /)
      WRITE (6,20)
   20 FORMAT(  130H   I     C11     C12      C14      C15      C22
     1C24      C25      C44      C45      C55      C33      C36      C66
     2                                                          //)
      DO 30 I=1,I5
   30 WRITE (6,40)I,(C(I,J),J=1,10),(CSHEAR(I,J),J=1,3)
   40 FORMAT(I4,1P13E9.2)
      RETURN
      END
C=DECK      RPLAST
      SUBROUTINE RPLAST(RING,IS,I,SIGMA0,EPS0,EPCREP,ITRIAL,IFLOW)
C     THIS SUBROUTINE CALCULATES THE CROSS-SECTION PROPERTIES OF THE
C     ELASTIC-PLASTICALLY DEFORMED RING. THESE PROPERTIES ARE STORED IN
C     THE ARRAY RING(  ) FOR USE IN SUBROUTINE PRERNG.
C
C     KRSEG = GLOBAL RING SEGMENT NUMBER
C     KRING = GLOBAL RING NUMBER
      DIMENSION C(16),RING(20),SGEFF(20),EPEFF(20),ETAN(20),EBARC(50)
      DIMENSION  DC(20,16),     EBARP(50),SIGMA0(*),EPS0(*),EPCREP(*)
      COMMON/RINGRD/RC(99)
      COMMON/DEFM/EPEX1,EPEX2,FKEX1,FKEX2,JUP,IPLS(1),AT1
      COMMON/FANDD/ALPHA1,ALPHA2,TTURE,F1,F2,IHINGE,ITEST
      COMMON/FDATA/ S25,ECOEF,S26
      COMMON/MDATA/MP,E,U,U1,S24,S23,E11,E12,E22,EALP1,EALP2
      COMMON/IBUNCH/INOW,INOWH,INOWZ,MPROPX,NANR,NSME,NQ1,NQ2,NQ3,ICHNGE
      COMMON/RLSTAT/LSTAT,KRSEG,KRING,BET(99),BETS(99),WS(99),WSS(99)
      COMMON/RPLST1/D1(99),D2(99),PHI(99),TT(99),FL(99),EE(10),ALPHA(10)
      COMMON/RPLST2/TEMPR(100),EPS(100),SIGMA(100)
      COMMON/RPLST4/JBEG(99),KBEG(10),NPOINT(10) ,NSUM1(199),NSUM2(199)
      COMMON/RPLST5/NTYP(99),NPARTS(99)
      COMMON/STSS/SIG1,SIG2
      COMMON/ITERS/ITER
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/RCDATA/RCREEN(9),RCREEM(9),RCREEA(9),RCREEB(9)
      COMMON/NBGSTP/NBEG(201),NSTOPP(201),INTVAL(201)
      JTEST = MOD(KSTEP,INTVAL(IS))
      JUP = 10
      IF (ITER.EQ.1) JUP = 16
      BETA = BET(KRING)
      BETAS = BETS(KRING)
      WSTAR = WS(KRING)
      WSTARS = WSS(KRING)
      IF (KRSEG.EQ.0) LSTAT = 1
      DO 10 JJJ=1,JUP
   10 C(JJJ) = 0.0
      IF (ITRIAL.NE.1) GO TO 50
      IF (KSTEP.NE.1) GO TO 30
      DO 20 K=6,27
   20 RING(K) = 0.0
   30 CONTINUE
      DO 40 K=21,26
      I1 = K - 15
   40 RING(K) = RING(I1)
   50 CONTINUE
      F1 = 1.0
      KK = 0
      NPART = NPARTS(KRING)
C     BEGIN LOOP OVER NUMBER OF SEGMENTS IN CURRENT RING
C
      IF (ITER.EQ.1.AND.JTEST.EQ.0) WRITE(6,55)
   55 FORMAT(21H  SHELL    RING DIST. /
     1       21H SEG. PT.  SEG. ALONG /
     2       27H            NO. RING SEG.          )
      DO 140 K=1,NPART
      KRSEG = KRSEG + 1
      NPRE = NSUM1(KRSEG)/10000
      INTEG = (NSUM1(KRSEG) - NPRE*10000)/100
      NMATL = NSUM1(KRSEG) -  NPRE*10000 - INTEG*100
      MP = NMATL
      NTEMP = NSUM2(KRSEG)/100
      NGEOM = NSUM2(KRSEG) - NTEMP*100
C
C     FOR EACH SEGMENT OF THE DISCRETE RING THE STRAIN IS EXPRESSED
C     IN THE FORM (E2-Z*K2)/F2,  WHERE Z IS THE DISTANCE MEASURED ALONG
C     THE RING SEGMENT AND F2 IS THE RADIUS OF THE RING MEASURED TO
C     THAT POINT.  IN THIS WAY THE STRAIN IN THE RING CAN BE HANDLED
C     IN AN ANALOGOUS MANNER TO THAT IN THE SHELL....THE NUMBER OF
C     LAYERS IN THE SHELL BECOMES THE NUMBER OF SEGMENTS IN THE RING
C     AND THE NUMBER OF INTEGRATION POINTS THROUGH THE THICKNESS OF EACH
C     LAYER OF THE SHELL BECOMES THE NUMBER OF INTEGRATION POINTS ALONG
C     THE LENGTH OF EACH SEGMENT OF THE DISCRETE RING.  THEN THE
C                 PLASTIC STRAIN INCREMENTS, CREEP STRAIN INCREMENTS
C     AND TANGENT MODULUS OF THE RING ARE DETERMINED IN EXACTLY THE
C     SAME WAY FOR THE RING AS THEY ARE FOR THE SHELL.  IN FACT THE
C     SAME SUBROUTINE,  FLOW,   IS USED FOR THESE CALCULATIONS.
C     E2 AND K2 ARE DEPENDENT ON THE RADIAL DISPLACEMENT WSTAR AND
C      MERIDIONAL ROTATION BETA
C
C     SEE SUBROUTINE RNGSEG FOR DEFINITIONS OF GEOMETRICAL (D1,D2,PHI,T,
C     FL) AND OTHER RING QUANTITIES.
C
      PHIRAD = PHI(NGEOM)*3.1415927/180.
      SP = SIN(PHIRAD)
      CP = COS(PHIRAD)
      SP2 = SIN(2.*PHIRAD)
      EPEX1 = 0.0
      FKEX1 = 0.0
      EPEX2 = WSTAR - D1(NGEOM)*0.5*BETA*BETA + D2(NGEOM)*BETA
      FKEX2 = -BETA*SP + 0.5*BETA*BETA*CP
      EST1 = 0.0
      FKST1 = 0.0
      EST2 = WSTARS -D1(NGEOM)*0.5*BETAS*BETAS +D2(NGEOM)*BETAS
      FKST2 = -BETAS*SP + 0.5*BETAS*BETAS*CP
      T = TT(NGEOM)
      ZBEGIN = 0.0
      DZETA = FL(NGEOM)/FLOAT(INTEG-1)
      E =  EE(NMATL)
      U = 0.0
      U1 = 1.0
      S24 = 0.0
      S25 = 1./E
      ECOEF = E
      IATW = 3
      EX = 0.
      EY = E
      ALPHA1 = 0.
      ALPHA2 = ALPHA(NMATL)
      UP = 0.
      Z = ZBEGIN-DZETA
      DIF1 = D2(NGEOM) - RING(5)
      DIF2 = D1(NGEOM) - RING(4)
C     GET MATERIAL PROPERTY CURVE FOR THIS RING SEGMENT
      NP = NPOINT(NMATL)
      KBEGIN = KBEG(NMATL)
      DO 60 LP=1,NP
      SGEFF(LP) = SIGMA(KBEGIN+LP-1)
      EPEFF(LP) = EPS(KBEGIN+LP-1)
   60 CONTINUE
      DO 70 LP=2,NP
      LP1 = LP - 1
      ETAN(LP1) = (SGEFF(LP) - SGEFF(LP1))/(EPEFF(LP) -EPEFF(LP1))
      IF (ABS(ETAN(LP1)).LT.0.001*E) ETAN(LP1) = 0.001*E
   70 CONTINUE
      NP1 = NP - 1
      ETAN(NP) = ETAN(NP1)
C     JBEGIN IS BEGINNING INDEX OF TEMPERATURE DISTRIBUTION
      JBEGIN = JBEG(NTEMP)
      J1 = KK + 1
      J2 = KK + INTEG
      DO 80 J=J1,J2
      LP = LSTAT + J - 1
      EBARP(J) = ABS(EPS0(LP))
      EBARC(J) = ABS(EPCREP(LP))
   80 CONTINUE
      ICREEP = 1
      FN = RCREEN(MP)
      FM = RCREEM(MP)
      CPA = RCREEA(MP)
      CPB = RCREEB(MP)
      IF (CPA.EQ.0.0) ICREEP = 0
C
      IF (ITER.EQ.1.AND.JTEST.EQ.0) WRITE(6,90) K,KRING
   90 FORMAT(/31H STRESSED STATE OF SEGMENT NO.   I3,21H OF DISCRETE RIN
     1G NO.          I3)
C     NOW INTEGRATE OVER THIS RING SEGMENT LENGTH
C
      DO 110 J=1,INTEG
      KK = KK + 1
      LSK = LSTAT + KK - 1
C     LSTAT = BEGINNING STATION FOR PLASTIC, CREEP, YIELD QUANTITIES.
      EP1 = 0.0
      EP2 = EPS0(LSK)
      EC1 = 0.0
      EC2 = EPCREP(LSK)
      Z = Z + DZETA
      F2 = RC(KRING) - RING(4) + D1(NGEOM) + Z*CP
      TTURE = TEMPR(JBEGIN+J-1)
      CALL FLOW(IS,I,Z   ,K,EP1,EP2,EC1,EC2,Z,KK,SIGMA0(LSTAT),
     1 EBARP,      EPEFF,ETAN,NQ2,SGEFF,G12R,EST1,EST2,FKST1,FKST2,
C BEG AUG 2005
     2 EX, EY,UP,EBARC,FN,FM,CPA,CPB,ICREEP,IFLOW,EP1D)
C END AUG 2005
      EPS0(LSK) = EP2
      EPCREP(LSK) = EC2
      X = -RING(4) + D1(NGEOM) + Z*CP
      Y = - RING(5) + D2(NGEOM) + Z*SP
      ZINC = DZETA/3.
      ET = E22*T*ZINC
      FIX = ET*T**2/12.
      ETB = -EALP2*T*ZINC
      JJ = J
      DC(JJ,1) = ET
      DC(JJ,2) = ET*X
      DC(JJ,3) = ET*Y
      DC(JJ,4) = ET*X*X + FIX*SP**2
      DC(JJ,5) = ET*X*Y + .5*FIX*SP2
      DC(JJ,6) = ET*Y*Y + FIX*CP**2
      DC(JJ,7) = ETB
      DC(JJ,8) = ETB *X
      DC(JJ,9) = ETB *Y
      FNU = 0.3
C     SHEAR STIFFNESS FOR OPEN SECTION ONLY.
      DC(JJ,10) = G12R*(T**3/3.)*ZINC
      IF (ITER.NE.1) GO TO 100
      ST = SIG2*T*ZINC
      SFIX = ST*T**2/12.
C     INTEGRATED RING PRESTRESS TERMS
      DC(JJ,11) = ST
      DC(JJ,12) = ST*X
      DC(JJ,13) = ST*Y
      DC(JJ,14) = ST*X*X + SFIX*SP**2
      DC(JJ,15) = ST*X*Y + .5*SFIX*SP2
      DC(JJ,16) = ST*Y*Y + SFIX*CP**2
  100 CONTINUE
  110 CONTINUE
      IC = INTEG - 1
      DO 130 JJ=1,IC,2
      DO 120 JJJ=1,JUP
  120 C(JJJ) = C(JJJ) +DC(JJ,JJJ) +4.*DC(JJ+1,JJJ) +DC(JJ+2,JJJ)
  130 CONTINUE
  140 CONTINUE
      IF (ITER.EQ.1.AND.JTEST.EQ.0) WRITE(6,145) KRING
  145 FORMAT(/' ****** END OF OUTPUT FOR DISCRETE RING NO. 'I3, '  *****
     1******        ******       ******      ******      ****** '/)
      LSTAT = LSTAT + KK
      KKK = KRING
C 600 WRITE(6,530) - C(7),- C(9), -C(8)
C 530 FORMAT(//12X,' HOOP THERMAL RESULTANT='1PE12.3,'  THERMAL MOMENT A
C    1BOUT X-AXIS='1PE12.3,'  THERMAL MOMENT ABOUT Y-AXIS='1PE12.3)
C     WRITE(6,610)(C(I),I=1,6), C(10)
C 610 FORMAT(//'  EA='1PE12.3,'  EX='1PE12.3,'  EY='1PE12.3,
C    1 '  EXX='1PE12.3,'  EXY='1PE12.3, '  EYY='1PE12.3,
C    2 '  GJ=' 1PE12.3)
      RING(12)= (C(1) - C(2)/RC(KKK) +C(4)/RC(KKK)**2)/RC(KKK)
      RING(13)= (C(2) - C(4)/RC(KKK))/RC(KKK)
      RING(14)= C(4)/RC(KKK)
      RING(15)= (C(3) - C(5)/RC(KKK))/RC(KKK)
      RING(16)= C(5)/RC(KKK)
      RING(17)= C(6)/RC(KKK)
      RING(18)= C(7)
      RING(19)= C(8)
      RING(20)= C(9)
      IF (ITER.NE.1) GO TO 150
      RING(6) = (C(11)-C(12)/RC(KKK) +C(14)/RC(KKK)**2)/RC(KKK)
      RING(7) = (C(12)-C(14)/RC(KKK))/RC(KKK)
      RING(8) = C(14)/RC(KKK)
      RING(9) = (C(13)-C(15)/RC(KKK))/RC(KKK)
      RING(10)= C(15)/RC(KKK)
      RING(11) = C(16)/RC(KKK)
      RING(27) = C(10)*RC(KKK)
  150 CONTINUE
      RETURN
      END
C=DECK      FLOW
      SUBROUTINE FLOW(ISEG,IPOINT,S,LAYER,EP1,EP2,EC1,EC2,Z,KK,SBBAR,
     1EBARP,EPEFF,ETAN,NQ2,SGEFF,G12,EST1,EST2,FKST1,FKST2,EX,EY,UP,
C BEG AUG 2005
     2 EBARC,FN,FM,CPA,CPB,ICREEP,IFLOW,EP1DD)
C END AUG 2005
      COMMON/ITERS/ITER
      COMMON/FUTIME/DTIMEF
      COMMON/STSS/SIG1,SIG2
      COMMON/TEMTUR/TEMP(201),P(201)
C
      COMMON/TOMER/TOME,DTIME
      COMMON/FANDD/ALPHA1,ALPHA2,TTURE,F1,F2,IHINGE,ITEST
      COMMON/FDATA/ S25,ECOEF,S26
      COMMON/MDATA/MP,E,U,U1,S24,S23,E11,E12,E22,EALP1,EALP2
      COMMON/SVTOM/TOMES
      COMMON/DEFM/E1,E2,K1,K2,            JUP,IPLS(1) ,AT1
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/SVTEMP/TEMPS(201)
      COMMON/NBGSTP/NBEG(201),NSTOPP(201),INTVAL(201)
      COMMON/MATP2/ETTAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRD(95)
      COMMON/CHGBND/IICHNG,TCHANG(10),SBARCH(10)
      COMMON/CDATA/TFLOOR,CREEPN(9),CREEPM(9),CREEPA(9),CREEPB(9)
      COMMON/DELOAD/IELAST
      DIMENSION SBBAR(*),EBARP(*),EPEFF(20),ETAN(20),SGEFF(20)
      DIMENSION EPS1(50),EPS2(50) ,EBARC(*)
      REAL K1,K2
C     CALCULATES NEW VALUES FOR PLASTIC STRAIN,CREEP STRAIN, YIELD
C     SURFACE WITH USE OF VON MISES YIELD AND PRANDTL-REUSS FLOW.
      KTEST = MOD(KSTEP,INTVAL(ISEG))
      IPLS(1) = 0
      EBAR = EBARP(KK)
      ET = E
      C11 = 0.
      C12 = 0.
      C21 = 0.
      C22 = 0.
      JTEST = 0
      KTMAX = 1
      FKTMAX = KTMAX
      DEC1 = 0.
      DEC2 = 0.
      DECBAR = 0.0
      SBAR = 0.
      KOUNT = 0
      TSTRS1 = 0.0
      TSTRS2 = 0.0
      SDIF = 0.0
      Q = 0.95
      QR = 1./(Q-1.)
C
C     FIRST GET STRAINS THRU THICKNESS
C     CURRENT STRAINS AT KKTH STATION THRU THICKNESS
      EPS1(KK) = (E1 - Z*K1)/F1
      EPS2(KK) = (E2 - Z*K2)/F2
C
C     CONVERGED STRAINS AT LAST LOAD STEP
      EPS1S = (EST1 - Z*FKST1)/F1
      EPS2S = (EST2 - Z*FKST2)/F2
C
C     PLASTIC STRAIN COMPONENTS, CREEP STRAIN COMPONENTS FROM LAST LOAD
      EPNEW1 = EP1
      EPNEW2 = EP2
      ECNEW1 = 0.
      ECNEW2 = 0.
      ECBAR = 0.0
      IF (ICREEP.EQ.0) GO TO 10
      ECNEW1 = EC1
      ECNEW2 = EC2
      ECBAR = EBARC(KK)
   10 ECREP1 = ECNEW1
      ECREP2 = ECNEW2
C
C     THERMAL STRAINS AT PRESENT AND AT LAST LOAD STEP
      TSTR1 = ALPHA1*TTURE*TEMP(ISEG)
      TSTR2 = ALPHA2*TTURE*TEMP(ISEG)
      TSTRS1 = ALPHA1*TTURE*TEMPS(ISEG)
      TSTRS2 = ALPHA2*TTURE*TEMPS(ISEG)
C
C     CALCULATE ELASTIC STRAINS CORRESPONDING TO LAST LOAD STEP
      E1SEL = EPS1S - EP1 - ECREP1 - TSTRS1
      E2SEL = EPS2S - EP2 - ECREP2 - TSTRS2
C
C     NOW CALCULATE ELASTIC STRAINS FOR CURRENT LOAD STEP
      E1ELAS = EPS1(KK) - EPNEW1 - ECNEW1 - TSTR1
      E2ELAS = EPS2(KK) - EPNEW2 - ECNEW2 - TSTR2
C
      IF (ITRIAL.EQ.1.AND.KSTEP.GT.1) E1ELAS = EPS1(KK) -EPNEW1 -ECNEW1
     1 - TSTRS1
      IF (ITRIAL.EQ.1.AND.KSTEP.GT.1) E2ELAS = EPS2(KK) -EPNEW2 -ECNEW2
     1 - TSTRS2
C
C     CALCULATE STRESSES
      SIG1 = EX*(E1ELAS + U*E2ELAS)
      SIG2 = EY*(U*E1ELAS + E2ELAS)
C
C     CALCULATE EFFECTIVE STRESS
      SBAR = SQRT(SIG1*SIG1 + SIG2*SIG2 - SIG1*SIG2)
      SBARY = SBAR
C     IF (IPOINT.NE.4.OR.KK.NE.3) GO TO 11
C     WRITE(6,*)' EPS1,EPS2C    C        =',EPS1(KK),EPS2(KK)
C     WRITE(6,*)' EPS1S,EPS2S,E1SEL,E2SEL=',EPS1S,EPS2S,E1SEL,E2SEL
C     WRITE(6,*)' EP1,EP2,EPNEW1,EPNEW2  =',EP1,EP2,EPNEW1,EPNEW2
C     WRITE(6,*)' SIG1,SIG2,SBARC        =',SIG1,SIG2,SBAR
   11 CONTINUE
      IF (IFLOW.EQ.1) GO TO 35
C     NOW CALCULATE EFFECTIVE STRESS AND STRESS COMPONENTS FOR LAST
C     CONVERGED LOAD STEP
      SIG10 = EX*(E1SEL + U*E2SEL)
      SIG20 = EY*(U*E1SEL + E2SEL)
      SBAR0 = SQRT(SIG10*SIG10 +SIG20*SIG20 -SIG10*SIG20)
      SIG1Y = SIG10
      SIG2Y = SIG20
      SBARY = SBAR0
      IF (SBBAR(KK).EQ.0.0) SBBAR(KK) = SGEFF(2)
      IF (SBAR.EQ.0.0) GO TO 220
C
      DIFF = ABS( SBBAR(KK) - SBAR)/SBBAR(KK)
      IF (DIFF.LT.0.005) SBAR = SBBAR(KK)*.999
C
      IF (ICREEP.EQ.0.AND.SBAR.LE.SBBAR(KK)) GO TO 220
      IF (IELAST.EQ.1) GO TO 220
      SRAT = ABS(SBBAR(KK) - SBAR0)/SBBAR(KK)
      IF (SRAT.LT.0.00001) GO TO 20
      IF (ICREEP.NE.0.AND.SRAT.GT.0.05) GO TO 20
C     NOW FIND FMU, THE FACTOR REQUIRED TO BRING STRESS STATE UP TO
C     THE YIELD SURFACE
      DS1 = SIG1 - SIG10
      DS2 = SIG2 - SIG20
      DSBAR = DS1*DS1 + DS2*DS2 - DS1*DS2
      B = DS1*(2.*SIG10 - SIG20) + DS2*(2.*SIG20 - SIG10)
      ARG = B*B + 4.*DSBAR*(SBBAR(KK)**2 - SBAR0**2)
      IF (ARG.LT.0.0) GO TO 20
      FMU = 0.
      IF (DSBAR.GT.0.) FMU = 0.5*(-ABS(B) + SQRT(ARG))/DSBAR
      SIG1Y = SIG10 + FMU*DS1
      SIG2Y = SIG20 + FMU*DS2
      SBARY = SQRT(SIG1Y*SIG1Y + SIG2Y*SIG2Y - SIG1Y*SIG2Y)
C     THE ELASTIC STRAIN COMPONENTS AT THE YIELD SURFACE ARE . . .
      E1SEL = (SIG1Y - U*SIG2Y)/E
      E2SEL = (SIG2Y - U*SIG1Y)/E
   20 CONTINUE
C     IF (IPOINT.NE.4.OR.KK.NE.3) GO TO 12
C     WRITE(6,*)' SRAT,SIG10,SIG20,SBAR0 =',SRAT,SIG10,SIG20,SBAR0
C     WRITE(6,*)'C    C      E1SEL,E2SEL=',E1SEL,E2SEL
C     WRITE(6,*)'C     SIG1Y,SIG2Y,SBARY =',SIG1Y,SIG2Y,SBARY
   12 CONTINUE
C
C     DE1, DE2 ARE STRAIN INCREMENTS FOR CURRENT LOAD STEP. WE MUST
C              DETERMINE HOW MUCH IS ELASTIC, HOW MUCH IS PLASTIC, AND
C              HOW MUCH IS CREEP.
C
      DE1 =  E1ELAS - E1SEL
      DE2 = E2ELAS - E2SEL
      DEFF = 2.*SQRT((DE1*DE1 + DE2*DE2 + DE1*DE2)/3. )
      KTMAX = DEFF/.0002
      IF (KTMAX.GT.100) KTMAX = 100
      IF (KTMAX.EQ.0) KTMAX = 1
      DTTOT = 0.0
      DELT = ABS(TOME - TOMES)
      DELTS = DELT
      IF (DELT.EQ.0.0) DELT=1.0
   30 CONTINUE
      FKTMAX = KTMAX
      IFLAG = 0
      DT = DELT/FKTMAX
   35 CONTINUE
C     IF (IPOINT.NE.4.OR.KK.NE.3) GO TO 13
C     WRITE(6,*)' DE1,DE2,DEFF,FKTMAX,DT=',DE1,DE2,DEFF,FKTMAX,DT
   13 CONTINUE
C
C     NOW FIND TANGENT MODULUS
C
C     ETOT = TOTAL EFFECTIVE STRAIN
C
      ETOT = EBAR + S25*SBARY
      JJ = 1
      DO 40 MM=2,20
      MMM = MM
      JJ = JJ + 1
      IF (ETOT.LT.EPEFF(MM)) GO TO 50
   40 CONTINUE
   50 JJ1 = JJ - 1
      ET = ETAN(JJ1)
      ETOTM  = EPEFF(MMM)
      IF((SBARY*1.0001).LT.SBBAR(KK)) ET = E
      IF (ET.EQ.0.0) ET = 0.001*E
C     IF (IPOINT.NE.4.OR.KK.NE.3) GO TO 14
C     WRITE(6,*)' EBAR,S25,SBARY,ETOT=',EBAR,S25,SBARY,ETOT
C     WRITE(6,*)' JJ1,MMM,ET,ETOTM,SBBAR=',JJ1,MMM,ET,ETOTM,SBBAR(KK)
   14 CONTINUE
      IF (IFLOW.EQ.1) GO TO 230
      IF(SBARY*1.0001.LT.SBBAR(KK).AND.SBBAR(KK).GT.SGEFF(2))
     1       ETOTM = EBAR + S25*SBBAR(KK)
      IF (DTTOT.GE.DELT*0.999) GO TO 200
C
C
C     THE PLASTIC STRAIN INCREMENTS ARE NORMAL TO THE YIELD SURFACE
C     B1 AND B2 GIVE THE DIRECTIONS. CREEP STRAIN INCREMENTS ARE IN THE
C     SAME DIRECTIONS . . .
C
   60 CONTINUE
      IF (ET.EQ.0.0) ET = 0.001*E
      HRECIP = (E-ET)/(E*ET)
      IF (SBARY.EQ.0.0) GO TO 70
      B1 = (SIG1Y - UP*SIG2Y)/SBARY
      B2 = (SIG2Y - UP*SIG1Y)/SBARY
      GO TO 80
   70 B1 = (SIG1 - UP*SIG2)/SBAR
      B2 = (SIG2 - UP*SIG1)/SBAR
   80 CONTINUE
      A0 = 0.0
      A00 = 0.0
C
C     CREEP STRAIN CHANGE
      IF (DELTS.EQ.0.) GO TO 120
      IF (ICREEP.EQ.0) GO TO 120
      CPAP = CPA
      FMP = FM
      CPBP = CPB
      FNP = FN
      IF (SBARY.LT.SBARCH(1)) GO TO 85
      CPAP = CREEPA(9)
      CPBP = CREEPB(9)
      FMP = CREEPM(9)
      FNP = CREEPN(9)
   85 CONTINUE
      SOCR = SBARY/CPAP
      IF (SOCR.GT.10.) SOCR = 10.
      RATIO = SOCR**FMP/100.
      IF (RATIO.LT.1.E-10) RATIO = 0.
      IF (RATIO.EQ.0.0) GO TO 120
      ECBAR0 = RATIO*CPBP**FNP
      ECBART = ECBAR + ECBAR0
      TE1 = (ECBART/RATIO)**(1./FNP)
      ISIG = 0
   90 CONTINUE
C     NOW FIND TIME INTERVAL SUCH THAT STRESS CHANGE DURING THAT INTER-
C     VAL IS LESS THAN 0.01 TIMES SBARY, THE CURRENT EFFECTIVE STRESS
      A0 = RATIO*((TE1+DT)**FNP - TE1**FNP)
      A00 = A0*FMP/(2.*SBARY)
      C1 = DE1*DT/DELT - A0*B1
      C2 = DE2*DT/DELT - A0*B2
      IF (ISIG.EQ.1) GO TO 100
      CALL FDSBAR(HRECIP,A00,E,U,B1,B2,C1,C2,DS1,DS2,DSBAR)
      IF (DSBAR.GE.0.0) GO TO 110
      ISIG = 1
  100 ET = E
      HRECIP = 0.0
      IF (ITRIAL.EQ.1) GO TO 120
      CALL FDSBAR(HRECIP,A00,E,U,B1,B2,C1,C2,DS1,DS2,DSBAR)
  110 DTEST = ABS(DSBAR/SBARY)
      IF (DTEST.LT.0.01) GO TO 120
      F = 0.01/DTEST
      IF (F.LT.0.2) F = 0.2
      IF (F.GT.0.5) F=0.5
      DT = DT*F
      GO TO 90
  120 CONTINUE
      IFLAG1 = 0
      DTTOT = DTTOT + DT
      IF (DTTOT.LE.DELT*0.999) GO TO 130
      DTPART = DTTOT - DELT
      DTTOT = DTTOT - DT
      DT = DT - DTPART
      DTTOT = DTTOT + DT
      KOUNT = KTMAX
      IF (ICREEP.EQ.0) GO TO 130
      IF (DELTS.EQ.0.0) GO TO 130
      A0 = RATIO*((TE1+DT)**FNP - TE1**FNP)
      IF (SBARY.NE.0.) A00 = A0*FMP/(2.*SBARY)
  130 CONTINUE
C
C     HAVING OBTAINED THE TIME STEP, DT, NOW CALCULATE THE CHANGES IN
C     STRESS, DS1 AND DS2 AND DSBAR.
C
      C1 = DE1*DT/DELT - A0*B1
      C2 = DE2*DT/DELT - A0*B2
      CALL FDSBAR(HRECIP,A00,E,U,B1,B2,C1,C2,DS1,DS2,DSBAR)
      IF (DSBAR.GE.0.0) GO TO 140
      ET = E
      HRECIP = 0.0
      IF (ITRIAL.GT.1) GO TO 135
      DS1 = 0.
      DS2 = 0.
      DSBAR = 0.
      GO TO 140
  135 CONTINUE
      CALL FDSBAR(HRECIP,A00,E,U,B1,B2,C1,C2,DS1,DS2,DSBAR)
  140 CONTINUE
      DEBAR = HRECIP*DSBAR
      DECBAR = A0 + A00*DSBAR
      DEC1 = DECBAR*B1
      DEC2 = DECBAR*B2
      IF (HRECIP.EQ.0.0) GO TO 150
      IF (KTMAX.GE.100) GO TO 150
      SDOTK = SQRT(DS1*DS1 + DS2*DS2)
      FKDOTK = SDOTK/SBBAR(KK)
      IF (FKDOTK.LT.0.02) GO TO 150
      KTMAX = 2*KTMAX
      DTTOT = DTTOT - DT
      DT = DT/2.
      GO TO 120
  150 CONTINUE
      IF (IFLAG.EQ.1) GO TO 160
      ETOTMC = EBAR + DEBAR + S25*(SBARY + DSBAR)
      IF (ETOTMC.LE.ETOTM) GO TO 160
      RLESS = (ETOTM - ETOT)/(ETOTMC - ETOT)
      DSBAR = DSBAR*RLESS
      DEBAR = DEBAR*RLESS
      DECBAR = DECBAR*RLESS
      DS1 = DS1 *RLESS
      DS2 = DS2 *RLESS
      DEC1 = DEC1*RLESS
      DEC2 = DEC2*RLESS
      ET = ETAN(JJ)
      IF (ETOTM.LT.EPEFF(MMM)) ET = ETAN(JJ1)
      HRECIP = (E - ET)/(E*ET)
      DT = DT*(1. - RLESS)
      DTTOT = DTTOT - DT
      IFLAG = 1
      IFLAG1 = 1
  160 EBAR = EBAR + DEBAR
      ECBAR = ECBAR + DECBAR
      EPNEW1 = EPNEW1 + DEBAR*B1
      EPNEW2 = EPNEW2 + DEBAR*B2
      ECNEW1 = ECNEW1 + DEC1
      ECNEW2 = ECNEW2 + DEC2
      SIG1Y = SIG1Y + DS1
      SIG2Y = SIG2Y + DS2
      SBARY  = SQRT(SIG1Y*SIG1Y + SIG2Y*SIG2Y - SIG1Y*SIG2Y)
      SIG1 = SIG1Y
      SIG2 = SIG2Y
      SBAR = SBARY
      ETOT = EBAR + S25*SBARY
C BEG AUG 2005 (was EP1D, not EP1DD, and was commented out)
      EP1DD = (ETOT - SBAR*S24)*100.0
C END AUG 2005
      IF (IPOINT.GT.1) GO TO 180
      IF (KK.GT.1) GO TO 180
C     WRITE(6,170) IPOINT,KK,SBARY,DSBAR,DTTOT,DT,ECBAR0,
C     TE1,DEC1,DECBAR,ECBAR,ECNEW1
  170 FORMAT(2I4,1P10E11.4)
  180 CONTINUE
      IF (IFLAG.EQ.1.AND.IFLAG1.EQ.1) GO TO 120
C     WRITE(6,98) ETOT,ET,DS1,DS2,DSBAR,DEBAR,SBAR,EBAR,SIG1Y,SIG2Y,
C    1 B1,B2,EP1D
  190 FORMAT(1P13E10.3)
      GO TO 30
  200 CONTINUE
C
C     OBTAIN DERIVATIVES OF EFFECTIVE STRESS WITH RESPECT TO STRESS
C     COMPONENTS
      DSBAR1 = (SIG1 - UP*SIG2)/SBAR
      DSBAR2 = (SIG2 - UP*SIG1)/SBAR
C     NOW CALCULATE THE C-MATRIX
C     HPRIME IS THE SLOPE OF THE EFFECTIVE STRESS-PLASTIC STRAIN CURVE
      QRR = SBAR /SBBAR(KK)
      IF (QRR.LT.Q) GO TO 210
      IF (ET.LT.E) GO TO 210
      QA = QR*(QRR - 1.0)
      ET = QA*E + (1.0 - QA)*ETAN(JJ1)
  210 CONTINUE
      IF (ABS(E-ET)/E.LT.0.001) GO TO 220
      HPRIME = E*ET/(E-ET)
      DENOM = HPRIME + ECOEF*(DSBAR1*DSBAR1 +2.*U*DSBAR1*DSBAR2
     1 + DSBAR2*DSBAR2)
      A1 = DSBAR1 + U*DSBAR2
      A2 = DSBAR1*U + DSBAR2
      A3 = ECOEF/DENOM
C
C     IF INISTR = 1 THE INITIAL STRAIN METHOD (WITHOUT EXTRAPOLATION)
C                   IS USED.
C     IF INISTR = 0 THE TANGENT STIFFNESS METHOD IS USED.  RIGHT NOW,
C                   THE FEELING IS THAT THE TANGENT STIFFNESS METHOD IS
C                   MUCH BETTER.
C
      INISTR = 0
      IF (INISTR.EQ.1) GO TO 215
C
C     THE FOUR ELEMENTS OF THE C-MATRIX FOLLOW
      C11 = A1*DSBAR1*A3
      C12 = A2*DSBAR1*A3
      C21 = A1*DSBAR2*A3
      C22 = A2*DSBAR2*A3
  215 CONTINUE
      IF (SBAR.GE..998*SBBAR(KK)) IPLS(1) = 1
  220 CONTINUE
      E11 = EX*(1. - C11 - U*C21)
      E12 = ECOEF*(U - C12 - U*C22)
      E22 = EY*(1. - C12*U - C22)
C     FOR THE INITIAL STRAIN METHOD E11 = ECOEF,  E12 = U*ECOEF,
C                                   E22 = ECOEF
C     E11 = ECOEF
C     E12 = U*ECOEF
C     E22 = ECOEF
C
C     NOW CALCULATE THE EFFECTIVE LOAD TERMS, ANALOGOUS TO THERMAL
C     STRAINS IN ELASTIC THEORY.
      FN1 = - EPNEW1 - ECNEW1 - TSTR1 + EPS1(KK)*C11 + EPS2(KK)*C12
      FN2 = - EPNEW2 - ECNEW2 - TSTR2 + EPS1(KK)*C21 + EPS2(KK)*C22
C     FOR THE INITIAL STRAIN METHOD THE EQUIVALENT 'THERMAL LOADS',
C     INCLUDING PLASTIC AND CREEP STRAINS ARE GIVEN BY THE NEXT TWO
C     STATEMENTS.
      EALP1 = - EX*(FN1 + U*FN2)*F2
      EALP2 = - EY*(U*FN1   + FN2)*F1
C
C     FOR THE TANGENT STIFFNESS METHOD THE EQUIVALENT 'THERMAL LOADS'
C     ARE GIVEN BY THE NEXT TWO STATEMENTS
C     IF (IPOINT.NE.1) GO TO 230
C     IF (KK.NE.1) GO TO 230
C     WRITE(6,*)' ECOEF, ET=', ECOEF,ET
C     WRITE(6,*)' EPS1(KK),EPS2(KK)=',EPS1(KK),EPS2(KK)
C     WRITE(6,*)' DSBAR1,DSBAR2=',DSBAR1,DSBAR2
C     WRITE(6,*)' SBAR,UP,HPRIME=',SBAR,UP,HPRIME
C     WRITE(6,*)' EBAR,S25,ETOT=',EBAR,S25,ETOT
C     WRITE(6,*)' C11,C12,C21,C22=',C11,C12,C21,C22
C     WRITE(6,*)' EPNEW1,EPNEW2=',EPNEW1,EPNEW2
C     WRITE(6,98)EALP1,EALP2,FN1,FN2,E11,E12,E22,E1SEL,E2SEL,C11,C12,C21
C     WRITE(6,98)C22,A1,A2,A3,DENOM,HPRIME,DSBAR1,DSBAR2,SIG1,SIG2,EPNEW
C    11,EPNEW2
  230 CONTINUE
      ETOT = EBAR + S25*SBAR
      G12 = 0.5*E/(1. +U)
      IF (IFLOW.EQ.0) GO TO 235
      E11 = EX
      E12 = U*ECOEF
      E22 = EY
  235 CONTINUE
      IF (SBAR.LT.0.98*SBBAR(KK)) GO TO 240
      IF (IELAST.EQ.1) GO TO 240
      EP1D = ETOT - SBAR*S24
C BEG AUG 2005
      EP1DD = EP1D*100.
C END AUG 2005
      G = 1.5*(E*EP1D/SBAR - 1.0)
      G12 = 0.5*E/(1. +U + G)
      IF (IFLOW.EQ.0) GO TO 240
      GPRIME = 2.25*(E/ET - E*EP1D/SBAR)/SBAR**2
      AA = EP1D/SBAR
      BB = -(U + G/3.)/E
      S1 = (2.*SIG1 - SIG2)/3.
      S2 = (2.*SIG2 - SIG1)/3.
      AS = AA + GPRIME*S1*S1/E
      BS = BB + GPRIME*S1*S2/E
      CS = AA + GPRIME*S2*S2/E
      DEN = AS*CS - BS*BS
      E11 = CS/DEN
      E12 = -BS/DEN
      E22 = AS/DEN
      IF (UP.NE.0.) GO TO 240
      E11 = ET*EX/ECOEF
      E12 = 0.0
      E22 = ET*EY/ECOEF
  240 CONTINUE
      IF (IFLOW.EQ.1) GO TO 320
      IF (NQ2.LT.2.AND.ITER.NE.1) GO TO 280
      IF (KTEST.NE.0) GO TO 280
      IF (IPOINT.LT.NBEG(ISEG).OR.IPOINT.GT.NSTOPP(ISEG)) GO TO 280
C
C     NOW WRITE OUT ALL IMPORTANT QUANTITIES
C
      SK1 = 0.001
      SK2 = 0.000001
      IF (E.GT.20000.) GO TO 250
      SK1 = 1.0
      SK2 = 0.001
  250 CONTINUE
      SPBAR = SBAR*SK1
      SP1 = SIG1*SK1
      SP2 = SIG2*SK1
      EPR1 = EPNEW1*100.0
      EPR2 = EPNEW2*100.0
      ECR1 = ECNEW1*100.0
      ECR2 = ECNEW2*100.0
      EBARPR = EBAR*100.0
      TPTURE = TTURE*TEMP(ISEG)
      SPBAR1 = SBBAR(KK)*SK1
      ESP = ET*SK2
      EPP1 = (EPS1(KK)-TSTR1)*100.0
      EPP2 = (EPS2(KK) - TSTR2)*100.0
      EP1D = (ETOT - SBAR*S24)*100.0
C BEG AUG 2005
      EP1DD = EP1D
      IF (KK.EQ.1) WRITE (6,260)
  260 FORMAT(1H )
      WRITE (6,270)ISEG,IPOINT,LAYER,Z,SPBAR,SP1,SP2,EPR1,EPR2,ECR1,ECR2
     1,EBARPR,TPTURE,SPBAR1,ESP,EPP1,EPP2,EP1D
  270 FORMAT(2I4,I5,F6.3,F8.2,2F7.2,F8.3,F7.3,F8.3,F7.3,F8.3,F7.1,F7.2,
     1 F8.4,F8.3,F9.3,F10.3)
C
C     NOW             ESTABLISH NEW VALUES FOR THE YIELD STRESS,
C     EFFECTIVE PLASTIC STRESS, PLASTIC STRAIN COMPONENTS, AND CREEP
C     STRAIN COMPONENTS.
  280 IF (ITER.NE.1) GO TO 320
      IF (IPLS(1).EQ.0) GO TO 290
C     NEW YIELD STRESS
      SBBAR(KK) = SBAR
C
C     NEW EFFECTIVE PLASTIC STRAIN
      EBARP(KK) =EBAR
C
C     NEW PLASTIC STRAIN COMPONENTS
      EP1 = EPNEW1
      EP2 = EPNEW2
  290 IF (ICREEP.EQ.0) GO TO 320
C
C     NEW CREEP STRAIN COMPONENTS
      EBARC(KK) = ECBAR
      EC1 = ECNEW1
      EC2 = ECNEW2
  320 CONTINUE
      RETURN
      END
C=DECK      FDSBAR
      SUBROUTINE FDSBAR(HRECIP,A00,   E,U,B1,B2,C1,C2,DS1,DS2,DSBAR)
      FK = HRECIP + A00
      A11 = 1./E + B1*B1*FK
      A12 = -U/E + B1*B2*FK
      A22 = 1./E + B2*B2*FK
      DEN = A11*A22 - A12*A12
      DS1 = (C1*A22 - C2*A12)/DEN
      DS2 = (C2*A11 - C1*A12)/DEN
      DSBAR = B1*DS1 + B2*DS2
      RETURN
      END
C=DECK      CSTRAN
      SUBROUTINE CSTRAN(DT,SBARY,DECBAR,ECBAR,EBAR,DE1,DE2,ETAN,EPEFF,
     1 UP,SIG1Y,SIG2Y,SBBAR,KK)
      COMMON/CDATA/TFLOOR,CREEPN(9),CREEPM(9),CREEPA(9),CREEPB(9)
      COMMON/FDATA/ S25,ECOEF,S26
      COMMON/MDATA/MP,E,U,U1,S24,S23,Q11,Q12,Q22,EALP1,EALP2
      DIMENSION ETAN(*),EPEFF(*),SBBAR(*)
      DECBAR = 0.0
      IF (SBARY.EQ.0.0) GO TO 100
      FM = CREEPM(MP)
      FN = CREEPN(MP)
      SOCR = SBARY/CREEPA(MP)
      IF (SOCR.GT.4.) SOCR = 4.
      RATIO = SOCR**FM
      IF (RATIO.LT.0.001) RATIO = 0.0
      IF (RATIO.EQ.0.0) GO TO 100
      TE1 = (ECBAR/RATIO)**(1./FN)
      TFACT = ((TE1 + DT)**FN - TE1**FN)/100.
      B1 = (SIG1Y - UP*SIG2Y)/SBARY
      B2 = (SIG2Y - UP*SIG1Y)/SBARY
      D1 = RATIO*TFACT
      D2 = TFACT*FM*SOCR**(FM-1.)/(2.*CREEPA(MP))
      E11 = DE1 - D1*B1
      E12 = - D2*B1
      E21 = DE2 - D1*B2
      E22 = - D2*B2
C     IF UNLOADING
      A1 = ECOEF*(B1*(E11 +U*E21) + B2*(E21 +U*E11))
      A2 = ECOEF*(B1*(E12 +U*E22) + B2*(E22 +U*E12))
      X = A1/(1.-A2)
      IF (X.LT.0.0) GO TO 50
C     IF LOADING
      ETOT = EBAR + S25*SBARY
      JJ = 1
      DO 10 MM = 2,20
      JJ = JJ + 1
      IF (ETOT.LT.EPEFF(MM)) GO TO 20
   10 CONTINUE
   20 CONTINUE
      JJ1 = JJ - 1
      ET = ETAN(JJ1)
      IF ((SBARY*1.001).LT.SBBAR(KK)) ET = E
      HRECIP = (E - ET)/(E*ET)
      A11 = 1./E + B1*B1*HRECIP
      A12 = - U/E + B1*B2*HRECIP
      A22 = 1./E + B2*B2*HRECIP
      DEN = A11*A22 - A12*A12
      A1 = (B1*(E11*A22 -E21*A12) + B2*(E21*A11 -E11*A12))/DEN
      A2 = (B1*(E12*A22 -E22*A12) + B2*(E22*A11 -E12*A12))/DEN
      X = A1/(1.-A2)
   50 CONTINUE
      AX = ABS(X)
      BX = 0.1*SBARY
      IF (AX.GT.BX) X = (X/AX)*BX
      SOCR = (SBARY + X/2.)/CREEPA(MP)
      IF (SOCR.GT.4.) SOCR = 4.
      RATIO = SOCR**FM
      IF (RATIO.LT.0.001) RATIO = 0.0
      IF (RATIO.EQ.0.0) GO TO 100
      TE1 = (ECBAR/RATIO)**(1./FN)
      TFACT = ((TE1 + DT)**FN - TE1**FN)/100.
      DECBAR = RATIO*TFACT
  100 CONTINUE
      WRITE(6,200) SBARY,X,AX,DECBAR,DT,RATIO,TE1
  200 FORMAT(' SBARY,X,AX,DECBAR,DT,RATIO,TE1=' 1P7E12.3)
      RETURN
      END
