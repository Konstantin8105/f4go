C=DECK      PRE11LIB
C
C  THIS IS THE PRE11 LIBRARY (SOURCE FILE)
C
C
C
C=DECK      PRE11
      SUBROUTINE PRE11
C
C  200-SEGMENT VERSION OF BOSOR5
C
C     OVERLAY(3,0)    (CDC VERSION)
C     PROGRAM PRE11    (CDC VERSION)
      COMMON/      /B(160000)
      COMMON/SEGS/NSEG,M2,I5(201),I2,NFAIL
      COMMON/ITERS/ITER
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/TOMER/TOME,DTIME
      COMMON/MAXIT/ITMAX
      ITER = 0
      NFAIL =1
      WRITE(6,5) KSTEP,TOME
    5 FORMAT(//' ENTER THE NEWTON-RAPHSON ITERATION LOOP FOR TIME STEP N
     1O.'  I3, '    TIME = '1PE15.6/)
   10 CONTINUE
      CALL APREB
      IF (KSTEPM.EQ.1) GO TO 50
      IF (NFAIL.EQ.0) GO TO 20
      ITER = ITER + 1
      IF (ITER.GT.ITMAX) WRITE(6,45) ITMAX
      CALL SOLN
      GO TO 10
   20 CONTINUE
      WRITE(6,30)
   30 FORMAT(/' NEWTON-RAPHSON ITERATIONS HAVE CONVERGED.'/
     1 ' NEXT CALCULATE THE PREBUCKLING STRAINS AND UPDATE THE MATERIAL
     2 PROPERTIES.'//)
   45 FORMAT(/' NEWTON-RAPHSON ITERATIONS FAILED TO CONVERGE AFTER 'I3,
     1 '  ITERATIONS.  THIS MEANS THAT THE SHELL'/
     2 ' CANNOT SUSTAIN THE APPLIED LOADS.  IF YOU WISH A CLOSER APPROXI
     3MATION OF THE FAILURE LOAD,'/
     4' RESTART THIS CASE AT THE LAST TIME STEP FOR WHICH CONVERGENCE WA
     5S ACHIEVED AND REDUCE THE TIME INCREMENT.'/)
   50 CONTINUE
      RETURN
C     RETURN CARD NOT NEEDED IN CDC VERSION
      END
C=DECK      APREB
      SUBROUTINE APREB
C
C     CALCULATES THE COEFFICIENT MATRIX OF PREBUCKLING EQUATIONS FOR
C     CURRENT ITERATION OF NONLINEAR AXISYMMETRIC PREBUCKLING THEORY.
C     ALSO FINDS RIGHT-HAND-SIDE VECTOR FOR CURRENT ITERATION.
C
C BEG AUG 2005
C BEG FEB 2008
      COMMON/WPREMY/WPREMX,WPRALL,ENDUV
C END FEB 2008
C END AUG 2005
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/SMODE/IPMODE(99),ICMODE(99),ISMODE(99),IQMODE(99),IHMOD(99)
      COMMON/SHEL/IWAL(201)
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(201),IROWCB(201),IIWP,IIWB
      COMMON/      /B(160000)
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/SEGS/NSEG,M2,I5(201),I2,NFAIL
      COMMON/ITERS/ITER
      COMMON/NCONDS/NCOND
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/MAXIT/ITMAX
      COMMON/OUTP/NPRT
      COMMON/INSTAB/INDIC
      COMMON/WAVES/NN
      COMMON/NONCON/NOCONV
      COMMON/ISNL/ISIGNL
      COMMON/CONPRE/CPRE
      DOUBLE PRECISION DB
#if cray
      DIMENSION DB(160000)
#else
      DIMENSION DB(80000)
#endif
      EQUIVALENCE(B(1),DB(1) )
C     THE PHILOSOPHY HERE AND IN OTHER OVERLAYS IS TO STORE EVERYTHING
C     IN THE WORKING-SPACE ARRAY B(     ), THEREBY MAKING IT EASY TO
C     ALTER THE SIZE OF THE PROGRAM FOR DIFFERENT CASES. THE DIAGRAM
C     BELOW SHOWS WHICH VARIABLES ARE STORED WHERE. GIVEN BELOW ARE THE
C     LENGTHS OF EACH ARRAY, THE NAMES OF EACH ARRAY GIVEN IN PRESTS
C     AND IN FACTR AND SOLVE (WHICH ARE CALLED FROM SUBROUTINE SOLN),
C   THE NAMES GIVEN IN APREB (THIS SUBROUTINE), AND THE STARTING
C     ADDRESSES IN THIS SUBROUTINE.
C
C     SUMMARY DIAGRAM FIRST...
C  /ILOC/FTOT/ F / AS / C / THERM/ RING/ DS / B / P / IW / JUNCT/ QSAVE/
C  1    N1   N2  N3   N4  N5     N6    N7   N8  N9 N10  N11    N12
C     THE NAMES (ILOC,FTOT, ETC.) GIVEN ABOVE ARE USED IN SUBR. PRESTS.
C     NOW FOR A DETAILED DIAGRAM WITH LENGTHS. THE DIAGRAM HAD TO BE
C     CONTINUED ON A FOLLOWING LINE. USE THE SUMMARY DIAG. FOR OVERVIEW.
C
C     HOW THE WORKING SPACE STORAGE, B(     ), IS ALLOCATED...
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    M2 = NUMBER OF DEGREES OF FREEDOM IN PREBUCKLING PROBLEM
C    IMAXP = LENGTH OF BLOCK OF STIFFNESS MATRIX, PREBUCKLING PROBLEM
C    I2 = NUMBER OF 'MESH' POINTS IN ENTIRE STRUCTURE
C    IPRE = NUMBER OF DIFFERENT KINDS OF VARIABLES STORED FOR EACH RING
C    NTOT = TOTAL NUMBER OF DISCRETE RINGS IN STRUCTURE
C    NSEG = NUMBER OF SHELL SEGMENTS
C
C/-M2-/--2*M2-/--2*M2-/2*IMAXP/10*I2/-4*I2/IPRE*NTOT/--I2-/5*I2-/3*I2-/
C/ILOC/--FTOT-/---F---/--AS---/--C--/THERM/--RING---/-DS--/--B--/--P--/
C/B(1)/DB(N1D)/DB(N2D)/DB(N3D)/B(N4)/B(N5)/--B(N6)--/B(N7)/B(NH)/B(N9)/
C1   N1D     N2D     N3D      N4    N5    N6        N7    N8    N9   N10
C
C     CONTINUE DIAGRAM ON NEXT LINE...
C
C  /I2+2*NSEG/-2614-/--1000--/
C  /---IW----/JUNCT-/--QSAVE-/
C  /-B(N10)--/B(N11)/DB(N12D)/
C N10       N11    N12D
C
C     THE FOLLOWING ARRAYS ARE USED IN FACTR AND SOLVE, WHICH ARE
C     CALLED FROM SUBROUTINE SOLN.  THERE ARRAYS OCCUPY THE
C     SAME SPACE AS THE ARRAYS ABOVE, STARTING WITH C AT POSITION N4.
C
C                             /2*IMAXP/--2*M2--/--M2-/
C                             /--TP---/---DI---/PDIAG/
C                             /DB(N4D)/DB(N13D)/B(N14)/
C                            N4D     N13D     N14
C
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     B(1)     NUMBERS WHICH INDICATE THE LOCATION OF THE MAIN DIAG-
C                  ONAL ELEMENTS RELATIVE TO THE BEGINNING OF EACH BLOCK
C                  OF THE STIFFNESS MATRIX
C   N1D   DB(N1D)  CURRENT ESTIMATE OF THE SOLUTION IN THIS NEWTON ITER.
C   N2D   DB(N2D)  SOLUTION VECTOR FOR CURRENT NEWTON ITERATION. THIS
C                  VECTOR SHOULD APPROACH ZERO AS CONVERGENCE IS ACHIEVE
C   N3D   DB(N3D)  STIFFNESS MATRIX FOR CURRENT NEWTON ITERATION
C   N4    B(N4)    CONSTITUTIVE LAW COEFFICIENTS, C(I,J)
C   N5    B(N5)    NEGATIVE OF PLASTIC+CREEP+THERMAL STRAINS INTEGRATED
C                  THROUGH SHELL WALL THICKNESS. LIKE THERMAL STRESS AND
C                  MOMENT RESULTANTS.
C   N6    B(N6)    DISCRETE RING VARIABLES, SUCH AS ECCENTRICITIES AND
C                  EP+EC+ET ('THERMAL STRAINS') INTEGRATED OVER RING
C                  CROSS-SECTION AREA, AND EA, EIX, EIY, ETC...
C   N7    B(N7)    ARC LENGTH INCREMENTS (FINITE DIFFERENCE ELEMENTS)
C   N8    B(N8)    SHELL REFERENCE SURFACE GEOMETRY PARAMETERS R, R',
C                  1/R1, 1/R2, (1/R1)'
C   N9    B(N9)    NORMAL PRESSURE AND SURFACE TRACTION DISTRIBUTIONS
C   N10   B(N10)   EQUATION NUMBERS CORRESPONDING TO 'W' MESH POINTS
C   N11   B(N11)   CONSTRAINT CONDITIONS, EQU. NOS CORRESPONDING THERETO
C   N12D  DB(N12D) ARRAYS FOR BRANCH CONDITIONS WHICH SPAN BLOCKS STORED
C
C BEG NOV 2006
C     NPRT = 3
C END NOV 2006
      ICPRE = CPRE
      J = M2/2
      K = 2*J
      N1 = M2 + 1
      IF (K.NE.M2) N1 = M2 + 2
      N1D = (M2+1)/2 + 1
      N2 = N1 + 2*M2
      N2D = N1D + M2
      N3 = N2 + 2*M2
      N3D = N2D + M2
      N4 = N3 + 2*IMAXP
      N5 = N4 + 10*I2
      N6 = N5 + 4*I2
      N7 = N6 + IPRE*NTOT
      N8 = N7 + I2
      N9 = N8 + 5*I2
      N10 = N9 + 3*I2
      N11 = N10 + I2 + 2*NSEG
      N12 = N11 + 2614
      N12D = N3D + IMAXP + (24*I2 + IPRE*NTOT + 2*NSEG + 2614)/2
      M32 = 3*M2 + 2
      IF(ITER.EQ.0)CALL GASP(B(1 ),M32,3,IWAL(15))
C BEG June 1990
      IF (ITER.GT.0) GO TO 5
c     WRITE(6,*)' F JUST READ:F(478),F(479),F(480),F(481),F(482)=',
c    1 DB(N1D+477),DB(N1D+478),DB(N1D+479),DB(N1D+480),DB(N1D+481)
      if (NPRT.GE.3) then
        NEND = N1D + M2 - 1
        WRITE(6,4) (DB(I),I=N1D,NEND)
    4   FORMAT(/' begin APREB: zeroth iteration solution vector='/
     1    (1P10E12.4))
      endif
    5 CONTINUE
C END June 1990
      ERR = 0.001
      ICOND1 = 1
      ICOND2 = 1
      KK = 1
      N = 5
      KLAP = 3
      I5TOT = 0
      IC = 3
      III = 1
      IV = 0
      IF (ITER.EQ.0) GO TO 80
      NFAIL = 0
      FMAX = 0.0
      DO 10 I=1,M2
      IARG = N1D+ I - 1
      IARG2 = N2D+ I - 1
      DB(IARG) = DB(IARG) - DB(IARG2)
C     WRITE(6,221) I,DB(IARG),DB(IARG2)
C 221 FORMAT(I4,1P2E20.8)
   10 CONTINUE
      KSTEPM = 0
      ISIGNL = 0
      IF (ITER.LE.ITMAX) GO TO 15
      NOCONV = 1
      IF (KSTEP.LE.2) CALL ERREX
      IF (INDIC.EQ.0) GO TO 140
      KSTEPM = 1
      ITER = 1
      ISIGNL = 1
      WRITE(6,11)
   11 FORMAT(1H0)
      WRITE(6,12)
      WRITE(6,12)
      WRITE(6,12)
      WRITE(6,12)
   12 FORMAT(' **********PLEASE READ THE FOLLOWING IMPORTANT NOTICE ****
     1******')
      KSTEP1 = KSTEP - 1
      KSTEP2 = KSTEP - 2
      WRITE(6,13) NN,NN,NN
   13 FORMAT(//' THE USER HAS CHECKED FOR BIFURCATION BUCKLING LOADS  '/
     1' FOR N = 'I6,'  CIRCUMFERENTIAL WAVES.  IT HAS BEEN DETERMINED '/
     2' BY THE ABOVE CALCULATIONS THAT THE SHELL COLLAPSES AXISYM-    '/
     3' METRICALLY AT A SMALLER LOAD THAN THE BIFURCATION BUCKLING    '/
     4' LOAD CORRESPONDING TO N = ' I6, '  CIRCUMFERENTIAL WAVES.     '/
     5' HOWEVER, IT MAY HAPPEN THAT THE MINIMUM NONSYMMETRIC BIFUR-   '/
     6' CATION BUCKLING LOAD CORRESPONDS TO A DIFFERENT VALUE OF N THAN'
     7  I6//)
      WRITE(6,14) KSTEP2
   14 FORMAT(' THE PURPOSE OF THE FOLLOWING CALCULATIONS IS TO DETER- '/
     1' MINE FOR WHICH N THE CRITICAL LOAD IS SMALLEST.  A SEQUENCE OF'/
     2' EIGENVALUE PROBLEMS.....                                      '/
     3'            (K1(N) + LAMBDA*K2(N))*Q  =  0                     '/
     4' IS THEREFORE SET UP, WHERE                                    '/
     5' K1(N) = STABILITY STIFFNESS MATRIX CORRESPONDING TO A BUCKLING'/
     6' MODE WITH N CIRC. WAVES FOR THE STRUCTURE AS LOADED AND DE-   '/
     7' FORMED BY THE LOADS CORRESPONDING TO TIME STEP NO.' I6/)
      IF (ICPRE.EQ.0) THEN
        WRITE(6,18) KSTEP2,KSTEP1
      ELSE
        WRITE(6,19) KSTEP
      ENDIF
   18 FORMAT(
     1' K2(N) = LOAD-GEOMETRIC MATRIX FOR N CIRC. WAVES CORRESPONDING '/
     2' TO THE LOAD INCREMENT FROM STEP NO.'I3,'  TO STEP NO.' I3//)
   19 FORMAT(
     1' K2(N) = LOAD-GEOMETRIC MATRIX FOR N CIRC. WAVES CORRESPONDING '/
     2' TO THE TOTAL LOAD AT STEP NO.'I3//)
      WRITE(6,16)
   16 FORMAT(' LAMBDA = THE EIGENVALUE.  DONT CONCERN YOURSELF WITH   '/
     1' THE ABSOLUTE VALUE OF THIS.  ONLY THE SIGN OF THE MINIMUM     '/
     2' LAMBDA AND THE RELATIVE VALUES OF LAMBDA FOR VARIOUS N ARE    '/
     3' SIGNIFICANT IF PLASTICITY OCCURS.                            '//
     4' Q = THE EIGENVECTOR  (BUCKLING MODE)  '//)
      WRITE(6,17)
   17 FORMAT(1H1)
      GO TO 140
   15 CONTINUE
      I = 0
C BEG FEB 2008
      IARG = N1D + 2
      ENDUV = ABS(DB(IARG))
C END FEB 2008
   20 I = I + 1
      DO 30 J=1,NCOND
      IF (I.NE.IROWCP(J)) GO TO 30
      I = I + 3
   30 CONTINUE
      IF (I.GT.M2) GO TO 40
      IARG = N1D+ I - 1
      FFTOT =DB(IARG)
      FMAX = AMAX1(ABS(FFTOT),FMAX)
      GO TO 20
   40 CONTINUE
C BEG FEB 2008
      WRITE(6,50) ITRIAL, ITER, FMAX, ENDUV
   50 FORMAT(' TRIAL NO.'I3, '  ITERATION NO.' I3, '  MAXIMUM DISPLACEME
     1NT = '1PE15.8,' END DISPLACEMENT, ENDUV=',1PE12.4)
C END FEB 2008
C BEG AUG 2005
      WPREMX = FMAX
C END AUG 2005
      I = 0
   60 I = I + 1
      DO 70 J=1,NCOND
      IF (I.NE.IROWCP(J)) GO TO 70
      I = I + 3
   70 CONTINUE
      IF (I.GT.M2) GO TO 80
C
C     CONVERGENCE TESTED.
C
      FFTOT =DB(N1D + I - 1)
      IF (FMAX) 71,80,71
   71 CONTINUE
      IF (ABS(FFTOT)/FMAX.LT.0.1) GO TO 60
      FNUM = DB(N2D+I-1)
      DELP = ABS(FNUM/FFTOT)
C     CONVERGENCE CRITERION
      IF (DELP.GT.ERR) NFAIL = 1
      IF (NFAIL.EQ.1) GO TO 80
      GO TO 60
   80 CONTINUE
      NLONG1 = 14*I2 + IPRE*NTOT
      NLONG2 = 10*I2 + 2*NSEG + 2614
      IARG = KSTEP
      IF (ITRIAL.EQ.1) IARG = KSTEP - 1
      IF (IARG.EQ.0) IARG = 1
      CALL GASP(B(N4),NLONG1,3,ICMODE(IARG ))
      CALL GASP(B(N7),NLONG2,3,IWAL(2))
      IEND = N2D + M2 - 1
      IF (MAXTRL.GT.1.AND.ITRIAL.EQ.1.AND.ITER.EQ.1) NFAIL = 1
      IF (NFAIL.EQ.0) GO TO 120
      DO 90 I=N2D,IEND
   90 DB(I) = 0.0
      IEND = N3D + IMAXP - 1
      DO 100 I=N3D,IEND
  100 DB(I) = 0.0
      NQ3 = 0
      ITOTL = 0
C
C  BEGIN LOOP OVER NUMBER OF SEGMENTS...
C
      DO 110 I=1,NSEG
C
C
C     PRESTS FINDS COEFFICIENT MATRIX AND RIGHT-HAND-SIDE FOR ITH SEGMNT
C
      I5I = I5(I)
      IPOS = 10*ITOTL + 1
      IPOS1 = 4*ITOTL + 1
      IPOS2 = 5*ITOTL + 1
      IPOS3 = 3*ITOTL + 1
      IARG1 = N7 + ITOTL
      IARG2 = N4 + IPOS - 1
      IARG3 = N9 + IPOS3 - 1
      IARG4 = N8 + IPOS2 - 1
      IARG5 = N5 + IPOS1 - 1
      IARG6 = N11 + 1206
      IARG7 = N11 + 2412
      CALL PRESTS(I,I5I,B(IARG1),NSEG,B(IARG2),B(IARG3),B(IARG4),
     1 DB(N2D),DB(N1D),DB(N3D),B(N10),B(IARG5),B(1),B(IARG6),B(N11),
     2 IROWCP,B(IARG7),IMAXP,DB(N12D),NQ3,B(N6))
      ITOTL = ITOTL + I5I
  110 CONTINUE
  120 CONTINUE
      IF (NFAIL.NE.0) GO TO 140
      CALL GASP(B(1 ),M32,1,IWAL(15))
C BEG June 1990
c     WRITE(6,*)' F JUST STORED:F(478),F(479),F(480),F(481),F(482)=',
c    1 DB(N1D+477),DB(N1D+478),DB(N1D+479),DB(N1D+480),DB(N1D+481)
      if (NPRT.GE.3) then
	NEND = N1D + M2 - 1
	write(6,124) (DB(i), i=N1D, NEND)
	call gasp(b(1), m32, 3, iwal(15))
	write(6,124) (DB(i), i=N1D, NEND)
  124	format(/' end APREB: final iteration solution vector='/
     1    (1P10E12.4))
      endif
C END June 1990
      NSOLN = 24*I2 + IPRE*NTOT + 1
      DO 130 I=1,M2
      J = I + NSOLN - 1
  130 B(J) =DB(N1D+ I - 1)
  140 CONTINUE
      RETURN
      END
C=DECK      FILLBP
      SUBROUTINE FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,FLOC,QD,BB)
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     PURPOSE IS TO ASSEMBLE 'MINUS' CONSTRAINT CONDITION MATRIX
C     QD(3X5) INTO GLOBAL MATRIX BB.
C     NONLINEAR AXISYMMETRIC STRESS PROBLEMS.
      DOUBLE PRECISION QD,BB
      DIMENSION FLOC(*),QD(3,5),BB(*)
      DO 80 I=1,IC
      J = IR - 1 + I
      DO 70 K=1,N
      GO TO (10,20,30,40,50),K
   10 INDX = I2M
      GO TO 60
   20 INDX = I1M
      GO TO 60
   30 INDX = I0
      GO TO 60
   40 INDX = I1P
      GO TO 60
   50 INDX = I2P
   60 CONTINUE
      ILOC1 = FLOC(J)
      IB = ILOC1 - J + INDX
      BB(IB) = QD(I,K)
   70 CONTINUE
   80 CONTINUE
      RETURN
      END
C=DECK      GETWWP
      SUBROUTINE GETWWP(DS,K,H,WB,WBD)
C     CALLED FROM PRESTRES, WHOSE TRACE IS APREB,PRE,MAIN
C     FINITE-DIFFERENCE EXPRESSIONS FOR VARIABLE SPACING MESH WITH
C     U,V HALF-WAY BETWEEN W. PREBUCKLING ANALYSIS
      DOUBLE PRECISION DS,K,H,WB,WBD,HMK,KPDS,HPDS
      DIMENSION WB(5),WBD(5)
      HMK = H - K
      KPDS = K + DS
      HPDS = H + DS
      WB(1) = HMK*KPDS/(16.*H*DS)
      WB(3) = KPDS*HPDS/(4.*H*K)
      WB(5) = -HMK*HPDS/(16.*K*DS)
      WBD(1) = -0.5/H
      WBD(5) = 0.5/K
      WBD(3) = -WBD(1) - WBD(5)
      RETURN
      END
C=DECK      PGETB
      SUBROUTINE PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     THE MATRIX B RELATES STRAINS AND CHANGES IN CURVATURE TO LOCAL
C     MESH VARIABLES. VARIABLE SPACING USED. TANGENTIAL DISPLACEMENT
C     U OCCURS AT HALF-STATIONS BETWEEN THE NORMAL OUTWARD DISPLACEMENT
C     IN THIS SUBROUTINE ONLY THE LINEAR TERMS IN THE KINEMATIC RELATION
C     ARE INCLUDED.   THE W-PRIME-SQUARED TERM IS OMITTED HERE.
C
C     VARIABLE DEFINITIONS. . .
C              R = PARALLEL CIRCLE RADIUS AT ELEMENT CENTROID
C             RD = DERIVATIVE OF R WITH RESPECT TO ARC LENGTH S
C            FK1 = MERIDIONAL CURVATURE 1/R1 AT ELEMENT CENTROID
C            FK2 = NORMAL CIRCUMFERENTIAL CURVATURE, 1/R2
C           CURD = DERIVATIVE OF 1/R1
C              H = ELEMENT LENGTH, L  IN FIG. 3
C          HPAST = VARIABLE CALLED H IN FIG. 3
C             HI = VARIABLE CALLED K IN FIG. 3
C          WB(1) = VARIABLE CALLED C1 IN EQUATION (9)
C          WB(3) = VARIABLE CALLED C2 IN EQUATION (9)
C          WB(5) = VARIABLE CALLED C3 IN EQUATION (9)
C       ROT(I) = DERIVATIVE OF MERIDIONAL ROTATION WITH RESPECT TO
C                 GENERALIZED COORDINATES, Q. SEE EQUATION (17).
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION B,WB,WBD,HPAST,HI,ROT
      DIMENSION B(4,5),WB(5),WBD(5),ROT(5)
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      B(1,1) = FK1*WB(1)
      B(1,2) = -1./H
      B(1,3) = FK1*WB(3)
      B(1,4) = 1./H
      B(1,5) = FK1*WB(5)
      B(2,1) = FK2*WB(1)
      B(2,2) = 0.5*RD/R
      B(2,3) = FK2*WB(3)
      B(2,4) = 0.5*RD/R
      B(2,5) = FK2*WB(5)
      FMUL = 0.0
      B(3,1) = 1./(HPAST*H) -FMUL*B(1,1)*FK1
      B(3,2) = FK1/H        -FMUL*B(1,2)*FK1
      B(3,3) =-2./(HI*HPAST)-FMUL*B(1,3)*FK1
      B(3,4) = -FK1/H       -FMUL*B(1,4)*FK1
      B(3,5) = 1./(HI*H)    -FMUL*B(1,5)*FK1
C
      DO 10 I=1,5
   10 B(4,I) = ROT(I)*RD/R  -FMUL*B(2,I)*FK2
      IF (ISIG.NE.1) RETURN
C     POLE CONDITION
      DO 20 I=1,5
      B(2,I) = B(1,I)
   20 B(4,I) = B(3,I)
      RETURN
      END
C=DECK      PGETC
      SUBROUTINE PGETC(I,L5,COEF,C)
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     WALL STIFFNESS COEFFICIENTS CIJ TRANSFERRED TO LOCAL MATRIX C.
C
      DOUBLE PRECISION C
      DIMENSION COEF(L5,14),C(4,4)
      C(1,1) = COEF(I,1)
      C(1,2) = COEF(I,2)
      C(1,3) = COEF(I,3)
      C(1,4) = COEF(I,4)
      C(2,2) = COEF(I,5)
      C(2,3) = COEF(I,6)
      C(2,4) = COEF(I,7)
      C(3,3) = COEF(I,8)
      C(3,4) = COEF(I,9)
      C(4,4) = COEF(I,10)
      C(2,1) = C(1,2)
      C(3,1) = C(1,3)
      C(4,1) = C(1,4)
      C(3,2) = C(2,3)
      C(4,2) = C(2,4)
      C(4,3) = C(3,4)
      RETURN
      END
C=DECK      SOLN
      SUBROUTINE SOLN
      COMMON/SEGS/NSEG,M2,I5(201),I2,NFAIL
      COMMON/ITERS/ITER
      COMMON/BKSIZE/ IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/IDENT/IPRW(20)
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/      /B(160000)
      DOUBLE PRECISION DB
#if cray
      DIMENSION DB(160000)
#else
      DIMENSION DB(80000)
#endif
      EQUIVALENCE (B(1),DB(1))
C
C     HOW THE WORKING SPACE STORAGE, B(33000), IS ALLOCATED...
C
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    M2 = NUMBER OF DEGREES OF FREEDOM IN PREBUCKLING PROBLEM
C    IMAXP = LENGTH OF BLOCK OF STIFFNESS MATRIX, PREBUCKLING PROBLEM
C
C/-M2-/--2*M2-/--2*M2-/2*IMAXP/2*IMAXP/--2*M2--/--M2--/
C/FLOC/--FTOT-/---F---/--AS---/--TP---/---DI---/PDIAG /
C/B(1)/DB(N1D)/DB(N2D)/DB(N3D)/DB(N4D)/DB(N13D)/B(N14)/
C1   N1D     N2D     N3D     N4D     N13D     N14
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     B(1)     NUMBERS WHICH INDICATE THE LOCATION OF THE MAIN DIAG-
C                  ONAL ELEMENTS RELATIVE TO THE BEGINNING OF EACH BLOCK
C                  OF THE STIFFNESS MATRIX
C   N1D   DB(N1D)  CURRENT ESTIMATE OF THE SOLUTION IN THIS NEWTON ITER.
C   N2D   DB(N2D)  SOLUTION VECTOR FOR CURRENT NEWTON ITERATION. THIS
C                  VECTOR SHOULD APPROACH ZERO AS CONVERGENCE IS ACHIEVE
C   N3D   DB(N3D)  STIFFNESS MATRIX FOR CURRENT NEWTON ITERATION
C   N4D   DB(N4D)  WORKING SPACE REQUIRED BY FACTR AND SOLVE
C   N13D  DB(N13D) STORAGE SPACE REQUIRED IN FACTORING PROCESS
C   N14   B(N14)   ELEMENTS ON THE DIAGONAL OF THE FACTORED MATRIX
C
      J = M2/2
      K = 2*J
      N1 = M2 + 1
      IF (K.NE.M2) N1 = M2 + 2
      N2 = N1 + 2*M2
      N3 = N2 + 2*M2
      N4 = N3 + 2*IMAXP
      N13 = N4 + 2*IMAXP
      N14 = N13 + 2*M2
      N2D = (M2+1)/2 + 1   + M2
      N3D = N2D + M2
      N4D = N3D + IMAXP
      N13D = N4D + IMAXP
      CALL FACTR(DB(N4D),DB(N3D),IPRW,DET,NEX,IBLKP,NGBKP,NKFP,B(1),
     1 B(N14),DB(N13D),KMAXP)
      CALL SOLVE(DB(N3D),DB(N2D),IBLKP,IPRW,NGBKP,B(1),B(N14),M2,1)
C     WRITE(6,10) ITER,ITRIAL
   10 FORMAT(62H FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION
     1 NO.    I3,9H, ITRIAL=   I3)
      RETURN
      END
C=DECK      PRERNG
      SUBROUTINE PRERNG(RING,UB,WB,R,RD,FK2,ROT,CHI,PSI,BCB,N,U,W,KK)
      DOUBLE PRECISION UB,WB,R,RD,FK2,ROT,CHI,PSI,BCB,U,W
      COMMON/FORCES/V(99),HF(99),FM(99)
      DIMENSION RING(20),UB(5),WB(5),ROT(5),PSI(5),BCB(5,5)
C
C     RING(2)-RING(5) CONTAINS XS,YS,E1,E2, RESPECTIVELY
C     RING(6) - RING(11) CONTAINS S11,S21,S22,S31,S32,S33, RESPECTIVELY
C     RING(12)- RING(17) CONTAINS T11,T21,T22,T31,T32,T33, RESPECTIVELY
C     RING(18)- RING(20) CONTAINS TN1,TN2,TN3, RESPECTIVELY
C
      XS = RING(2)
      YS = RING(3)
      E1 = RING(4)
      E2 = RING(5)
      XC = XS - E1
      YC = YS - E2
      T11 = RING(12)
      T21 = RING(13)
      T22 = RING(14)
      T31 = RING(15)
      T32 = RING(16)
      T33 = RING(17)
      S11 = T11
      S21 = T21
      S22 = T22
      S31 = T31
      S32 = T32
      S33 = T33
      TN1 = RING(18)
      TN2 = RING(19)
      TN3 = RING(20)
      RC = R + E1
      WS = U*RD + W*R*FK2 + YS*CHI - 0.5*XS*CHI*CHI
      AA1 = WS - YC*CHI + 0.5*XC*CHI*CHI
      AA2 = - 0.5*CHI*CHI
      AA3 = CHI
      SUM1 = AA1*S11 + AA2*S21 + AA3*S31 + TN1
      SUM2 = AA1*S21 + AA2*S22 + AA3*S32 + TN2
      SUM3 = AA1*S31 + AA2*S32 + AA3*S33 + TN3
      DO 20 I=1,N
      A1 = UB(I)*RD + WB(I)*R*FK2 + E2*ROT(I) - E1*CHI*ROT(I)
      A2 = - CHI*ROT(I)
      A3 = ROT(I)
      UC = UB(I)*R*FK2 - WB(I)*RD - E1*ROT(I) - E2*CHI*ROT(I)
      WC = UB(I)*RD + WB(I)*R*FK2 + E2*ROT(I) - E1*CHI*ROT(I)
      PSI(I) = SUM1*A1 + SUM2*A2 + SUM3*A3 -RC*(-V(KK)*UC +HF(KK)*WC
     1    + FM(KK)*ROT(I)) + PSI(I)
C
C     NOW GET CONTRIBUTION TO STIFFNESS MATRIX
      SUM1I = A1*T11 + A2*T21 + A3*T31
      SUM2I = A1*T21 + A2*T22 + A3*T32
      SUM3I = A1*T31 + A2*T32 + A3*T33
      DO 10 J=1,I
      A1IJ = -E1*ROT(I)*ROT(J)
      A2IJ = -ROT(I)*ROT(J)
      A3IJ = 0.0
      A1J = UB(J)*RD +WB(J)*R*FK2 +E2*ROT(J) - E1*CHI*ROT(J)
      A2J = -CHI*ROT(J)
      A3J = ROT(J)
      UCJ = UB(J)*R*FK2 - WB(J)*RD - E1*ROT(J) -E2*CHI*ROT(J)
      WCJ = UB(J)*RD + WB(J)*R*FK2 + E2*ROT(J) - E1*CHI*ROT(J)
      BCB(I,J) = BCB(I,J) + SUM1*A1IJ +SUM2*A2IJ +SUM3*A3IJ
     1 + SUM1I*A1J + SUM2I*A2J + SUM3I*A3J
     2 + RC*ROT(I)*ROT(J)*(-V(KK)*E2 + HF(KK)*E1)
   10 CONTINUE
   20 CONTINUE
      RETURN
      END
C=DECK      PRESTS
      SUBROUTINE PRESTS(JSEG,I5J,HS,NSEG,COEF,PR,BG,FNEW,F,BB,FW,THERM,
     1 FLOC,FFX,FFIX,IROWC,FITYPE,IMAX,QSAVE,NQ3,RING)
      DOUBLE PRECISION B,UB,F,C,QB,TN1,TN2,TN3,TN4,R,RD,FK1,FK2,CURD,RDS
      DOUBLE PRECISION C11,C12,C13,C14,P1,P3,       TNB,CB,QBCB,PSI,WB
      DOUBLE PRECISION USTAR,WSTAR,FC1,FC2,FC3,QD,D,FIFX1,FIFX3,FIFX4,BB
      DOUBLE PRECISION FNEW,QSAVE,H,FN,BCB,ROT,HPAST,HI,WBD
      DOUBLE PRECISION U,W,CHI,QBC1,F1,F2,F3,F4,DS,RI,FACT
      DIMENSION FNEW(*),QSAVE(50,3,5),IRSAVE(50),ISAVE(50,5)
      DIMENSION B(4,5),UB(5),F(*),FW(*),ROT(5),C(4,4),QB(4),TNB(5),WB(5)
      DIMENSION COEF(I5J,10),THERM(I5J,4),BG(I5J,5),PR(I5J,3)
      DIMENSION CB(4,5),QBCB(5),PSI(5),BCB(5,5),QD(3,5),D(3,5)
      DIMENSION FFX(201,6),FFIX(201,6),FLOC(*),FITYPE(201),IROWC(201)
      DIMENSION BB(2850),HS(*),WBD(5),RING(*),ITYPE(201)
      COMMON/NCONDS/NCOND
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/CMAXS/CMAX
      COMMON/FORCES/V(99),HF(99),FM(99)
      COMMON/TEMTUR/TEMP(201),P(201)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RING3/D1(201),D2(201)
      COMMON/IDENT/IPRW(20)
      COMMON/ITERS/ITER
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/OUTP/NPRT
      COMMON/THERWD/NWORD(201),NPLAST(201),NCREEP(201),NMAT(201),
     1              NALRED(201)
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/CHGBND/IICHNG,TCHANG(10),SBARCH(10)
      COMMON/TOMER/TOME,DTIME
      COMMON/FNDAT/FSTIF(201)
C BEG June 1990
      common/segs/nsegx, m2, i5x(201), i2x, nfailx
C END June 1990
      DO 10 I=1,201
   10 ITYPE(I) = FITYPE(I)
      DO 20 I=1,5
      UB(I) = 0.0
      WBD(I) = 0.0
   20 WB(I) = 0.0
      UB(2) = 0.5
      UB(4) = 0.5
C
C     READ IN PROPERTIES OF JSEG TH SEGMENT-- THERM,COEF,BG,PR
C             THERM = THERMAL LOADS TN1,TN2,TN3,TN4
C             COEF = CONSTITUTIVE LAW CIJ
C             BG = GEOMETRY PARAMETERS R, RPRIME, 1/R1, 1/R2, (1/R1)'
C             PR = PRESSURE COMPONENTS P1, P3, P3'
C
      FACT = 1.0
C     BEGIN LOOP OVER ALL POINTS AT WHICH ENERGY IS EVALUATED.
      HI = HS(1)
C
C  BEGIN LOOP OVER NUMBER OF POINTS IN SEGMENT JSEG...
C
      DO 440 IPOINT=1,I5J
C
      H = HS(IPOINT)
      HPAST = HI
      HI = 2.*H - HPAST
      II = I5TOT + IPOINT + 1
C     IW(II) CONTAINS GLOBAL ROW NUMBER OF EQ. CORRES. TO W(IPOINT)
      I2M = FW(II-1)
      I2P = FW(II+ 1)
      I0 = FW(II)
      I1M = I0 - 1
      I1P = I0 + 1
      I2PI0 = I2P - I0
      ICNKLA = IC + N - KLAP
      IF (I2PI0.EQ.ICNKLA) I1P = I0 + IC + 1
C     FILL LOCAL WALL PROPERTIES MATRIX CIJ
      CALL PGETC(IPOINT,I5J,COEF,C)
C BEG JUNE 1990
c     IF (ABS(C(1,3)/C(3,3)).LT.0.00001) C(1,3) = 0.
c     IF (ABS(C(2,3)/C(3,3)).LT.0.00001) C(2,3) = 0.
c     IF (ABS(C(1,4)/C(4,4)).LT.0.00001) C(1,4) = 0.
c     IF (ABS(C(2,4)/C(4,4)).LT.0.00001) C(2,4) = 0.
c     C(3,1) = C(1,3)
c     C(3,2) = C(2,3)
c     C(4,1) = C(1,4)
c     C(4,2) = C(2,4)
C END JUNE 1990
C     CALCULATE VARIOUS QUANTITIES NEEDED IN THE FOLLOWING
      DS = H
      IF (IPOINT.EQ.1.OR.IPOINT.EQ.I5J) DS=H/2.
      TN1 = THERM(IPOINT,1)
      TN2 = THERM(IPOINT,2)
      TN3 = THERM(IPOINT,3)
      TN4 = THERM(IPOINT,4)
C
C     WRITE(6,*)' TN1,TN2,TN3,TN4 from PRESTS=',TN1,TN2,TN3,TN4
C
      R  = BG(IPOINT,1)
      RD = BG(IPOINT,2)
      FK1= BG(IPOINT,3)
      FK2= BG(IPOINT,4)
      CURD=BG(IPOINT,5)
      CURD = 0.
C
C     IF (JSEG.EQ.121) THEN
C        WRITE(6,4222) JSEG,IPOINT,R,RD,FK1,FK2
C4222    FORMAT(' PRE1SEG=',I4,'  POINT=',I2,'  R,RD,FK1,FK2=',1P4E12.4)
C     ENDIF
C
      RDS = R*DS
      ISIG = 0
      RI = R
      IF (R.NE.0.) GO TO 30
      R = H/100000.
      ISIG = 1
      RDS = H**2/8.
   30 CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W, W' FOR VARIABLE SPACING
C
      CALL GETWWP(H,HI,HPAST,WB,WBD)
      C11 = C(1,1)
      C12 = C(1,2)
      C13 = C(1,3)
      C14 = C(1,4)
      P1 = PR(IPOINT,1)*P(JSEG)
      P3 = PR(IPOINT,3)*P(JSEG)
      ROT(1) = WBD(1)
      ROT(2) = -.5*FK1
      ROT(3) = WBD(3)
      ROT(4) = -.5*FK1
      ROT(5) = WBD(5)
C     GET LINEAR PART OF KINEMATIC RELATIONS
      CALL PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C     F CONTAINS STARTING VECTOR FOR CURRENT NEWTON-RAPHSON ITERATION.
      U = (F(I1P) + F(I1M))/2.
      W = WB(1)*F(I2M) + WB(3)*F(I0) + WB(5)*F(I2P)
C     CHI IS PREBUCKLING MERIDIONAL ROTATION
      CHI=ROT(1)*F(I2M) +ROT(2)*F(I1M) +ROT(3)*F(I0) +ROT(4)*F(I1P)
     1 +ROT(5)*F(I2P)
      DO 40 K=1,4
C     LET Q REPRESENT LOCAL PART OF F, THE STARTING VECTOR
C     QB = Q*B(TRANSPOSE)
   40 QB(K)=B(K,1)*F(I2M)+B(K,2)*F(I1M)+B(K,3)*F(I0)+B(K,4)*F(I1P)
     1 +B(K,5)*F(I2P)
C     QBC1 = Q*B(TRANSPOSE)*C(J,1)
      QBC1=QB(1)*C11 +QB(2)*C12 +QB(3)*C13 +QB(4)*C14
      F1 = QBC1*CHI + CHI*CHI*CHI*C11/2. + TN1*CHI
      F2 = QBC1 + 3.*CHI*CHI*C11/2. + TN1*FACT
C     F1,F2 = TERMS TO BE MULTIPLIED BY D(CHI)/D(Q)
C
C     BEGIN LOOP OVER LOCAL MATRIX FOR SHELL STRAIN ENERGY, WORK DONE
C     BY PRESSURE AND SURFACE TRACTION.  N=5 IN PREBUCKLING ANALYSIS.
C
      DO 70 I=1,N
C     TNB(I) = (THERMAL LOADS)*B(J,I)
      TNB(I) = TN1*B(1,I) +TN2*B(2,I) +TN3*B(3,I) +TN4*B(4,I)
      DO 50 K=1,4
   50 CB(K,I)=C(K,1)*B(1,I)+C(K,2)*B(2,I)+C(K,3)*B(3,I)+C(K,4)*B(4,I)
C     CB(K,I)= (C)*(B),  QBCB = Q*B(TRANSPOSE)*C*B
      QBCB(I)=QB(1)*CB(1,I)+QB(2)*CB(2,I)+QB(3)*CB(3,I)+QB(4)*CB(4,I)
C
C BEG NOV 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
C     IF (NPRT.GE.3.AND.JSEG.EQ.1.AND.IPOINT.LE.5.AND.ITER.EQ.0) THEN
C        WRITE(6,*)' JSEG,IPOINT,N,I=',JSEG,IPOINT,N,I
C        WRITE(6,*)' I2M,I1M,I0,I1P,I2P=',I2M,I1M,I0,I1P,I2P
C        WRITE(6,*)' F(I2M),F(I1M),F(I0),F(I1P),F(I2P)=',
C    1               F(I2M),F(I1M),F(I0),F(I1P),F(I2P)
C        WRITE(6,*)' DS,R,RD=',DS,R,RD
C        WRITE(6,*)' FK1,FK2,CURD=',FK1,FK2,CURD
C        WRITE(6,*)' H,HI,HPAST=',H,HI,HPAST
C        WRITE(6,*)' (ROT(I),I=I,5)=',(ROT(IXX),IXX=1,5)
C        WRITE(6,*)' (UB(I), I=1,5)=',(UB(IXX), IXX=1,5)
C        WRITE(6,*)' (WB(I), I=1,5)=',(WB(IXX), IXX=1,5)
C        WRITE(6,*)' (WBD(I),I=1,5)=',(WBD(IXX), IXX=1,5)
C        WRITE(6,*)' (C(1,I),I=1,4)=',(C(1,IXX),IXX=1,4)
C        WRITE(6,*)' (C(2,I),I=1,4)=',(C(2,IXX),IXX=1,4)
C        WRITE(6,*)' (C(3,I),I=1,4)=',(C(3,IXX),IXX=1,4)
C        WRITE(6,*)' (C(4,I),I=1,4)=',(C(4,IXX),IXX=1,4)
C        WRITE(6,*)' P1,P3,P(JSEG)=',P1,P3,P(JSEG)
C        WRITE(6,*)' PR(IPOINT,1),PR(IPOINT,3)=',
C    1               PR(IPOINT,1),PR(IPOINT,3)
C        WRITE(6,*)' TN1,TN2,TN3,TN4=',TN1,TN2,TN3,TN4
C        WRITE(6,*)' U,W,CHI=',U,W,CHI
C        WRITE(6,*)' PSI(I),F1,F2=',PSI(I),F1,F2
C        WRITE(6,*)' FSTIF(JSEG),QBC1=',FSTIF(JSEG),QBC1
C        WRITE(6,*)' FACT,TNB(I),QBCB(I)=',FACT,TNB(I),QBCB(I)
C        WRITE(6,*)' (CB(K,I),K=1,4)=',(CB(IXX,I),IXX=1,4)
C        WRITE(6,*)' ( B(K,I),K=1,4)=',( B(IXX,I),IXX=1,4)
C        WRITE(6,*)' (QB(K),K=1,4)=',(QB(IXX),IXX=1,4)
C     ENDIF
C
C     PSI(I) = NEW LOCAL RIGHT-HAND-SIDE VECTOR. CONTRIBUTION FROM
C     SHELL STRAIN ENERGY,    PRESSURE AND SURFACE TRACTIONS,
C     AND ELASTIC FOUNDATION WITH STIFFNESS FSTIF(JSEG) (MARCH 26, 1986)
C
      PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
     1 - P1*UB(I) -.5*P3*(2.*WB(I) +W*(B(1,I)+B(2,I))
     1 + WB(I)*(QB(1)+QB(2)) - CHI*UB(I) - ROT(I)*U )
     1 + FSTIF(JSEG)*W*WB(I)   )
C END NOV 2006
C
C     BCB(I,J) = LOCAL SHELL STRAIN ENERGY MATRIX,WITH 'LIVE' PRESSURE
C     AND ELASTIC FOUNDATION WITH STIFFNESS FSTIF(JSEG) (MARCH 26, '86)
C
      DO 60 J=1,I
      BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
     1 +B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
     2 CB(1,J)) -.5*P3*(WB(J)*(B(1,I)+B(2,I)) +WB(I)*(B(1,J)+B(2,J))
     3 -ROT(J)*UB(I) - ROT(I)*UB(J) ) + FSTIF(JSEG)*WB(I)*WB(J)  )
   60 CONTINUE
   70 CONTINUE
C BEG June 1990
C     IF (NPRT.EQ.3) WRITE(6,72) JSEG,IPOINT,(PSI(I),I=1,N)
C END June 1990
   72 FORMAT(' SHELL PART, SEG.,POINT,PSI(I)=',I3,I4,1P5E12.4)
C     END OF DOUBLE LOOP FOR SHELL STRAIN ENERGY LOCAL MATRIX.
C
C     ENERGY FOR IKTH RING IN JSEGTH SEGMENT
C     FIND WHERE WE ARE IN THE RING ARRAY
      IPOS = (KK-1)*IPRE + 1
      KSEG = RING(IPOS)/1000.
      FSEG = KSEG
      KPOINT = RING(IPOS) - FSEG*1000.
      IF (JSEG.NE.KSEG) GO TO 80
      IF (IPOINT.NE.KPOINT) GO TO 80
C     IF NO TRANSFER TO 90 THERE IS A RING AT THIS STATION
      CALL PRERNG(RING(IPOS),UB,WB,R,RD,FK2,ROT,CHI,PSI,BCB,N,U,W,KK)
      IF (NPRT.EQ.3) WRITE(6,73)IPOS,KK,(PSI(I),I=1,N)
   73 FORMAT(' SHELL+RING, IPOS,   KK,PSI(I)=',I4,I3,1P5E12.4)
C
C     END OF DOUBLE LOOP FOR RING STRAIN ENERGY, WORK DONE BY V,HF,FM.
      KK = KK +1
   80 CONTINUE
C
C     CONSTRAINT CONDITIONS
C
C     IFX(ICOND1,1) CONTAINS LOCATIONS OF 'MINUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
      IF (ICOND1.GT.NCOND) GO TO 190
      IFX1 = FFX(ICOND1,1)
      IF (IPOINT.EQ.(IFX1-JSEG*1000)) GO TO 90
      GO TO 190
C     FILL THE 'MINUS' PART OF THE CONSTRAINT CONDITION
C
C     IR,IR1,IR2, CONTAIN GLOBAL MATRIX ROW NOS. CORRESPONDING TO THE
C     LAGRANGE MULTIPLIERS ASSOCIATED WITH CONSTRAINT CONDS IDENTIFIED
C     BY IFX(ICOND1,1)
   90 IR = FFX(ICOND1,2)
      IR1 = IR + 1
      IR2 = IR + 2
      KKK = ICOND1
C     FIFX1, 3, AND 4 CONTAIN INTEGERS WHICH MAY OR MAY NOT RELEASE THE
C     CONSTRAINT CONDITIONS.
  100 CONTINUE
      FIFX1 = FFX(ICOND1,3)*CMAX
      FIFX3 = FFX(ICOND1,5)*CMAX
      FIFX4 = FFX(ICOND1,6)*CMAX
      IF (FFX(ICOND1,3).GT.1.1) FIFX1 = CMAX
      IF (FFX(ICOND1,5).GT.1.1) FIFX3 = CMAX
      IF (FFX(ICOND1,6).GT.1.1) FIFX4 = CMAX
      USPEC = 0.0
      WSPEC = 0.0
      CHISPC = 0.0
      IF (FFX(ICOND1,3).GT.1.1) USPEC = V(KK-1)
      IF (FFX(ICOND1,5).GT.1.1) WSPEC =HF(KK-1)
      IF (FFX(ICOND1,6).GT.1.1) CHISPC = FM(KK-1)
      IF (TOME.GE.TCHANG(1).AND.FFX(ICOND1,3).GT.1.1) FIFX1 = 0.0
      IF (TOME.GE.TCHANG(1).AND.FFX(ICOND1,5).GT.1.1) FIFX3 = 0.0
      IF (TOME.GE.TCHANG(1).AND.FFX(ICOND1,6).GT.1.1) FIFX4 = 0.0
C
  110 IF (RI.NE.0.) GO TO 120
      FIFX1 = 0.
      FIFX3 = CMAX
      FIFX4 = CMAX
  120 CONTINUE
      USTAR = R*FK2*U - RD*W
      WSTAR = RD*U + R*FK2*W
C     D1(KKK) = KKKTH RADIAL DISCONTINUITY
C     D2(KKK) = KKKTH AXIAL  DISCONTINUITY
      FC1 = D2(KKK) - D1(KKK)*CHI
      FC3 = D1(KKK) + D2(KKK)*CHI
C     FNEW( ) = NEW RIGHT-HAND-SIDE VECTOR FOR THIS N-R ITERATION.
      FNEW(IR) =(-USTAR +D1(KKK)*CHI +D2(KKK)*CHI**2/2. +USPEC)*FIFX1
      FNEW(IR1)=(-WSTAR -D2(KKK)*CHI +D1(KKK)*CHI**2/2. +WSPEC)*FIFX3
      FNEW(IR2)=(-CHI + CHISPC)*FIFX4
      FC2 = F(IR)*D2(KKK)*FIFX1 + F(IR1)*D1(KKK)*FIFX3
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO ENERGY OF 'MINUS' PART OF
C     CONSTRAINT AND BOUNDARY CONDITIONS.
C
      DO 140 I=1,N
      USTAR = R*FK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + R*FK2*WB(I)
C     QD( ) = LOCAL MATRIX CONTAINING 'MINUS' PART OF CONSTRAINTS
      QD(1,I) =        FIFX1*(-USTAR + FC3*ROT(I))
      QD(2,I) =  FIFX3*(-WSTAR - FC1*ROT(I))
      QD(3,I) = - FIFX4*ROT(I)
      PSI(I) = PSI(I) + F(IR)*QD(1,I) +F(IR1)*QD(2,I) +F(IR2)*QD(3,I)
      DO 130 J=1,I
  130 BCB(I,J) = BCB(I,J) + FC2*ROT(I)*ROT(J)
  140 CONTINUE
      IF (NPRT.EQ.3) WRITE(6,74)IPOINT,ICOND1,(PSI(I),I=1,N)
   74 FORMAT(' MINUS CONST.,PT.,ICOND,PSI(I)=',I4,I3,1P5E12.4)
C
C     END OF LOOP FOR 'MINUS' PART OF CONSTRAINT CONDITIONS.
C
      ICOND1 = ICOND1 + 1
C     FILL BB ARRAY WITH MINUS PART OF CONSTRAINT CONDITIONS.
C
      IF ((FLOC(IR)-FLOC(IR-1)).GT.FLOAT(N+1)) GO TO 160
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 1,2,AND5.
C
      ILOC1 = FLOC(IR)
      ILOC2 = FLOC(IR1)
      ILOC3 = FLOC(IR2)
      DO 150 I=1,N
      IB = ILOC1 - N - 1 + I
      BB(IB) = QD(1,I)
      IB = ILOC2 - N - 2 + I
      BB(IB) = QD(2,I)
      IB = ILOC3 - N - 3 + I
  150 BB(IB) = QD(3,I)
      GO TO 80
  160 IF (NGBKP(III).LT.IR) GO TO 170
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE
C     3 AND 4 AS LONG AS CURRENT QD(I,J) IS STORED IN CURRENT BLOCK.
C
      CALL FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,FLOC,QD,BB)
      GO TO 80
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 3 AND 4
C     EXCEPT THAT QD(I,J) HAS TO BE SAVED BECAUSE IT CONTRIBUTES
C     ELEMENTS TO A FUTURE BLOCK.
C
  170 IV = IV + 1
      IRSAVE(IV) = IR
      ISAVE(IV,1) = I2M
      ISAVE(IV,2) = I1M
      ISAVE(IV,3) = I0
      ISAVE(IV,4) = I1P
      ISAVE(IV,5) = I2P
      DO 180 I=1,IC
      DO 180 J=1,N
  180 QSAVE(IV,I,J) = QD(I,J)
      GO TO 80
C     FILL THE 'PLUS' PART OF THE CONSTRAINT CONDITION
C     IFIX(ICOND2,2) CONTAINS LOCATIONS OF 'PLUS' SIDE OF JUNCTURE IN
C     MONOTONICALLY INCREASING ORDER.
  190 IF (ICOND2.GT.NCOND) GO TO 290
      IFIX2 = FFIX(ICOND2,2)
      IF (IPOINT.EQ.(IFIX2-JSEG*1000)) GO TO 200
      GO TO 290
C     NO 'PLUS' SIDE IF CONDITION REPRESENTS BOUNDARY .
  200 IF (FFIX(ICOND2,2).EQ.FFIX(ICOND2,1)) GO TO 280
      KKK = ICOND2
      USTAR = R*FK2*U - RD*W
      WSTAR = RD*U + R*FK2*W
C     IR,IR1,IR2 HAVE SAME MEANING AS ABOVE.
      IR = IROWC(ICOND2)
      IR1 = IR + 1
      IR2 = IR + 2
      FIFX1 = FFIX(ICOND2,3)*CMAX
      FIFX3 = FFIX(ICOND2,5)*CMAX
      FIFX4 = FFIX(ICOND2,6)*CMAX
C     'PLUS' SIDE CONTRIBUTIONS ADDED TO FNEW( ).
      FNEW(IR)= FNEW(IR ) + USTAR*FIFX1
      FNEW(IR1)=FNEW(IR1) + WSTAR*FIFX3
      FNEW(IR2)=FNEW(IR2) + CHI*FIFX4
C
C     LOOP FOR CONTRIBUTION OF 'PLUS' SIDE TO LOCAL MATRIX.
C
      DO 210 I=1,N
      USTAR = R*FK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + R*FK2*WB(I)
C     D( ) = LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINT CONDS.
      D(1,I) = USTAR*FIFX1
      D(2,I) = WSTAR*FIFX3
      D(3,I) =ROT(I)*FIFX4
C
      PSI(I) = PSI(I) + F(IR)*D(1,I) + F(IR1)*D(2,I) +F(IR2)*D(3,I)
  210 CONTINUE
      IF (NPRT.EQ.3) WRITE(6,75)IPOINT,ICOND2,(PSI(I),I=1,N)
   75 FORMAT(' PLUS  CONST.,PT.,ICOND,PSI(I)=',I4,I3,1P5E12.4)
C
C
C     FILL BB( ) WITH LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINTS
C     ITYPE( ) = TYPE OF CONSTRAINT CONDITION. 5 MEANS SEGS. IN SERIES.
C
      IF (ITYPE(ICOND2).EQ.5) GO TO 260
C     THIS BRANCH FOR PLUS SIDES OF ALL TYPES OF CONSTRAINT CONDITIONS
C     EXCEPT ITYPE(ICOND2) = 5.
C
      ILOC1 = FLOC(IR)
      ILOC2 = FLOC(IR1)
      ILOC3 = FLOC(IR2)
      DO 220 I=1,N
      IB = ILOC1 - N - 1 + I
      BB(IB) = D(1,I)
      IB = ILOC2 - N - 2 + I
      BB(IB) = D(2,I)
      IB = ILOC3 - N - 3 + I
      BB(IB) = D(3,I)
  220 CONTINUE
      IF (IV.EQ.0) GO TO 280
      DO 230 IIV=1,IV
      IF (IR.EQ.IRSAVE(IIV)) GO TO 240
  230 CONTINUE
      GO TO 280
C     THIS BRANCH FOR INSERTION INTO GLOBAL STIFFNESS MATRIX OF
C     'MINUS' SIDE OF CONSTRAINT CONDITIONS REQUIRING VARIABLES FROM
C     PREVIOUS BLOCKS.
C
  240 DO 250 I=1,IC
      DO 250 J=1,N
  250 QD(I,J) = QSAVE(IIV,I,J)
      I2MS = ISAVE(IIV,1)
      I1MS = ISAVE(IIV,2)
      I0S  = ISAVE(IIV,3)
      I1PS = ISAVE(IIV,4)
      I2PS = ISAVE(IIV,5)
      CALL FILLBP(IC,N,I2MS,I1MS,I0S,I1PS,I2PS,IR,FLOC,QD,BB)
      GO TO 280
  260 CONTINUE
C     THIS BRANCH FOR PLUS SIDE OF CONSTRAINT CONDITION TYPE 5.
C
      DO 270 I=1,N
      I1 = IR2 + I
      ILOC1 = FLOC(I1)
      DO 270 J=1,IC
      IB = ILOC1 - IC + J - I
  270 BB(IB) = D(J,I)
  280 ICOND2 = ICOND2 + 1
      GO TO 190
  290 CONTINUE
C
C     FILL NEW R-H-S VECTOR
      FNEW(I2M) = FNEW(I2M) + PSI(1)
      FNEW(I1M) = FNEW(I1M) + PSI(2)
      FNEW(I0 ) = FNEW(I0 ) + PSI(3)
      FNEW(I1P) = FNEW(I1P) + PSI(4)
      FNEW(I2P) = FNEW(I2P) + PSI(5)
C
C     FILL BB( ) WITH LOCAL MATRIX CORRESPONDING TO IPOINT.
C
      DO 430 I=1,N
      GO TO (300,310,320,330,340),I
  300 J = I2M
      GO TO 350
  310 J = I1M
      GO TO 350
  320 J = I0
      GO TO 350
  330 J = I1P
      GO TO 350
  340 J = I2P
  350 CONTINUE
      DO 420 K=1,I
      GO TO (360,370,380,390,400),K
  360 INDX = I2M
      GO TO 410
  370 INDX = I1M
      GO TO 410
  380 INDX = I0
      GO TO 410
  390 INDX = I1P
      GO TO 410
  400 INDX = I2P
  410 CONTINUE
      ILOC1 = FLOC(J)
      IB = ILOC1 - J + INDX
      BB(IB) = BB(IB) + BCB(I,K)
  420 CONTINUE
  430 CONTINUE
  440 CONTINUE
C
C     END OF LOOP OVER MESH POINTS IN CURRENT SEGMENT.
C
      I5TOT = I5TOT + I5J + 2
      IF (I2P.EQ.NGBKP(III)) GO TO 450
      IR2 = I2P + IC
      IF (IR2.EQ.NGBKP(III)) GO TO 450
      GO TO 530
  450 NN = FLOC(I2P)*2.
      IF (IR2.EQ.NGBKP(III)) NN = 2.*FLOC(IR2)
C     STORE BLOCK NUMBER III ON DISK OR DRUM.
      IF (IBLKP.GT.1) CALL GASP(BB,NN,1,IPRW(III))
      IF (NPRT.LT.3.OR.ITER.GT.1) GO TO 500
C BEG June 1990
      IF (NQ3.EQ.0.and.nprt.lt.3) GO TO 500
C END June 1990
      ZERO = 0.0
      WRITE (6,460)III,ITER
  460 FORMAT(//56H PREFACTORED PREBUCKLING STIFFNESS MATRIX FOR BLOCK NO
     1.  I2,25H  FOLLOWS. ITERATION NO.  I2//)
      IF (III.EQ.1) NROWS = 0
      NROWS1 = NROWS + 1
      NROWS = NGBKP(III)
      DO 490 I=NROWS1,NROWS
      IF (I.NE.NROWS1) J1 = FLOC(I-1) + 1.
      IF (I.EQ.NROWS1) J1 = 1
      J2 = FLOC(I)
      J3 = 7 - J2 + J1
C BEG June 1990
C BEG NOV 2006 (decomment the following two lines)
C     IF (J3.GT.0) WRITE (6,470)I,(ZERO,J=1,J3),(BB(J),J=J1,J2)
C     IF (J3.LE.0) WRITE (6,480)I,(BB(J),J=J1,J2)
C END NOV 2006
C END June 1990
  470 FORMAT(1X,I3,8E12.4)
  480 FORMAT(1X,I3,(8E12.4))
  490 CONTINUE
C BEG June 1990
      write(6,492) (fnew(i), i=1,m2)
  492 format(/' right-hand-side vector, fnew[i]='/(1P10E12.4))
C END June 1990
  500 IF (IBLKP.EQ.1) GO TO 520
      DO 510 I=1,IMAX
  510 BB(I) = 0.0
  520 III = III + 1
  530 CONTINUE
      RETURN
      END
