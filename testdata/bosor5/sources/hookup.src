C=DECK      HOOKUPLIB
C
C  THIS IS THE HOOKUP LIBRARY (SOURCE FILE)
C
C
C
C=DECK      HOOKUP
      SUBROUTINE HOOKUP
C
C  200-SEGMENT VERSION OF BOSOR5
C     OVERLAY( 2,0 )          (CDC VERSION)
C     PROGRAM HOOKUP         (CDC VERSION)
C
      COMMON/OUTP/NPRT
      COMMON/IGOVN/ITTURE(201),IDEPTH(201),IREFZ(201),ILONG
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/IFLOWS/IFLOW,ICREEP,IJNCT,IJNTB,ITSTOR,ITHSTR,IZSTOR,IBSTOR
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/NCONDS/NCOND
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/ZREGNS/NREGNS,IREGN(10,2)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/JUNCT/IFIX(201,6),IFX(201,6),ITYPE(201)
      COMMON/RING3/D1(201),D2(201)
      COMMON/SEGBND/ISEGA,ISEGB,I2AB,NCONDB
      COMMON/RING4/D1B(201),D2B(201)
      COMMON/JUNCTB/IFIXB(201,6),IFXB(201,6),ITYPEB(201)
      COMMON/TLOADS/FTLOAD(100,2),NTIME(11),ITIME
      COMMON/ERROR/ERR
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(201),IROWCB(201),IIWP,IIWB
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
      COMMON/TOTPTS/M3
      COMMON/IDENTS/IC,IT,IR,IDS,IDB,IDP,IDSH,IM,ITS,ITSH,IZST,IDARC,IZX
      COMMON/RINDEX/JBEGIN,KBEGIN,LBEGIN,KRSEG
      COMMON/SKIPIT/ISKIP
      COMMON/SHEL/IWAL(201)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/INDAT/INFILE
      COMMON/ISETP/ISETUP
      CHARACTER*4 ANSOUT
      CHARACTER*4 CHARAC
      LOGICAL ANSL1
C
      DIMENSION IJUNCT(2614),IJNCTB(2614),ZAX(2000),ILOC(12000),IW(2400)
      DIMENSION B(60000)
   10 FORMAT(10I6)
   20 FORMAT(6I6,2E12.8)
   30 FORMAT(6E12.8)
   40 FORMAT(//48H ENTERING SUBROUTINE HOOKUP                         /)
      ISKIP = 0
      IF (ISKIP.EQ.1) GO TO 360
      IMAXAS = 160000
   50 IDENOM = 7
      IF (ICREEP.EQ.0) IDENOM = 4
      ILONGT = (IMAXAS - 28*I2 - IBSTOR - IPRE*NTOT - 3*LBEGIN)/IDENOM
      IF (ILONG.LT.ILONGT) GO TO 70
      WRITE (IFILE4,60)ILONGT,ILONG
   60 FORMAT(//  73H (TOTAL MESH POINTS)*(INTEGRATION PTS. THRU THICKNES
     1S) MUST BE LESS THAN  I5,13H . IT EQUALS
     2                                                            I5//)
      CALL ERREX
   70 CONTINUE
C
C
C     HOW LOADS VARY DURING CASE
      TEMPS = 0.0
C
C     NTIME(1) = NUMBER OF CALLOUTS FOR TIME INCREMENT
C     FTLOAD(I,1) I=1,NTIME(1) = THE VALUES OF THE TIME INCREMENTS
C     FTLOAD(I,2) I=1,NTIME(1) = THE TIMES CORRESPONDING TO THE VALUES
C                                OF DTIME. DTIME VARIES LINEARLY FOR
C                                TIMES BETWEEN CALLOUTS.
C     NFTIME = NUMBER OF DIFFERENT FUNCTIONS OF TIME (LOADS)
C     NTIME(J),J=2,NFTIME+1  QUANTITIES OF CALLOUTS FOR LOAD-FUNCTIONS
C                            OF TIME.
C     FTLOAD(J,1),J=NPOS,NPEND = F(T)  (LOAD-FUNCTION OF TIME)
C     FTLOAD(J,2),J=NPOS,NPEND = T     TIME CORRESPONDING TO LOAD-CALLOU
C
      WRITE(IOUT,71)
   71 FORMAT(6X,'H',9X,'$'/6X,'H',9X,'$ GLOBAL DATA BEGINS...')
      WRITE(IOUT,72)
   72 FORMAT(6X,'H',9X,'$ LOADING TIME FUNCTIONS FOLLOW')
      REWIND IFILE
      CALL DATUM(IFILE,24,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,25,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 73
      CALL DATUM(IFILE,26,0,0,INT,REALL,CHARAC,IOUT,0,1)
   73 CONTINUE
      CALL DATUM(IFILE,28,1,2,IUTIME,REALL,CHARAC,IOUT,0,1)
      IF (IUTIME.NE.0.AND.IUTIME.NE.1) THEN
       WRITE(6,*)' IUTIME  MUST BE EITHER   0   or   1'
       CALL ERREX
      ENDIF
C
C
      IF (IUTIME.EQ.0) GO TO 75
      CALL DATUM(IFILE,30,1,2,INT,DTIME,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,32,1,2,INT,TMAX,CHARAC,IOUT,0,1)
C
      NTIME(1) = 2
      FTLOAD(1,1) = DTIME
      FTLOAD(2,1) = DTIME
      FTLOAD(1,2) = 0.0
      FTLOAD(2,2) = TMAX
      GO TO 77
   75 CONTINUE
      CALL DATUM(IFILE,34,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,36,1,2,NTIME(1),REALL,CHARAC,IOUT,0,1)
C
      NT1 = NTIME(1)
      DO 76 I = 1,NT1
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,38,1,2,INT,FTLOAD(I,2),CHARAC,IOUT,I,IPROMP)
   76 CONTINUE
C
      DO 78 I = 1,NT1
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,40,1,1,INT,FTLOAD(I,1),CHARAC,IOUT,I,IPROMP)
   78 CONTINUE
C
   77 CONTINUE
      CALL DATUM(IFILE,42,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,44,1,2,NFTIME,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,45,0,0,INT,REALL,CHARAC,IOUT,0,1)
C
      ITIME = NFTIME
      NF1 = NFTIME + 1
      JJJ = 0
      DO 79 J = 2,NF1
      JJJ = JJJ + 1
      IPROMP = 1
      IF (JJJ.GT.1) IPROMP = 0
  772 CONTINUE
      CALL DATUM(IFILE,46,1,2,NTIME(J),REALL,CHARAC,IOUT,JJJ,IPROMP)
      IF (NTIME(J).LT.2.OR.NTIME(J).GT.50) THEN
       WRITE(6,*)' NPOINT  MUST BE IN THE RANGE FROM   2   TO   50'
       CALL ERREX
      ENDIF
C
   79 CONTINUE
C
      NPOS = 1
      DO 80 I=1,NFTIME
      REWIND IFILE
      I1 = I + 1
      NPOS = NPOS + NTIME(I)
      NPEND = NPOS + NTIME(I1) - 1
      CALL DATUM(IFILE,48,0,0,INT,REALL,CHARAC,IOUT,I,1)
      JJJ = 0
      DO 83 J = NPOS,NPEND
      JJJ = JJJ + 1
      IPROMP = 1
      IF (JJJ.GT.1) IPROMP = 0
      CALL DATUM(IFILE,50,1,2,INT,FTLOAD(J,2),CHARAC,IOUT,JJJ,IPROMP)
   83 CONTINUE
C
      CALL DATUM(IFILE,51,0,0,INT,REALL,CHARAC,IOUT,I,1)
      JJJ = 0
      DO 86 J = NPOS,NPEND
      JJJ = JJJ + 1
      IPROMP = 1
      IF (JJJ.GT.1) IPROMP = 0
      CALL DATUM(IFILE,52,1,2,INT,FTLOAD(J,1),CHARAC,IOUT,JJJ,IPROMP)
   86 CONTINUE
C
   80 CONTINUE
      WRITE (IFILE4,90)
   90 FORMAT(//46H  TIME STEPS AND LOADS AS FUNCTIONS OF TIME.     )
      WRITE (IFILE4,100)
  100 FORMAT(//43H  TIME STEPS(HOURS) AS FUNCTION OF TIME           //)
      NT1 = NTIME(1)
      DO 120 I=1,NT1
      WRITE (IFILE4,110)FTLOAD(I,2),FTLOAD(I,1)
  110 FORMAT(9H  TIME = 1PE12.4, 20H HOURS. TIME STEP =  1PE12.4,
     1 8H HOURS.  )
  120 CONTINUE
      WRITE (IFILE4,130)
  130 FORMAT(//93H  NOTE.... MAGNITUDE OF TIME STEP DETERMINED BY LINEAR
     1 INTERPOLATION BETWEEN TIME-CALLOUTS         /10X,95H TIME STEP CO
     2RRESPONDS TO THE INTERVAL IMMEDIATELY FOLLOWING THE CORRESPONDING
     3TIME-CALLOUT.                             )
      WRITE (IFILE4,140)ITIME
  140 FORMAT(// I3,47H DIFFERENT FUNCTIONS OF TIME USED FOR LOADING.
     1       /4X,105H ACTUAL LOADS ARE GIVEN BY THESE FUNCTIONS MULTIPLI
     2ED BY AMPLITUDE MULTIPLIED BY SPACIAL DISTRIBUTION              /)
      NPOS = 1
      DO 180 I=1,ITIME
      I1 = I + 1
      NPOS = NPOS + NTIME(I)
      NPEND = NPOS + NTIME(I1) - 1
      WRITE (IFILE4,150)I
  150 FORMAT(///29H  LOADING TIME FUNCTION TYPE     I3,10H FOLLOWS   //)
      DO 170 J=NPOS,NPEND
      WRITE (IFILE4,160)FTLOAD(J,2),FTLOAD(J,1)
  160 FORMAT(9H  TIME = 1PE12.4,15H HOURS. LOAD =   1PE12.4)
  170 CONTINUE
  180 CONTINUE
      JPLOT = 0
      DO 190 I=1,20
      LPLOT(I) = 0
  190 KPLOT(I) = 0
      IFLAG = 0
      DO 215 I = 1,201
      ITYPE(I) = 0
      ITYPEB(I) = 0
      DO 215 J = 1,6
      IFIX(I,J) = 0
      IFIXB(I,J) = 0
      IFXB(I,J)  = 0
  215 IFX(I,J) = 0
      DO 216 I = 1,6
      ISTOP0(I) = 0
  216 ISTOP1(I) = 0
C
      CALL CONSTR
C
      DO 220 I = 1,201
      D1B(I) = D1(I)
  220 D2B(I) = D2(I)
C
      IF (ISETUP.EQ.1) RETURN
C
      WRITE (IFILE4,250)
  250 FORMAT(//45X,33H CONSTRAINT CONDITION DATA FOLLOW    //)
      CALL WRCON(NCOND,IFIX,D1,D2)
  260 IF (NSEG.LE.201) GO TO 280
      WRITE (6,270)
  270 FORMAT(//52H NSEG TOO LARGE. MAXIMUM NUMBER OF SEGMENTS =201.  //)
      CALL ERREX
  280 IF (NCOND.LE.201) GO TO 300
      WRITE (6,290)
  290 FORMAT(//62H NCOND TOO LARGE. MAXIMUM NUMBER OF CONSTRAINT POINTS
     1=201.   //)
  300 CONTINUE
C
C
      ERR = 0.001
C     SUBROUTINE ISHIFT ADJUSTS CONSTRAINT CONDITION CALLOUTS TO
C     ALLOW FOR 'EXTRA' MESH POINTS INSERTED NEAR EDGES.
      CALL ISHIFT(JPLOT,KPLOT,I5)
      CALL ISHIFT(NCOND,IFIX(1,1),I5)
      CALL ISHIFT(NCOND,IFIX(1,2),I5)
      CALL GASP(ZAX,I2,3,IZX)
      CALL ZGLOBE(ZAX,I5,NSEG,IFIX,NCOND,D2)
      CALL GASP(ZAX,I2,1,IZX)
      IF (NCOND.GE.NSEG) GO TO 320
      WRITE (6,310)NCOND,NSEG
  310 FORMAT(54H NCOND MUST BE GREATER THAN OR EQUAL TO NSEG.          /
     1       54H JUNCTURE CONDITIONS BETWEEN SEGMENTS MUST BE INCLUDED /
     2       54H AS CONSTRAINT CONDITIONS.                             /
     3        9H NCOND = I3,       8H NSEG =    I2//)
      CALL ERREX
  320 CONTINUE
C
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE PRESTRESS MATRIX
      CALL SKILIN(5,3,3,IFIX,ILOC,I2,8,M2,IMAXP,IBLKP,NGBKP,NKFP,NSEG,I5
     1,NCOND,IFX,IROWCP,IW,ITYPE,KMAXP,D1,D2,1,NSEG)
C
C     PREBUCKLING GLOBAL EQUATION NO.S OF W-POINTS STORED
      II = I2 + 2*NSEG
C     II = TOTAL NO. OF W-POINTS IN ENTIRE SHELL, INCLUDING FICT. PTS.
      IIWP = 0
      CALL GASP(IW,II,1,IIWP)
C     LOCATION OF MAIN-DIAGONAL OF PREBUCKLING MATRIX STORED
      ILOCP = 0
      CALL GASP(ILOC,M2,1,ILOCP)
      K = 0
      DO 330 I=1,6
      DO 330 J=1,201
      K = K + 1
  330 IJUNCT(K) = IFIX(J,I)
      DO 340 I=1,6
      DO 340 J=1,201
      K = K + 1
  340 IJUNCT(K) = IFX(J,I)
      DO 350 J=1,201
      K = K + 1
  350 IJUNCT(K) = ITYPE(J)
      IJNCT = 0
      CALL GASP(IJUNCT,2614,1,IJNCT)
  360 CONTINUE
      ISEGA = 1
      ISEGB = NSEG
      NCONDB = NCOND
      WRITE (IFILE4,400)ISEGA,ISEGB
  400 FORMAT(49H BUCKLING OR VIBRATION ANALYSIS INVOLVES SEGMENTS  I3 ,
     1  9H  THROUGH  I3//)
      WRITE (IFILE4,410)
  410 FORMAT(//40X,66H CONSTRAINT CONDITIONS FOR STABILITY OR VIBRATION
     1PROBLEM FOLLOW    //)
      CALL WRCON(NCONDB,IFIXB,D1B,D2B)
      IF (ISKIP.EQ.0) GO TO 430
      CALL GASP(B,544,-3,1)
      NSEG = B(501)
      I2 = B(502)
      DO 420 I=503,527
      I1 = I - 502
  420 I5(I1) = B(I)
      NTOT = B(528)
      IPRE = B(529)
  430 CONTINUE
      CALL ISHIFT(NCONDB,IFIXB(1,1),I5)
      CALL ISHIFT(NCONDB,IFIXB(1,2),I5)
      IF (ISTOP0(1).EQ.0) GO TO 440
      ISEG = ISTOP0(1)/1000
      IPT = ISTOP0(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 2
  440 IF (ISTOP1(1).EQ.0) GO TO 450
      ISEG = ISTOP1(1)/1000
      IPT = ISTOP1(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 2
  450 CONTINUE
      I2AB = 0
      DO 460 I=ISEGA,ISEGB
  460 I2AB = I2AB + I5(I)
      IIB = I2AB + 2*(ISEGB-ISEGA+1)
C
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE STABILITY OR
C     VIBRATION OR NONSYMMETRIC STRESS MATRICES. STIFFNESS, LOAD-
C     GEOMETRIC, AND MASS MATRICES ALL HAVE THE SAME TEMPLATE.
      ISEGDF = ISEGB - ISEGA
      IF (NCONDB.GE.ISEGDF) GO TO 480
      WRITE (6,470)NCONDB,ISEGDF
  470 FORMAT(54H NCONDB MUST BE GREATER THAN OR EQUAL TO ISEGB-ISEGA.  /
     1       54H JUNCTURE CONDITIONS BETWEEN SEGMENTS MUST BE INCLUDED /
     2       54H AS CONSTRAINT CONDITIONS.                             /
     3       10H NCONDB =   I3,   15H ISEGB-ISEGA =      I3//)
      CALL ERREX
  480 CONTINUE
      CALL SKILIN(7,4,4,IFIXB,ILOC,I2,11,M3,IMAXB,IBLK,NGBK,
     1 NKF,NSEG,I5,NCONDB,IFXB,IROWCB,IW,ITYPEB,KMAXB,D1B,D2B,
     2 ISEGA,ISEGB)
C
C     GLOBAL EQUATION NO.S OF W-POINTS STORED FOR BUCKLING OR VIB OR
C     NON-SYMMETRIC STRESS PROBLEMS
      IIWB = 0
      CALL GASP(IW,IIB,1,IIWB)
C     LOCATION OF MAIN-DIAGONAL OF STABILITY,VIBRATION, OR NONSYMMETRIC
C     STRESS MATRICES IS STORED
      ILOCB = 0
      CALL GASP(ILOC,M3,1,ILOCB)
      K = 0
      DO 490 I=1,6
      DO 490 J=1,201
      K = K + 1
  490 IJNCTB(K) = IFIXB(J,I)
      DO 500 I=1,6
      DO 500 J=1,201
      K = K + 1
  500 IJNCTB(K) = IFXB(J,I)
      DO 510 J=1,201
      K = K + 1
  510 IJNCTB(K) = ITYPEB(J)
      IJNTB = 0
      CALL GASP(IJNCTB,2614,1,IJNTB)
  520 CONTINUE
      IF (ISKIP.EQ.0) GO TO 560
      B(530) = ISEGA
      B(531) = ISEGB
      B(532) = NCONDB
      DO 530 I=533,544
      I1 = I - 532
  530 B(I) = ISTOP0(I1)
      CALL GASP(B,544,-1,1)
      ILONG = 11*I2 + 2*NSEG + 2614 + M3
      CALL GASP(B,ILONG,3,IWAL(8))
      N7 = 10*I2 + 1
      II = I2 + 2*NSEG
      DO 540 I=1,II
      I1 = N7 + I - 1
  540 B(I1) = IW(I)
      N8 = N7 + II
      DO 550 I=1,2614
      I1 = N8 + I - 1
  550 B(I1) = IJNCTB(I)
      N9 = N8 + 2614
      DO 555 I = 1,M3
      I1 = N9 + I - 1
  555 B(I1) = ILOC(I)
      CALL GASP(B,ILONG,1,IWAL(8))
  560 CONTINUE
      RETURN
C     RETURN NOT NEEDED IN CDC VERSION
      END
C=DECK      GETBLK
      SUBROUTINE GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX
     1 , ISEGA,ISEGB,I222,NSUB)
C
C     CALCULATES LAST ROW NO. OF EACH BLOCK,NGBK(J)
C		 TOTAL NUMBER OF BLOCKS,IBLK
C		 MINIMUM UNKNOWN NO. IN	EACH BLOCK, NKF(J)
C		 LOCATION ILOC(II) OF ALL MAIN DIAGONAL	ELEMENTS
C
C
C     END OF BLOCK ALWAYS COINCIDES WITH END OF	SEGMENT.
C
      DIMENSION	IKF(*),ILOC(*),NGBK(20),NKF(20),KMAX(20)
      DIMENSION	IRANK(201),ITOT(201),ILAST(201)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/PRMOUT/IFILE3,IFILE4
C
C     CALCULATE	TOTAL NUMBER OF	ELEMENTS IN EACH SEGMENT,ITOT(J),
C     AND THE EQUATION NUMBER OF THE LAST EQUATION IN EACH SEGMENT,
C     ILAST(J).
C
C     CALCULATE	IMAX
      IMAX1 = (160000 - 8*IROW)/4
      IMAX2 = (160000 - 24*I222-IPRE*NTOT-5*IROW-2*NSEG-3614)/2
      IF (NSUB.GT.5) IMAX1 = (160000 - 8*IROW - 4*IROW - 4)/4
C BEG JAN 1996
C     IF (NSUB.GT.5)IMAX2=(160000-31*I222-IROW-IPRE*NTOT-2*NSEG-8614)/2
      IF (NSUB.GT.5)
     1 IMAX2=(160000-31*I222-4*IROW-IPRE*NTOT-2*NSEG-7114)/4
C END JAN 1996
      IMAX = MIN0(IMAX1,IMAX2)
      II = 0
      DO 30 J=ISEGA,ISEGB
      IRANKJ = IRANK(J)
      ITOT(J) =	0
      DO 10 I=1,IRANKJ
      II = II +	1
      ITOT(J) =	ITOT(J)	+ IKF(II) + 1
   10 CONTINUE
      IF (ITOT(J).GT.IMAX) WRITE (IFILE4,20)ITOT(J),J,IMAX
   20 FORMAT(//11H BLOCK SIZE I5,12H OF SEG. NO. I3,24H EXCEEDS MAX. ALL
     1OWABLE I5,53H. RUN ABORT. REDUCE DEG. OF FREEDOM OR RENUMBER SEGS.
     2  /59H THIS MESSAGE USUALLY RESULTS FROM A JUNCTURE CONDITION    ,
     3  /59H THAT SPANS MANY DEGREES OF FREEDOM ,OR FROM A GIVEN HIGH- ,
     4  /59H NUMBERED SEGMENT THAT IS CONNECTED AT SEVERAL DIFFERENT   ,
     5  /59H POINTS ALONG ITS LENGTH TO LOWER NUMBERED SEGMENTS.       ,
     6  /59H IN THE FORMER CASE RENUMBERING SEGMENTS HELPS. IN THE     ,
     7  /59H LATTER CASE, DIVIDE UP THE OFFENDING SEGMENT INTO MORE    ,
     8  /59H THAN ONE SEGMENT SUCH THAT THE SEVERAL JUNCTURE CONDI-    ,
     9  /56H TIONS FALL INTO DIFFERENT HIGHER NUMBERED SEGMENTS.    //)
      IF (ITOT(J).GT.IMAX) CALL	EXIT
      ILAST(J) = II
   30 CONTINUE
C
C     GIVEN IMAX, CALCULATE TOTAL NUMBER OF BLOCKS, IBLK AND EQUATION
C     NUMBER OF	LAST EQUATION IN BLOCKS, NGBK(J).
C
      ISUM = 0
      IBLK = 1
      J	= ISEGA
   40 ISUM = ISUM + ITOT(J)
      IF (ISUM-IMAX) 60,60,50
   50 J	= J - 1
      ISUM = 0
      NGBK(IBLK) = ILAST(J)
      IBLK = IBLK + 1
   60 J	= J + 1
      IF (J.GT.ISEGB) GO TO 70
      GO TO 40
   70 CONTINUE
      NGBK(IBLK) = IROW
C
C     CALCULATE	ILOC(II),NKF(J). .
C	 ILOC(II) = LOCATION IN	CURRENT	BLOCK OF MAIN DIAGONAL
C	 NKF(J)	= MINIMUM UNKNOWN NUMBER IN JTH	BLOCK
C
      II = 0
      ILASTJ = 0
      DO 90 J=1,IBLK
      NKF(J) = IROW
      ISUM = 0
      KMAX(J) =	0
      ILASTS = ILASTJ +	1
      ILASTJ = NGBK(J)
      DO 80 I=ILASTS,ILASTJ
      II = II +	1
      ISUM = ISUM + IKF(II) +1
      ILOC(II) = ISUM
      NKF(J) = MIN0(NKF(J),(II-IKF(II)))
      KMAX(J) =	MAX0(KMAX(J),IKF(II))
   80 CONTINUE
   90 CONTINUE
      IF (IBLK.GT.1) GO	TO 100
      IMAX = ILOC(IROW)
  100 CONTINUE
      IF (IBLK.GT.20) THEN
         WRITE(IFILE4,111) IBLK
  111    FORMAT(//' ************* NOTE **************'/
     1' ******************************************'//
     1' NUMBER OF MATRIX BLOCKS (',I3,') EXCEEDS MAXIMUM OF 20. REDUCE'/
     1' THE SIZE OF YOUR MODEL.'//
     1' ******************************************'/)
        CALL ERREX
      ENDIF
      RETURN
      END
C=DECK      GETIW
C./	 ADD   NAME=GETIW
      SUBROUTINE GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX,ISEGA,ISEGB)
C     CALLED FROM SKILIN, WHOSE TRACE IS READIT,MAIN.
C     STORES GLOBAL EQUATION NUMBERS CORRESPONDING TO W-COMPONENTS IN IW
C
      DIMENSION I5(201),IFIX(201,6),IW(*),IRANK(201),INDX(201)
      ICONDT = 0
      I5TOT = 0
      IROW = 0
      DO 30 ISEG=ISEGA,ISEGB
      ICOND = ICONDT + 1
      ICONDT = ICONDT + INDX(ISEG)
      IW(I5TOT+1) = IROW + 1
      I5S = I5(ISEG)
      DO 20 I=1,I5S
      II = I5TOT + I + 1
      KIC = 0
      IF (ICOND.GT.ICONDT) GO TO 10
      JMESH = IFIX(ICOND,2) - ISEG*1000
      IF (I.EQ.(JMESH+2)) KIC = 1
      IF (I.EQ.(JMESH+2)) ICOND = ICOND + 1
   10 IW(II) = IW(II-1) + N - K + KIC*IC
   20 CONTINUE
      KIC = 0
      IF ((JMESH+1).EQ.I5S) KIC = 1
      IW(II+1) = IW(II) + N - K + KIC*IC
      I5TOT = I5TOT + I5S + 2
      IROW = IROW + IRANK(ISEG)
   30 CONTINUE
      RETURN
      END
C=DECK      ISHIFT
      SUBROUTINE ISHIFT(N,INDEX,I5)
C     CALLED FROM READIT. POINTS SHIFTED BECAUSE EXTRA MESH POINTS
C     HAVE BEEN ADDED NEAR ENDS OF SEGMENT.
C
      DIMENSION INDEX(*),I5(201)
      IF (N.EQ.0) RETURN
      DO 10 I=1,N
      ISEG = INDEX(I)/1000
      IPT = INDEX(I) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) INDEX(I) = INDEX(I) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) INDEX(I) = INDEX(I) + 2
   10 CONTINUE
      RETURN
      END
C=DECK      ZGLOBE
      SUBROUTINE ZGLOBE(Z,I5,NSEG,IFIX,NCOND,D2)
      DIMENSION IFIX(201,6),Z(*),IBEGIN(201),ISEG(201),D2(201),I5(201)
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      IF (NCOND.EQ.0) GO TO 100
      IBEGIN(1) = 1
      DO 10 I=2,NSEG
      I1 = I - 1
   10 IBEGIN(I) = IBEGIN(I1) + I5(I1)
      DO 20 I=1,NSEG
   20 ISEG(I) = 0
      ISEG(1) = 1
      K = 1
      ITHRU = 0
   30 IF (K.GE.NSEG) GO TO 100
      ITHRU = ITHRU + 1
      IF (ITHRU.LT.1000) GO TO 34
      WRITE(6,32)
   32 FORMAT(//75H SEGMENTS NOT ALL JOINED TOGETHER. INSPECT JUNCTURE CO
     1NDITIONS CAREFULLY.                                 )
      CALL ERREX
   34 CONTINUE
      DO 90 I=1,NCOND
      IT1 = IFIX(I,1)/1000
      IT2 = IFIX(I,2)/1000
      IF (IT1.EQ.IT2) GO TO 90
      JSAVE1 = 0
      JSAVE2 = 0
      DO 50 J=1,NSEG
      IF (IT1.NE.ISEG(J)) GO TO 40
      JSAVE1 = J
   40 IF (IT2.NE.ISEG(J)) GO TO 50
      JSAVE2 = J
   50 CONTINUE
      IF (JSAVE1.NE.0.AND.JSAVE2.NE.0) GO TO 90
      IF (JSAVE1.EQ.0.AND.JSAVE2.EQ.0) GO TO 90
      IZ1 = IFIX(I,1) -IT1*1000
      IZ2 = IFIX(I,2) - IT2*1000
      I1 = IBEGIN(IT1)
      I2 = IBEGIN(IT2)
      D = D2(I)
      IF (IT1.GT.IT2) D = -D2(I)
      ISUM1 = I1 + IZ1 - 1
      ISUM2 = I2 + IZ2 - 1
      IF (JSAVE1.EQ.0) GO TO 70
      ZDIFF = Z(ISUM1) + D - Z(ISUM2)
      IEND = I2 + I5(IT2) - 1
      DO 60 II=I2,IEND
   60 Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT2
      GO TO 90
   70 CONTINUE
      ZDIFF = - Z(ISUM1)- D + Z(ISUM2)
      IEND = I1 + I5(IT1) - 1
      DO 80 II=I1,IEND
   80 Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT1
   90 CONTINUE
      GO TO 30
  100 CONTINUE
      IF (JPLOT.EQ.0) GO TO 130
      II = 0
      K = 1
      DO 120 J=1,NSEG
      I5J = I5(J)
      DO 110 I=1,I5J
      II = II + 1
      ISTA = J*1000 + I
  105 CONTINUE
      IF (K.GT.JPLOT) GO TO 130
      IF (KPLOT(K).NE.ISTA) GO TO 110
      KPLOT(K) = II
      K = K + 1
      GO TO 105
  110 CONTINUE
  120 CONTINUE
  130 CONTINUE
      RETURN
      END
C=DECK      SKILIN
      SUBROUTINE SKILIN(N,K,IC,IFIX,ILOC,I222,IBAND,IROW,IMAX,IBLK,
     1 NGBK,NKF,NSEG,I5,NCOND,IFX,IROWC,IW,ITYPE,KMAX,D1,D2,ISEGA,ISEGB)
      DIMENSION IFIX(201,6),IKF(12000),IRANK(201),NGBK(20),NKF(20)
      DIMENSION KMAX(20)
      COMMON/OUTP/NPRT
      COMMON/PRMOUT/IFILE3,IFILE4
      DIMENSION D1(201),D2(201)
      DIMENSION INDX(201),I5(201),ITYPE(201),ILOC(*)
      DIMENSION IW(*),IROWC(201),IEXP(201),IFX(201,6)
C     THIS SUBROUTINE CALCULATES SKYLINE AND BLOC CONFIGURATION OF PRE-
C     BUCKLING AND STABILITY STIFFNESS MATRICES.SKYLINE DEPENDS ON CON-
C     STRAINT CONDITION TYPE, WHICH CAN BE DETERMINED FROM THE ARRAY
C     IFIX(I,J). THE MESH POINT DESIGNATED BY IFIX(I,1) IS CONNECTED
C     TO THAT DESIGNATED BY IFIX(I,2), IN WHICH IFIX(I,2).GT.IFIX(I,1).
C     ELEMENTS OF THE VECTOR IFIX(I,2) ARE ARRANGED IN ASCENDING ORDER.
C     I5(J) CONTAINS THE NUMBER OF MESH POINTS AT WHICH ENERGY IS
C     EVALUATED IN THE JTH SEGMENT.
C
C     IFIX(I,3) THROUGH IFIX(I,6) CONTAIN EITHER ONE OR ZERO,
C     DEPENDING UPON WHETHER OR NOT CONSTRAINT CONDITIONS CORRES-
C     PONDING TO USTAR,VSTAR,WSTAR,AND BETA ARE TO BE ENFORCED.
C
C     CONSTRAINT CONDITION INDICATOR IFIX(I,J) MUST BE ORDERED PROPERLY
C     BEFORE MATRIX CONFIGURATION ESTABLISHED.
C
      IF (NCOND.GE.2) CALL SORT(IFIX,NCOND,2,D1,D2)
      I5TOT = 0
      IF (NCOND.EQ.0) GO TO 30
      DO 20 I=1,NCOND
      JSEG = IFIX(I,2)/1000
      IDIF = IFIX(I,2) - IFIX(I,1)
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) WRITE(6,10 ) I
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) CALL ERREX
   10 FORMAT(//29H CONSTRAINT CONDITION NUMBER ,I4,13H IS ILLEGAL. ,
     1/56H THE FOLLOWING RULES FOR CONSTRAINT CONDITIONS EXIST....,
     1/56H                                                        ,
     1/58H 1. CONSTRAINTS TO GROUND MUST HAVE AT LEAST TWO INTERMED-,
     1/56H    IATE NODES THAT ARE NOT CONSTRAINED.                ,
     1/60H 2. IF SEVERAL SEGMENTS ARE JOINED AT ONE POINT, THE HIGHER-,
     1/59H    NUMBERED SEGMENTS SHOULD EACH BE ATTACHED TO THE LOWEST,
     1/59H    NUMBERED SEGMENT INVOLVED IN THE JUNCTION.             ,
     1/60H 3. IF THE END OF SEG. J  IS CONNECTED TO ANY PREVIOUS POINT,
     1/60H    OR TO GROUND (B.C.), THEN THE BEGINNING OF SEGMENT J + 1,
     1/59H    CANNOT BE CONNECTED TO THE END OF SEGMENT  J .         ,
     1/59H 4. IF A POINT A IS INVOLVED IN A JUNCTURE CONDITION WITH A,
     1/59H    PREVIOUS NON-ADJACENT POINT  B ,  THAT POINT  A  CANNOT,
     1/59H    ALSO BE CONSTRAINED TO GROUND.   NOTE THAT THE FIRST   ,
     1/59H    POINT IN SEG.  J+1  IS CONSIDERED TO BE ADJACENT TO THE,
     1/49H    LAST POINT IN SEG.  J .                      )
      IEXP(I) = 0
      ITYPE(I) = 0
   20 IROWC(I) = 0
   30 IROW = 0
      ITYPE(1) = 0
      IF (NCOND.EQ.0) IFIX(1,2) = 0
      IF (NCOND.EQ.0) IFX(1,1) = 0
      ITOT = 1
      DO 40 I=1,12000
   40 IKF(I) = N-1
C     SKYLINE STORED IN ARRAY IKF(II)
      DO 310 J=ISEGA,ISEGB
      DO 50 I=1,N
      IROWI = IROW + I
   50 IKF(IROWI) = I - 1
C     FIRST GET NUMBER OF CONSTRAINT CONDITIONS WITHIN CURRENT SEGMENT.
      ITEST = J*1000 + I5(J)
      INDX(J) = 0
      IF (NCOND.EQ.0) GO TO 70
      DO 60 I=ITOT,NCOND
      IDIF = ITEST - IFIX(I,2)
      IF (IDIF.LT.0) GO TO 70
      INDX(J) = INDX(J) + 1
   60 CONTINUE
   70 CONTINUE
C     INDX(J) NOW EQUAL TO NO. OF CONSTRAINT CONDS. IN JTH SEGMENT.
      ITOTS = ITOT
      ITOT = ITOT + INDX(J)
      IRANK(J) = (N-K)*I5(J) + INDX(J)*IC + K
C     N = DIMENSION OF THE LOCAL ENERGY MATRIX.
C     K = OVERLAP DIMENSION OF THE LOCAL ENERGY MATRICES
C     IC= NUMBER OF CONSTRAINT CONDITIONS CORRESPONDING TO GIVEN IFIX(I,
C
      IF (INDX(J).EQ.0) GO TO 300
      ITOT1 = ITOT - 1
      DO 290 I=ITOTS,ITOT1
      IDIF = IFIX(I,2) - IFIX(I,1)
      IDIFB = ITEST - IFIX(I,2)
      IF (IDIF.NE.0) GO TO 80
C
C     IDIF=0 SIGNIFIES A SIMPLE 'ONE-SIDED' CONSTRAINT CONDITION RATHER
C     THAN A JUNCTURE CONDITION. DETERMINE NOW WHETHER CONDITION
C     CORRESPONDS TO SEGMENT END.
C
      ITYPE(I) = 1
      IF (IDIFB.EQ.0) ITYPE(I) = 2
C     ITYPE(I) = 1 SIGNIFIES SIMPLE CONSTRAINT CONDITION NOT AT END OF
C     SEGMENT.
C     ITYPE(I) = 2 SIGNIFIES BOUNDARY CONDITION AT END OF SEGMENT.
      GO TO 100
   80 CONTINUE
      IF (IDIFB.EQ.0) ITYPE(I) = 3
C
C     ITYPE(I) = 3 SIGNIFIES SEGMENT END CONNECTED TO NON-ADJACENT
C     PREVIOUS POINT.
C
      IF (IDIFB.EQ.0) GO TO 100
      ITYPE(I) = 4
C     ITYPE(I) = 4 SIGNIFIES JUNCTURE COND. NOT AT END I5(J) OF JTH SEG.
C
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.EQ.1) GO TO 90
      GO TO 100
   90 CONTINUE
C     JUNCTURE CONDITION AT BEGINNING OF JTH SEGMENT.
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      IF (LMESH.NE.I5(L)) GO TO 100
      IF ((J-L).EQ.1) ITYPE(I) = 5
C     ITYPE(I) = 5 SIGNIFIES END OF SEGMENT L JOINED TO BEGINNING
C     OF SEGMENT L+ 1.   (L+1 = J)
  100 CONTINUE
C     NOW WE HAVE DETERMINED IRANK(J) AND ITYPE(I).
C     NOW DETERMINE THE SKYLINE ARRAY IKF(II) DEPENDING ON TYPE OF
C     CONSTRAINT CONDITION.
C
      IT = ITYPE(I)
      GO TO (130,110,130,130,260),IT
  110 CONTINUE
C     BOUNDARY CONDITION AT END OF SEGMENT.....
C
      I1 = IROW + IRANK(J) - IC + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 120 II=I1,I2
  120 IKF(II) = II - I1 + N
      GO TO 290
  130 CONTINUE
C     CONSTRAINT CONDITIONS CORRESPONDING TO ITYPE(I) = 1,3, AND 4....
C
C     FIRST CALCULATE ROW NUMBER OF ITYPE(I) = 1,3, AND 4 CONSTRAINTS..
C
      ICON = I - ITOTS
      JJMESH = 0
C     ICON = NO. OF CONSTRAINT PTS IN THE JTH SEG. PRECEDING THE CURRENT
C     CONSTRAINT POINT.
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.NE.1) GO TO 160
      IF (I.NE.ITOTS) GO TO 140
      I1 = I + 1
      JJMESH = IFIX(I1,2) - J*1000
      IF (JJMESH.EQ.1) ICON = 1
  140 I1 = IROW + 1 + IC*ICON
      I2 = IROW + N + IC*ICON
      DO 150 II=I1,I2
  150 IKF(II) = II - I1 + IC*ICON
  160 CONTINUE
      I1 = IROW + IC*ICON + (N-K)*JMESH + K + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      IF (ITYPE(I).EQ.4.OR.ITYPE(I).EQ.1) IEXP(I) = I1
C     FOLLOWING TWO STATEMENTS APPLY IF ITYPE(I) = 1
      DO 170 II=I1,I2
  170 IKF(II) = N + II - I1
      IF (ITYPE(I).EQ.1) GO TO 240
C     NOW GET BANDWIDTH OF ITYPE(I) = 3,4 BRANCH CONDITION EQUATIONS.
C     FIRST ESTABLISH HOW MANY CONSTRAINT CONDS. EXIST BETWEEN THE CUR-
C     RENT ONE , IFIX(I,2) AND THE CORRESPONDING IFIX(I,1).
C
      DO 180 II=1,NCOND
      IDIF = IFIX(I,1) - IFIX(II,2)
      IF (IDIF.LE.0) GO TO 190
  180 CONTINUE
  190 NUMB = I - II
      IIM = II - 1
      IF (JJMESH.EQ.1) NUMB = NUMB + 1
      IF (IIM.EQ.0) GO TO 200
      IF ((IFIX(I,1)-IFIX(IIM,2)).GT.2) GO TO 200
      IF (ITYPE(IIM).EQ.1.OR.ITYPE(IIM).EQ.4) NUMB = NUMB + 1
  200 CONTINUE
C     NUMB IS THE NUMBER OF CONSTRAINT PTS SPANNED BY THE JUNCTURE COND.
C     NOT INCLUDING THE CURRENT CONSTRAINT COND.. NOW FIND THE NO. OF
C     ENERGY POINTS SPANNED BY THE JUNCTURE CONDITION.
C
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      JMESH = IFIX(I,2) - J*1000
      J1 = J - 1
      NPTS = JMESH - LMESH + 1
      IF (L.GT.J1) GO TO 220
      DO 210 II=L,J1
  210 NPTS = NPTS + I5(II)
  220 CONTINUE
C     NPTS IS NO. OF ENERGY PTS SPANNED BY JUNCTURE COND. CALCULATE
C     SEMI-BANDWIDTH OF JUNCTURE CONDITION.
      DO 230 II=I1,I2
      IKF(II) = (N-K)*NPTS + IC*NUMB + IC + K + (J-L)*K - 1 + II - I2
  230 CONTINUE
      IF (ITYPE(I).EQ.3) GO TO 290
  240 I1 = I2 + 1
      I2 = I1 + N - 2
      DO 250 II=I1,I2
  250 IKF(II) = IBAND - 1
      GO TO 290
  260 CONTINUE
C     ITYPE(I) = 5 JUNCTURE  (SEGMENTS IN SERIES).
C
      I1 = IROW + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 270 II=I1,I2
  270 IKF(II) = II - I1 + N
      I1 = I2 + 1
      I2 = I1 + N - 1
      DO 280 II=I1,I2
  280 IKF(II) = II - I1 + IC
  290 CONTINUE
C     END OF LOOP ON I.
  300 I5TOT = I5TOT + I5(J) + 2
      IROW = IROW + IRANK(J)
  310 CONTINUE
C     END OF LOOP ON J  (LOOP OVER ALL SEGMENTS).
C
C     ALTER IRANK(J),INDX(J) CORRESPONDING TO CONSTRAINT CONDITIONS
C     OF THE TYPE ITYPE(I)=5
C
      IF (NCOND.EQ.0) GO TO 350
      DO 330 I=1,NCOND
      IF (ITYPE(I).EQ.5) GO TO 320
      GO TO 330
  320 J = IFIX(I,2)/1000
      IF (J.EQ.1) WRITE (6,10)I
      IF (J.EQ.1) CALL ERREX
      IRANK(J) = IRANK(J) - IC
      IRANK(J-1) = IRANK(J-1) + IC
      INDX(J) = INDX(J) - 1
      INDX(J-1) = INDX(J-1) + 1
  330 CONTINUE
C     SORT TO GET ARRAY IFX(201,2) WITH IFX(I,1) CONTAINING MONOTONICAL-
C     LY INCREASING IFIX(I,1) AND IFX(I,2) CONTAINING CORRESPONDING
C     VALUES OF IROWC(I), THE ROW NUMBERS OF THE CONSTRAINT EQUATIONS.
C
      DO 340 I=1,NCOND
      IFX(I,1) = IFIX(I,1)
      IFX(I,2) = IROWC(I)
      DO 340 J=3,6
  340 IFX(I,J) = IFIX(I,J)
      IF (NCOND.GE.2) CALL SORT(IFX,NCOND,1,D1,D2)
  350 CONTINUE
            CALL GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX,ISEGA,ISEGB)
C
C
C     NOW GET BLOCKS FOR STORAGE ON DRUM.
C     IBLK = NUMBER OF BLOCKS
C     IROW = RANK OF EQUATION SYSTEM
C     IBAND = NOMINAL BANDWIDTH ( 8 FOR PREBUCKLING, 11 FOR STABILITY)
C     NGBK( ) = ROW NUMBER OF LAST EQUATION IN ()TH BLOCK
C     NKF( ) = LOWEST UNKNOWN NUMBER REFERENCED IN ()TH BLOCK
C     IMAX = MAXIMUM NUMBER OF ELEMENTS IN A BLOCK
C
      CALL GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX,
     1 ISEGA,ISEGB,I222,N)
C     WRITE OUT INPUT AND CALCULATED DATA FOR MATRIX CONFIGURATION.
C
      IF (NCOND.EQ.0) GO TO 400
      IF (N.EQ.5) WRITE (IFILE4,360)
  360 FORMAT(///61H AXISYMMETRIC PRESTRESS INPUT CONSTRAINT CONDITIONS F
     1OLLOW      //)
      IF (N.EQ.7) WRITE (IFILE4,370)
  370 FORMAT(///82H STABILITY,VIBRATION OR NON-SYMMETRIC STRESS INPUT CO
     1NSTRAINT CONDITIONS FOLLOW        //)
      DO 390 I=1,NCOND
      ISEG1 = IFIX(I,1)/1000
      ISEG2 = IFIX(I,2)/1000
      IPT1 = IFIX(I,1) - ISEG1*1000
      IPT2 = IFIX(I,2) - ISEG2*1000
      WRITE (IFILE4,380)I,ISEG1,IPT1,ISEG2,IPT2,ITYPE(I)
      IF (IPT1.GT.I5(ISEG1)) WRITE (6,10)I
      IF (IPT2.GT.I5(ISEG2)) WRITE (6,10)I
      IF (IPT1.GT.I5(ISEG1).OR.IPT2.GT.I5(ISEG2)) CALL ERREX
  380 FORMAT(16H CONSTRAINT NO.  I3,13H SEGMENT NO.  I3,7H POINT   I3,
     1 25H CONNECTED TO SEGMENT NO.   I3,7H POINT  I3,
     2 25H...TYPE OF CONSTRAINT =   I2 )
  390 CONTINUE
  400 WRITE (IFILE4,410)N,K,IC,IROW,IBLK
  410 FORMAT(//25H LOCAL MATRIX DIMENSION=  I2,10H OVERLAP=  I2,
     1 45H NO. CONSTRAINT CONDS. PER CONSTRAINT POINT=    I2,
     2 14H SYSTEM RANK=   I4,19H NUMBER OF BLOCKS=   I3  //)
      DO 430 I=ISEGA,ISEGB
      WRITE (IFILE4,420)I,IRANK(I),INDX(I)
  420 FORMAT(49H NUMBER OF EQUATIONS ASSOCIATED WITH SEGMENT NO.    I3,
     1 8H EQUALS   I3,34H.   NO. OF CONSTRAINT PTS. EQUALS    I3)
  430 CONTINUE
      DO 450 I=1,IBLK
      WRITE (IFILE4,440)I,NGBK(I),NKF(I),KMAX(I)
  440 FORMAT(14H BLOCK NUMBER=  I3,20H LAST EQ. IN BLOCK=  I4,
     1  22H LOWEST UNK IN BLOCK=    I4,26H. MAX. OFF-DIAGONAL WIDTH= I4)
  450 CONTINUE
      IF (NPRT.LT.3) GO TO 560
      WRITE (IFILE4,460)
  460 FORMAT(//34H SKYLINE OF GLOBAL MATRIX FOLLOWS    //)
      DO 480 I=1,IROW
      WRITE (IFILE4,470)I,IKF(I),ILOC(I)
  470 FORMAT(16H EQUATION NUMBER  I4,23H OFF DIAGONAL ELEMENTS=  I4,
     1 32H REL. POSITION OF M.D. IN BLOCK=    I4)
  480 CONTINUE
      WRITE (IFILE4,490)
  490 FORMAT(//49H EQUATION NUMBERS OF CONSTRAINT CONDITIONS FOLLOW  //)
      IF (NCOND.EQ.0) GO TO 520
      DO 510 I=1,NCOND
      WRITE (IFILE4,500)I,IC,IROWC(I),I,IEXP(I)
  500 FORMAT(15H CONSTRAINT NO.  I3,23H EQUA. NO. OF FIRST OF    I2,
     1 22H CONSTRAINT EQUATIONS=  I4,6H IEXP(  I2,3H)=  I4,
     2 39H.IF IEXP( ).NE.0, LOCAL MATRIX EXPLODED        )
  510 CONTINUE
  520 WRITE (IFILE4,530)
  530 FORMAT(//50H EQUATION NUMBERS CORRESPONDING TO W-POINTS FOLLOW //)
      DO 550 I=1,I5TOT
      WRITE (IFILE4,540)I,IW(I)
  540 FORMAT(22H GLOBAL MESH POINT NO.  I3,29H CORRESPONDING EQUATION NO
     1.=          I4)
  550 CONTINUE
  560 CONTINUE
C     CHECK FOR LEGALITY OF CONSTRAINT CONDITIONS.
C
      IF (NCOND.LT.2) RETURN
      ISET = 0
      DO 570 I=2,NCOND
      JSEG = IFIX(I,2)/1000
      I1 = I - 1
      IDIF = IROWC(I) - IROWC(I1)
      IF (IABS(IDIF).GE.(IC+N)) GO TO 570
      ISET = 1
      WRITE(6,10 ) I
  570 CONTINUE
      IF (ISET.EQ.1) CALL ERREX
      RETURN
      END
C=DECK      WRCON
      SUBROUTINE WRCON(NCOND,IFIX,D1,D2)
C     CALLED FROM OUTIN1, WHOSE TRACE IS READIT,MAIN
C     PROVIDES FORMAT TO WRITE OUT CONSTRAINT CONDITIONS
      DIMENSION IFIX(201,6),D1(201),D2(201)
      COMMON/PRMOUT/IFILE3,IFILE4
      WRITE (IFILE4,10)
   10 FORMAT(128H SEG. POINT CONNECTED TO SEG. POINT     USTAR VSTAR WST
     1AR BETA     RADIAL DISC. D1(I)   AXIAL DISC. D2(I)
     1                        //)
      DO 30 I=1,NCOND
      J1 = IFIX(I,1)/1000
      J2 = IFIX(I,2)/1000
      J3 = IFIX(I,1) -J1*1000
      J4 = IFIX(I,2) -J2*1000
      WRITE (IFILE4,20)
     1 J1,J3,J2,J4,IFIX(I,3),IFIX(I,4),IFIX(I,5),IFIX(I,6),D1(I),D2(I)
   20 FORMAT( I4,I6, I18,I6,I9,I6,I6,I6,1P2E20.8)
   30 CONTINUE
      RETURN
      END
C=DECK      SORT
       SUBROUTINE SORT(IFIX,NCOND,M,D1,D2)
C     CALLED FROM SKILIN, WHICH IS CALLED FROM READIT
C     SORTS CONSTRAINT CONDITIONS AND ASSOCIATED DISCONTINUITIES D1,D2
      DIMENSION IFIX(201,6),D1(201),D2(201)
      IF (M.EQ.1) GO TO 20
      DO 10 I=1,NCOND
      IF (IFIX(I,1).LE.IFIX(I,2)) GO TO 10
      ITEMP = IFIX(I,1)
      IFIX(I,1) = IFIX(I,2)
      IFIX(I,2) = ITEMP
   10 CONTINUE
   20 CONTINUE
      DO 50 L=2,NCOND
      K = NCOND + 2 - L
      DO 40 I=2,K
      I1 = I - 1
      IF (IFIX(I1,M).LE.IFIX(I,M)) GO TO 40
      DO 30 J=1,6
      ITEMP = IFIX(I1,J)
      IFIX(I1,J) = IFIX(I,J)
      IFIX(I,J) = ITEMP
   30 CONTINUE
      DTEM = D1(I1)
      D1(I1) = D1(I)
      D1(I) = DTEM
      DTEM = D2(I1)
      D2(I1) = D2(I)
      D2(I) = DTEM
   40 CONTINUE
   50 CONTINUE
      RETURN
      END
C=DECK      CONSTR
      SUBROUTINE CONSTR 
C     
C    PURPOSE IS TO PROVIDE INPUT FOR BOUNDARY, POLE, AND JUNCTURE 
C    CONDITIONS.  
C BEG AUG 2005
C BEG FEB 2008
      COMMON/WPREMY/WPREMX,WPRALL,ENDUV
C END FEB 2008
C END AUG 2005
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)    
      COMMON/NCONDS/NCOND     
      COMMON/JUNCT/IFIX(201,6),IFX(201,6),ITYPE(201)     
      COMMON/JUNCTB/IFIXB(201,6),IFXB(201,6),ITYPEB(201) 
      COMMON/INSTAB/INDIC     
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G   
      COMMON/RING3/D1(201),D2(201)    
C     
      LOGICAL ANSL1     
      CHARACTER*4 ANSCON
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)   
      COMMON/INDAT/INFILE     
      DIMENSION IMESH(201)     
C     
      IBOUND = 0  
      IRIGID = 0  
      NCOND  = 0  
      REWIND IFILE
      CALL DATUM (IFILE,60,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      WRITE(IOUT,32)    
   32 FORMAT(6X,'H',9X,'$ CONSTRAINT CONDITIONS FOLLOW....')
      CALL DATUM (IFILE,61,1,1,NSEG,REALL,CHARAC,IOUT,0,1)  
      IF (NSEG.LE.0) CALL ERREX     
      IF (NSEG.GT.201) CALL ERREX    
C     
    2 CONTINUE    
      DO 100 ISEG = 1,NSEG    
C     
      WRITE(6,*)' CONSTRAINT CONDITIONS FOR SEGMENT NO. ISEG =',ISEG    
      WRITE(IOUT,35) ISEG,ISEG,ISEG,ISEG  
   35 FORMAT(6X,'H',9X,'$'/   
     1 6X,'H',9X,'$ CONSTRAINT CONDITIONS FOR SEGMENT NO.',4I5)   
      WRITE(IOUT,3)     
    3 FORMAT(6X,'H',9X,'$ POLES INPUT FOLLOWS...')    
      REWIND IFILE
      CALL DATUM(IFILE,62,1,2,NPOLES,REALL,CHARAC,IOUT,ISEG,1)    
      IF (NPOLES.LE.-1) CALL ERREX  
      IF (NPOLES.GT.20) CALL ERREX  
      IF (NPOLES.EQ.0) GO TO 20     
C     
C    CONSTRAINT CONDITIONS FOR A POLE (r=0)...  
C     
      DO 10 I = 1,NPOLES
      REWIND IFILE
      NCOND = NCOND + 1 
      CALL DATUM(IFILE,64,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX 
      IF (IMESH(I).GT.I5(ISEG)) THEN
        WRITE(6,*)' POLE LOCATED AT HIGHER MESH STATION THAN NMESH'     
        CALL ERREX
      ENDIF 
      IFIX(NCOND,1) = 1000*ISEG + IMESH(I)
      IFIX(NCOND,2) = IFIX(NCOND,1) 
      DO 5 J = 3,6
    5 IFIX(NCOND,J) = 0 
      D1(NCOND) = 0.    
      D2(NCOND) = 0.    
      DO 7 J = 1,6
    7 IFIXB(NCOND,J) = IFIX(NCOND,J)
   10 CONTINUE    
   20 CONTINUE    
C     
C   CONSTRAINTS TO GROUND (OTHER THAN POLES) FOLLOW....     
C     
      WRITE(IOUT,4)     
    4 FORMAT(6X,'H',9X,'$ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...')  
      CALL DATUM(IFILE,66,1,2,NGRND,REALL,CHARAC,IOUT,0,1)  
      IF (NGRND.LE.-1) CALL ERREX   
      IF (NGRND.GT.35) CALL ERREX   
      IF (NGRND.EQ.0) GO TO 40
      DO 30 I = 1,NGRND 
      REWIND IFILE
      I1 = I - 1  
      NCOND = NCOND + 1 
   22 CONTINUE    
      CALL DATUM(IFILE,68,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX 
      IF (IMESH(I).GT.I5(ISEG)) THEN
        WRITE(6,*)' FIXITY LOCATED AT HIGHER MESH STATION THAN NMESH'   
        CALL ERREX
      ENDIF 
      IF (I.EQ.1) GO TO 24    
      MESHDF = IMESH(I) - IMESH(I1) 
      IF (MESHDF.GE.3) GO TO 24     
      WRITE(6,'(A,A)')' CONSTRAINTS TO GROUND MUST BE AT INTERVALS',    
     1' ALONG THE MERIDIAN OF AT LEAST 3 NODAL POINTS'
      REWIND IFILE
      GO TO 22    
   24 CONTINUE    
      IFIX(NCOND,1) = 1000*ISEG + IMESH(I)
      IFIX(NCOND,2) = IFIX(NCOND,1) 
      CALL DATUM(IFILE,70,1,2,IFIX(NCOND,3),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,71,1,1,IFIX(NCOND,4),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,72,1,1,IFIX(NCOND,5),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,73,1,1,IFIX(NCOND,6),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,74,1,2,INT,D1(NCOND),CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,75,1,1,INT,D2(NCOND),CHARAC,IOUT,0,1)
C     
      DO 25 J = 1,6     
   25 IFIXB(NCOND,J) = IFIX(NCOND,J)
C     
      CALL DATUM(IFILE,80,1,2,INT,REALL,ANSCON,IOUT,0,1)    
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 30    
C     
      CALL DATUM(IFILE,81,1,2,IFIXB(NCOND,3),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,82,1,1,IFIXB(NCOND,4),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,83,1,1,IFIXB(NCOND,5),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,84,1,1,IFIXB(NCOND,6),REALL,CHARAC,IOUT,0,1)     
C     
      IBOUND = 1  
   30 CONTINUE    
   40 CONTINUE    
C     
C    JUNCTURE CONDITIONS ARE NEXT...
C     
      WRITE(6,*)' The current segment is Segment No. ISEG =', ISEG
C     
      WRITE(IOUT,6)     
    6 FORMAT(6X,'H',9X,'$ JUNCTION CONDITION INPUT FOLLOWS...')   
      CALL DATUM(IFILE,86,1,2,INT,REALL,ANSCON,IOUT,0,1)    
      IF (ANSL1('N',ANSCON,INFILE)) GO TO 80    
      CALL DATUM(IFILE,88,1,2,NJUNCT,REALL,CHARAC,IOUT,0,1) 
      IF (NJUNCT.LT.-1) CALL ERREX  
      IF (NJUNCT.GT.35) CALL ERREX  
      IF (NJUNCT.EQ.0) GO TO 80     
      DO 60 I = 1,NJUNCT
      REWIND IFILE
      I1 = I - 1  
      NCOND = NCOND + 1 
   42 CONTINUE    
      CALL DATUM(IFILE,90,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX 
      IF (IMESH(I).GT.I5(ISEG)) THEN
      WRITE(6,*)' JUNCTION AT HIGHER NODE THAN NUMBER OF NODES IN SEG.' 
      CALL ERREX  
      ENDIF 
      IF (I.EQ.1) GO TO 44    
      MESHDF = IMESH(I) - IMESH(I1) 
      IF (MESHDF.GE.3) GO TO 44     
      WRITE(6,'(A,A)')' JUNCTURES TO EARLIER SEGMENTS MUST BE SPACED',  
     1' AT INTERVALS OF AT LEAST 3 NODAL POINTS.'     
      REWIND IFILE
      GO TO 42    
   44 CONTINUE    
      CALL DATUM(IFILE,92,1,1,JSEG,REALL,CHARAC,IOUT,0,1)   
      IF (JSEG.LE.0) CALL ERREX     
      IF (JSEG.GT.201) CALL ERREX    
      CALL DATUM(IFILE,94,1,1,JNODE,REALL,CHARAC,IOUT,0,1)  
      IF (JNODE.LE.0) CALL ERREX    
      IF (JNODE.GT.I5(JSEG)) THEN   
       WRITE(6,*)' JNODE IS AT HIGHER NODAL STATION THAN NODES IN SEG.' 
       CALL ERREX 
      ENDIF 
      IFIX(NCOND,1) = 1000*JSEG + JNODE   
      IFIX(NCOND,2) = 1000*ISEG + IMESH(I)
      CALL DATUM(IFILE,96,1,2,IFIX(NCOND,3),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,98,1,1,IFIX(NCOND,4),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,100,1,1,IFIX(NCOND,5),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,102,1,1,IFIX(NCOND,6),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,104,1,2,INT,D1(NCOND),CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,106,1,1,INT,D2(NCOND),CHARAC,IOUT,0,1)     
C     
      DO 50 J = 1,6     
   50 IFIXB(NCOND,J) = IFIX(NCOND,J)
C     
      CALL DATUM(IFILE,108,1,2,INT,REALL,ANSCON,IOUT,0,1)   
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 60    
      CALL DATUM(IFILE,110,1,2,IFIXB(NCOND,3),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,111,1,1,IFIXB(NCOND,4),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,112,1,1,IFIXB(NCOND,5),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,113,1,1,IFIXB(NCOND,6),REALL,CHARAC,IOUT,0,1)    
C     
      IBOUND = 1  
   60 CONTINUE    
   80 CONTINUE    
C     
  100 CONTINUE    
C     
C    RIGID BODY MOTION STUFF FOLLOWS...   
C     
      WRITE(IOUT,8)     
    8 FORMAT(6X,'H',9X,'$ RIGID BODY CONSTRAINT INPUT FOLLOWS...')
      REWIND IFILE
      CALL DATUM(IFILE,120,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,121,1,2,INT,REALL,ANSCON,IOUT,0,1)   
      IF (ANSL1('N',ANSCON,INFILE)) GO TO 200   
      IRIGID = 1  
  110 CONTINUE    
      CALL DATUM(IFILE,122,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,123,1,1,ISEG,REALL,CHARAC,IOUT,0,1)  
      IF (ISEG.LE.0) CALL ERREX     
      IF (ISEG.GT.201) CALL ERREX    
      CALL DATUM(IFILE,124,1,1,INODE,REALL,CHARAC,IOUT,0,1) 
      IF (INODE.LE.0) CALL ERREX    
      IF (INODE.GT.I5(ISEG)) THEN   
      WRITE(6,*)' INODE IS GREATER THAN NUMBER OF NODES IN SEGMENT.'    
      CALL ERREX  
      ENDIF 
      IFIXR = 1000*ISEG + INODE     
      IF (NCOND.EQ.0) GO TO 122     
      DO 120 I = 1,NCOND
      II = I
      IF (IFIXR.NE.IFIX(I,1)) GO TO 120   
      IF(IFIX(I,2).EQ.IFIX(I,1)) GO TO 140
      WRITE(6,*)' THIS LOCATION IS ILLEGAL.  CHOOSE ANOTHER.'     
      CALL ERREX  
  120 CONTINUE    
  122 CONTINUE    
      NCOND = NCOND + 1 
      IFIX(NCOND,1) = IFIXR   
      IFIX(NCOND,2) = IFIXR   
      DO 125 I = 3,6    
  125 IFIX(NCOND,I) = 0 
      D1(NCOND) = 0.    
      D2(NCOND) = 0.    
      II = NCOND  
  140 CONTINUE    
C     
      ISTOP0(1) = IFIX(II,1)  
      ISTOP0(2) = IFIX(II,2)  
      ISTOP1(1) = IFIX(II,1)  
      ISTOP1(2) = IFIX(II,2)  
      CALL DATUM(IFILE,125,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,126,1,2,ISTOP0(3),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,127,1,1,ISTOP0(4),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,128,1,1,ISTOP0(5),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,129,1,1,ISTOP0(6),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,130,1,1,ISTOP1(3),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,131,1,1,ISTOP1(4),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,132,1,1,ISTOP1(5),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,133,1,1,ISTOP1(6),REALL,CHARAC,IOUT,0,1)   
C     
  200 CONTINUE    
C BEG AUG 2005
      CALL DATUM(IFILE,150,1,1,INT,WPRALL,CHARAC,IOUT,0,1)
C END AUG 2005
      RETURN
      END   
