C=DECK      POSTLIB
C
C  THIS IS THE POST LIBRARY (SOURCE FILE)
C
C
C
C=DECK      POST
      PROGRAM POST
C
C     BOSOR5 POSTPROCESSOR
C
C  200-SEGMENT VERSION OF BOSOR5
C
C     OVERLAY(BPOST,0,0)    (CDC VERSION)
C     PROGRAM POST(INPUT,OUTPUT,TAPE5=INPUT,TAPE6=OUTPUT, ETC,ETC)))
C
C     LEGEND
C
C          IPRINT                           IPLOT
C          ------                          -----
C
C                                      0 = NO PLOTS AT ALL
C     1 = PREBUCKLING STATES PRINTED   1 = PREB. STATES PLOTTED
C     2 = BUCKLING MODES PRINTED       2 = BUCKLING MODES PLOTTED
C     3 = PREB. + MODES PRINTED        3 = PREB. + MODES PLOTTED
C
C
#if hp700
$hp9000_800 intrinsics
#endif
      COMMON/CDATA/TFLOOR,CREEPN(9),CREEPM(9),CREEPA(9),CREEPB(9)
      COMMON/NBGSTP/NBEG(201),NSTOPP(201) ,INTVAL(201)
      COMMON/MATPRO/EPEFF(20,9),SGEFF(20,9),NITEG(9),EE(9),FNUE(9),AP(9)
      COMMON/IBUNCH/INOW,INOWH,INOWZ,MPROPX,NANR,NSME,NQ1,NQ2,NQ3,ICHNGE
      COMMON/RPLST5/NTYP(99),NPARTS(99)
      COMMON/MATP2/ETAN(20,9),MAXTRL,ITRIAL,EMAX(9),ATWEEN(95),SBRDF(95)
      COMMON/IGOVN/ITTURE(201),IDEPTH(201),IREFZ(201),ILONG
      COMMON/THERWD/NWORD(201),NPLAST(201),NCREEP(201),NMAT(201),
     1              NALRED(201)
      COMMON/IFLOWS/IFLOW,ICREEP,IJNCT,IJNTB,ITSTOR,ITHSTR,IZSTOR,IBSTOR
      COMMON/INSTAB/INDIC
      COMMON/TIMLFT/MARGIN,NBEGIN
      COMMON/RINDEX/JBEGIN,KBEGIN,LBEGIN,KRSEG
      COMMON/GLOBAL/IDZ,IZRING(99),ISAVE(20),INOTE
      COMMON/RCDATA/RCREEN(9),RCREEM(9),RCREEA(9),RCREEB(9)
      COMMON/RPLST4/JBEG(99),KBEG(10),NPOINT(10) ,NSUM1(199),NSUM2(199)
      COMMON/RPLST2/TIMP(100),EPS(100),SIGMA(100)
      COMMON/RPLST1 /R1(99),R2(99),PHI(99),T(99),FL(99),E(10),ALPHA(10)
      COMMON/ECFFI/ECEFF(100)
      COMMON/RLSTAT/LSTAT,KRSIG,KRING,BET(99),BETS(99),WS(99),WSS(99)
      COMMON/FUTIME/DTIMEF
      COMMON/RINGRD/RC(99)
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/SMOAD/IMOAD(2),IMMODE,FMAX,ISIG
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/PLTSIG/NPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/IDEIG/IDMODE(2,25),NTRY
      COMMON/AUXSTO/IDD,ISER,ILAST,ICUR,ISTAT
      COMMON/SMODE/IPMODE(99),ICMODE(99),ISMODE(99),IQMODE(99),IHMOD(99)
      COMMON/HED/TITLE(12)
      COMMON/SEGBND/ISEGA,ISEGB,I2AB,NCONDB
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(201),IROWCB(201),IIWP,IIWB
      COMMON/TOTPTS/M3
      COMMON/IDENT2/ IANGLE,ISIGR,IEPSR,IEPCPR
      COMMON/IDENTS/IC,IT,IR,IDS,IDB,IDP,IDSH,IM,ITS,ITSH,IZST,IDARC,IZX
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/SHEL/IWAL(201)
      COMMON/FORCES/V(99),HF(99),FM(99)
      COMMON/FOSAVE/VSAVE(99),HSAVE(99),FMSAVE(99)
      COMMON/TLOADS/FTLOAD(100,2),NTIME(11),ITIME
      COMMON/STEPS/DTEMP(201),STEP(201),STEP1(99),STEP2(99),STEP3(99)
      COMMON/TEMTUR/TEMP(201),P(201)
      COMMON/TOMER/TOME,DTIME
      COMMON/SVTOM/TOMES
      COMMON/SVTEMP/TEMPS(201)
      COMMON/SVP/PS(201)
      COMMON/SIGNALL/ISOG,KKKK,NSTEPS,LSTEPS(50),TIMES(51)
      COMMON/ORTHP/AL1(20),AL2(20),EXX(20),EYY(20),FNUXY(20),GS(20)
      COMMON/IOUTMN/INODMN(201,2),INODMX(201,2)
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT,NFILE
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      CHARACTER*4 CHARAC
      common/case/casename
      character*28 casename
      character*33 fname
      integer stofile
      LOGICAL ANSL1
      logical exists
      COMMON/     /B(160000)
      DIMENSION NTHMOD(20),NWAVES(20)
C BEG FEB 2009
#if hp700
C     call getarg(2, casename)
      call getarg(1, casename)
#else
      call getarg(1,casename)
#endif
C END FEB 2009
      IFILE = 2
      IFILE3 = 7
      INFILE = 5
c Begin May 1990 quick-fix
      IOUT = 29
c End May 1990
C
C
C
C FOLLOWING USED FOR VAX/VMS..
c     OPEN(UNIT=IFILE,FILE='BOSOR5:PROMPT.DAT',STATUS='OLD',READONLY)
c     OPEN(UNIT=IFILE3,FILE='BOSOR5:PROMPT3.DAT',STATUS='OLD',READONLY)
C END VAX/VMS OPEN STATEMENTS
C
C FOLLOWING USED FOR UNIX...
      OPEN(UNIT=IFILE,FILE='PROMPT.DAT',STATUS='OLD')
      OPEN(UNIT=IFILE3,FILE='PROMPT3.DAT',STATUS='OLD')
#if rs6k
      rewind(IFILE)
      rewind(IFILE3)
#endif
c Begin May 1990 quick-fix
      open(unit=iout, status = 'SCRATCH')
c End May 1990
c Kludge to properly open and name .LAB, .PLT, and .PLT2 files.
      fname = casename(1:index(casename, ' ')-1)//'.LAB'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=40, FILE=fname, STATUS='OLD')
#if rs6k
        rewind(40)
#endif
      else
	OPEN(UNIT=40, FILE=fname, STATUS='NEW')
      endif
c
c     fname = casename(1:index(casename, ' ')-1)//'.PLT'
c     inquire(FILE=fname, EXIST=exists)
c     if (exists) then
c       OPEN(UNIT=53, FILE=fname, STATUS='OLD')
#if rs6k
c       rewind(53)
#endif
c     else
c       OPEN(UNIT=53, FILE=fname, STATUS='NEW')
c     endif
c
      fname = casename(1:index(casename, ' ')-1)//'.PLT2'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=54, FILE=fname, STATUS='OLD')
#if rs6k
        rewind(54)
#endif
      else
	OPEN(UNIT=54, FILE=fname, STATUS='NEW')
      endif
c end Kludge
C END UNIX OPEN STATEMENTS
C
C
C     GETCOM READS STUFF IN FROM DRUM OR DISK
C     CALL OVERLAY(5HBPOST,1,0)   (CDC VERSION)
C
      stofile = 9
      fname = casename(1:index(casename, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
        OPEN(UNIT=stofile, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(stofile)
#endif
      else
	OPEN(UNIT=stofile, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL GETCOM
      close(stofile)

C BEG JAN 2012
c     open the EXUSTING database

      CALL GASP(DUM1,DUM2,0,DUM3)

C END JAN 2012
C
      WRITE (6,10)(TITLE(I),I=1,12)
10    FORMAT(1X,12A4) 
20    FORMAT(10I6)
30    FORMAT(6E12.8)
      JPLOT = 0
      DO 32 I = 1,20
      LPLOT(I) = 0
   32 KPLOT(I) = 0
C
      CALL DATUM(IFILE,200,0,0,INT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,210,1,2,IPRINT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,220,1,2,IPLOT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,223,1,2,NLAST,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,224,1,1,INT,REALL,ANSOUT,iout,0,1)
      IF (NLAST.GT.-1) CALL BLOWUP(IFILE3,IOUT,JPLOT,KPLOT,LPLOT)
      REWIND IFILE
      IUNDEF = 1
      IF (ANSL1('N',ANSOUT,INFILE)) IUNDEF = 0
C
C     SEE LEGEND ABOVE FOR DEFINITIONS OF IPRINT, IPLOT
      ISIG = 0
C
C     PLOTIT PLOTS UNDEFORMED SHAPE HERE.
C     IF (IPLOT.GT.0) CALL OVERLAY(5HBPOST,4,0)    (CDC VERSION)
      IF (IPLOT.GT.0.AND.IUNDEF.EQ.1) CALL PLOTIT
      IF (IPRINT.EQ.1.OR.IPRINT.EQ.3) GO TO 40
      IF (IPLOT.EQ.1.OR.IPLOT.EQ.3) GO TO 40
      GO TO 60
40    CONTINUE
      IMMODE = 0
      ISIG = 1
C     PRINT AND OR PLOT PREBUCKLING STUFF
C
C     NSTEPS = NUMBER OF TIME STEPS FOR WHICH YOU WANT STUFF PRINTED
C              OR PLOTTED.
C     LSTEP(I) = PRINT OR PLOT STUFF FOR LSTEP(I)TH TIME STEP
C     FMAX= DISPLACEMENT VALUE BY WHICH TO SCALE PLOTS. USUALLY USE
C           THE MAXIMUM DISPLACEMENT WHICH OCCURRED IN BMAIN.
C
      CALL DATUM(IFILE,225,0,0,INT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,230,1,2,NSTEPS,REALL,CHARAC,iout,0,1)
      IF (NSTEPS.EQ.0) GO TO 90
C
      DO 45 I = 1,NSTEPS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,240,1,1,LSTEPS(I),REALL,CHARAC,iout,I,IPROMP)
   45 CONTINUE
C
      DO 46 I = 1,NSTEPS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,250,1,1,INT,TIMES(I),CHARAC,iout,I,IPROMP)
   46 CONTINUE
C
      CALL DATUM(IFILE,260,1,2,ISOG,REALL,CHARAC,iout,0,1)
C
      CALL DATUM(IFILE,270,1,2,INT,FMAX,CHARAC,iout,0,1)
C
      DO 47 I = 1,NSEG
      INODMN(I,1) = 1
   47 INODMX(I,1) = I5(I)
C
      CALL DATUM(IFILE,271,1,1,INT,REALL,ANSOUT,iout,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 52
      CALL DATUM(IFILE,272,1,1,NSEGS,REALL,CHARAC,iout,0,1)
C
      DO 49 I = 1,NSEGS
      REWIND IFILE
      INODMN(I,1) = 0
      INODMX(I,1) = 0
      CALL DATUM(IFILE,273,1,1,INT,REALL,ANSOUT,iout,I,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 49
      INODMN(I,1) = 1
      INODMX(I,1) = I5(I)
      CALL DATUM(IFILE,274,1,1,INT,REALL,ANSOUT,iout,I,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 49
      CALL DATUM(IFILE,275,0,0,INT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,276,1,1,INODMN(I,1),REALL,CHARAC,iout,I,1)
      CALL DATUM(IFILE,277,1,1,INODMX(I,1),REALL,CHARAC,iout,I,1)
   49 CONTINUE
   52 CONTINUE
C
      KKKK = 0
      DO 50 I=1,NSTEPS
      KKKK = KKKK + 1
      KSTEP = LSTEPS(I)
C     PREBUCKLING STRESS RESULTANTS, DISPLACEMENT COMPONENTS ARE
C     CALCULATED FROM THE KSTEPTH SOLUTION VECT0R IN POST22
C
C     IF (KSTEP.GT.0) CALL OVERLAY(5HBPOST,2,0)  (CDC VERSION)
C
      IF (KSTEP.GT.0) CALL POST22
      IF (KSTEP.GT.0) CALL PRE33
C
C     PLOT PREBUCKLING STUFF FOR THIS TIME STEP.
C
C     IF(IPLOT.EQ.1.OR.IPLOT.EQ.3) CALL OVERLAY(5HBPOST,4,0)    (CDC)
C
      IF (IPLOT.EQ.1.OR.IPLOT.EQ.3) CALL PLOTIT
50    CONTINUE
60    CONTINUE
      IF (IPRINT.EQ.2.OR.IPRINT.EQ.3) GO TO 70
      IF (IPLOT.EQ.2.OR.IPLOT.EQ.3) GO TO 70
      GO TO 90
70    CONTINUE
      IMOAD(1) = 0
      IMOAD(2) = 0
      ISIG = 2
C     PRINT AND/OR PLOT BUCKLING MODES
C
C     NMINB = MINIMUM BUCKLING WAVENUMBER FOR PRINTED OR PLOTED OUTPUT
C     NMAXB = MAXIMUM BUCKLING WAVENUMBER, AS ABOVE
C     INCRB = PRINT OR PLOT MODES FOR WAVENUMBER INCREMENT OF INCREB
C     NVEC = PRINT OR PLOT MODE FOR NVEC EIGENVECTORS PER WAVENUMBER
C
C
      CALL DATUM(IFILE,280,0,0,INT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,290,1,2,NMODES,REALL,CHARAC,iout,0,1)
C
      DO 75 I = 1,NMODES
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,300,1,2,NTHMOD(I),REALL,CHARAC,iout,I,IPROMP)
   75 CONTINUE
C
      DO 76 I = 1,NMODES
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE,310,1,2,NWAVES(I),REALL,CHARAC,iout,I,IPROMP)
   76 CONTINUE
C
      DO 77 I = 1,NSEG
      INODMN(I,2) = 1
   77 INODMX(I,2) = I5(I)
C
      CALL DATUM(IFILE,320,1,1,INT,REALL,ANSOUT,iout,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 82
      CALL DATUM(IFILE,330,1,1,NSEGS,REALL,CHARAC,iout,0,1)
C
      DO 79 I = 1,NSEGS
      REWIND IFILE
      INODMN(I,2) = 0
      INODMX(I,2) = 0
      CALL DATUM(IFILE,340,1,1,INT,REALL,ANSOUT,iout,I,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 79
      INODMN(I,2) = 1
      INODMX(I,2) = I5(I)
      CALL DATUM(IFILE,350,1,1,INT,REALL,ANSOUT,iout,I,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 79
      CALL DATUM(IFILE,360,0,0,INT,REALL,CHARAC,iout,0,1)
      CALL DATUM(IFILE,370,1,1,INODMN(I,2),REALL,CHARAC,iout,I,1)
      CALL DATUM(IFILE,380,1,1,INODMX(I,2),REALL,CHARAC,iout,I,1)
   79 CONTINUE
   82 CONTINUE
C
      NVEC = 1
      INCRB = 1
      DO 80 I = 1,NMODES
      NTRY = NTHMOD(I)
      N = NWAVES(I)
C
C     MODAL DISPLACEMENTS CALCULATED IN MODE FROM THE EIGENVECTOR
C
C     CALL OVERLAY(5HBPOST,3,0)    (CDC VERSION)
C
      CALL MODE
C
C     PLOT BUCKLING MODE
C
C     IF (IPLOT.EQ.2.OR.IPLOT.EQ.3) CALL OVERLAY(5HBPOST,4,0)  (CDC)
C
      IF (IPLOT.EQ.2.OR.IPLOT.EQ.3) CALL PLOTIT
C
80    CONTINUE
90    CONTINUE
C
C     EOFTV IS THE SC4020 COMMAND FOR END-OF-FILE ON PLOT TAPE.
C
      IF (IPLOT.GT.0) CALL EOFTV
C
      CALL GASP(DUM1,DUM2,-2,DUM3)
c Added 11/90 to clear IEEE FPE warnings
      call ieeexx
c End 11/90
      END
C=DECK      BLOWUP
      SUBROUTINE BLOWUP(IFILE3,IOUT,JPLOT,KPLOT,LPLOT)
C     
C     PURPOSE IS TO ALLOW USER TO PROVIDE LOCATIONS AND FACTORS FOR
C     EXPANDED PLOTS OF UNDEFORMED AND DEFORMED STRUCTURE.  
C     
      COMMON/INDAT/INFILE     
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      DIMENSION LPLOT(*),KPLOT(*)   
      LOGICAL ANSL1     
      CHARACTER*4 ANSWER
C     
      JPLOT = 0   
      DO 10 I = 1,20    
      LPLOT(I) = 0
      KPLOT(I) = 0
   10 CONTINUE    
C     
      REWIND IFILE3     
      CALL DATUM(IFILE3,500,0,0,INT,REALL,CHARAC,IOUT,0,1)  
      CALL DATUM(IFILE3,510,1,1,INT,REALL,ANSWER,IOUT,0,1)  
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 100   
   20 CONTINUE    
      JPLOT = JPLOT + 1 
      REWIND IFILE3     
      IF (JPLOT.GT.1)   
     1      CALL DATUM(IFILE3,520,1,1,INT,REALL,ANSWER,IOUT,0,1)  
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 100   
      CALL DATUM(IFILE3,530,1,2,ISEG,REALL,CHARAC,IOUT,0,1) 
      KPLOT(JPLOT) = ISEG*1000 + 1  
      CALL DATUM(IFILE3,540,1,2,LPLOT(JPLOT),REALL,CHARAC,IOUT,0,1)     
      IF (LPLOT(JPLOT).LT.1) THEN
         WRITE(6,*)' IMPROPER MAGNIFICATION FACTOR. USE INTEGER > 1 '
         CALL ERREX
      ENDIF
      GO TO 20    
  100 CONTINUE    
      IF (JPLOT.GT.0) JPLOT = JPLOT - 1   
      IF (JPLOT.EQ.0) GO TO 130
      II = 0
      K = 1
      DO 120 J=1,NSEG
      I5J = I5(J)
      DO 110 I=1,I5J
      II = II + 1
      ISTA = J*1000 + I
  105 CONTINUE
      IF (K.GT.JPLOT) GO TO 130
      IF (KPLOT(K).NE.ISTA) GO TO 110
      KPLOT(K) = II
      K = K + 1
      GO TO 105
110   CONTINUE
120   CONTINUE
130   CONTINUE
      RETURN
      END   
C=DECK      FUNCT
C./      ADD   NAME=FUNCT
      FUNCTION FUNCT(ZETA)
C     VARIABLES, FUNCT GIVES THE TEMPERATURE DISTRIBUTION THRU THE
C     THICKNESS OF THE SHELL WALL.
C
      COMMON/ZGRAD/NTSGD
      COMMON/TTTHK/TP(10),ZP(10),NTHICK,ZRF
      FUNCT = TP(1)
      IF (NTHICK.EQ.1) GO TO 30
      J = 1
      ZZ = ZRF + ZETA
      DO 10 I=2,NTHICK
      J = J + 1
      IF (ZZ.LT.ZP(I)) GO TO 20
10    CONTINUE
20    J1 = J - 1
      FUNCT = TP(J1)
      ZDIF = ZP(J) - ZP(J1)
      IF (ZDIF) 25,30,25
25    CONTINUE
      FUNCT = (TP(J)-TP(J1))*(ZZ-ZP(J1))/(ZP(J)-ZP(J1))     + TP(J1)
30    IF (NTSGD.EQ.0) RETURN
      FUNCT = FUNCT*ZETA
      RETURN
      END
C=DECK      LOADS
      SUBROUTINE LOADS
C
C     OVERLAY(2,0)           (CDC VERSION)
C     PROGRAM LOADS     (CDC VERSION)
C
C     APPLIED LOADS FOR NONLINEAR AXISYMMETRIC ANALYSIS ESTABLISHED FOR
C     NEXT LOAD STEP.
C
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/FORCES/V(99),HF(99),FM(99)
      COMMON/FOSAVE/VSAVE(99),HSAVE(99),FMSAVE(99)
      COMMON/TLOADS/FTLOAD(100,2),NTIME(11),ITIME
      COMMON/STEPS/DTEMP(201),STEP(201),STEP1(99),STEP2(99),STEP3(99)
      COMMON/TEMTUR/TEMP(201),P(201)
      COMMON/TOMER/TOME,DTIME
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SVTOM/TOMES
      COMMON/STRATG/IDETER,IDETFX
      COMMON/SVTEMP/TEMPS(201)
      COMMON/SVP/PS(201)
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/FUTIME/DTIMEF
      COMMON/SIGNALL/ISIG,KKKK,NSTEPS,LSTEPS(50),TIMES(51)
      TOME = TIMES(KKKK)
      WRITE (6,10)
10    FORMAT(1H1)
      WRITE (6,20)KSTEP
20    FORMAT(36H ***** RESULTS FOR TIME STEP NUMBER      I3,
     17H  *****  //)
30    FORMAT(/48H ****************************************            /)
      WRITE (6,40)TOME
40    FORMAT(7H TIME =  1PE17.8/)
      WRITE (6,50)
50    FORMAT(' SEGMENT   PRESSURE MULTIPLIER   TEMPERATURE MULTIPLIER
     1(MULTIPLY THESE AMPLITUDES BY DISTRIBUTIONS  GIVEN FOR EACH SEGMEN
     1T)'/)
      DO 70 I=1,NSEG
C
C     GET PRESSURE MULTIPLIER FOR CURRENT STEP... P(I)
C
      CALL TLOAD(STEP(I),FLOAD,TOME,1)
      P(I) = FLOAD
C
C     GET TEMPERATURE MULTPLIERS FOR CURRENT STEP..TEMP(I)
C
      CALL TLOAD(DTEMP(I),FLOAD,TOME,1)
      TEMP(I) = FLOAD
      WRITE (6,60)I,P(I),TEMP(I)
60    FORMAT(I5,1P2E24.8)
70    CONTINUE
      WRITE (6,80)
80    FORMAT(1H0)
      IF (NTOT.EQ.0) GO TO 110
      DO 100 I=1,NTOT
C
C     GET AXIAL LINE LOADS V(I) FOR CURRENT STEP
C
      CALL TLOAD(STEP1(I), FLOAD, TOME,1)
      V(I) = VSAVE(I)*FLOAD
C
C     GET RADIAL LINE LOADS HF(I) FOR CURRENT STEP
C
      CALL TLOAD(STEP2(I), FLOAD, TOME,1)
      HF(I) = HSAVE(I)*FLOAD
C
C     GET LINE MOMENTS FM(I) FOR CURRENT STEP
C
      CALL TLOAD(STEP3(I), FLOAD, TOME,1)
      FM(I) = FMSAVE(I)*FLOAD
      WRITE (6,90)I,V(I),HF(I),FM(I)
90    FORMAT(9H RING NO. I3,21H, AXIAL LOAD/LENGTH = E15.8,
     122H, RADIAL LOAD/LENGTH = E15.8, 17H, MOMENT/LENGTH = E15.8    )
100   CONTINUE
110   CONTINUE
      RETURN
C     RETURN CARD NOT NEEDED IN CDC VERSION
      END
C=DECK      TLOAD
      SUBROUTINE TLOAD(STEP,FLOAD,TOME,INDEX)
C
C     THIS SUBROUTINE CALCULATES FLOAD, GIVEN STEP AND TOME
C
C     STEP = INDEX FOR CHOOSING TYPE OF TIME DEPENDENCE OF LOAD
C     TOME = ELAPSED TIME SINCE BEGINNING OF CASE
C     FLOAD = VALUE OF THE PARTICULAR FUNCTION OF TIME WHICH THIS
C             PARTICULAR LOAD ASSUMES AT TIME T = TOME (ACTUALLY,
C             THE LOAD IS GIVEN BY AN AMPLITUDE FACTOR TIMES FLOAD.
C
C
      COMMON/TLOADS/FTLOAD(100,2),NTIME(11),ITIME
      FLOAD = 0.0
      ITYPE = STEP
      IF (INDEX.EQ.0) GO TO 10
      IF (ITYPE.GT.10.OR.ITYPE.EQ.0) GO TO 60
10    I1 = ITYPE + 1
      N1 = NTIME(I1)
      NPOS = 0
      IF (ITYPE.EQ.0) GO TO 30
      DO 20 I=1,ITYPE
20    NPOS = NPOS + NTIME(I)
30    DO 40 I=2,N1
      NPOS1 = NPOS + I
      T2 = FTLOAD(NPOS1,2)
      IF (TOME.LT.T2) GO TO 50
40    CONTINUE
50    NPOSM = NPOS1 - 1
      T1 = FTLOAD(NPOSM,2)
      F1 = FTLOAD(NPOSM,1)
      F2 = FTLOAD(NPOS1,1)
      T21 = T2-T1
      FLOAD = F1
      IF (T21) 55,60,55
55    CONTINUE
      FLOAD = (F2- F1)*(TOME - T1)/(T2- T1) + F1
60    CONTINUE
      RETURN
      END
C=DECK      POST21
C./      ADD   NAME=POST22
C
C     CALCULATES PREBUCKLING DISPLACEMENTS AND STRESS RESULTANTS
C
C     OVERLAY(2,0)       (CDC VERSION)
C     PROGRAM POST22     (CDC VERSION)
C
C
C     HOW THE WORKING SPACE STORAGE, B(33000), IS ALLOCATED...
C
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    I2 = NUMBER OF 'MESH' POINTS IN ENTIRE STRUCTURE
C    IPRE = NUMBER OF DIFFERENT KINDS OF VARIABLES STORED FOR EACH RING
C    NTOT = TOTAL NUMBER OF DISCRETE RINGS IN STRUCTURE
C    M2 = NUMBER OF DEGREES OF FREEDOM IN PREBUCKLING PROBLEM
C    NSEG = NUMBER OF SHELL SEGMENTS
C
C/10*I2/4*I2-/IPRE*NTOT/---------8*I2----------/--M2-/--M2-/--I2-/
C/--C--/THERM/--RING---/--------PMODE----------/FNEW-/FOLD-/--DS-/
C/B(1)-/B(N1)/--B(N2)--/--------B(N3)----------/B(N7)/B(N8)/B(N9)/
C1     N1    N2        N3                      N7    N8    N9   N10
C
C     CONTINUE ON NEXT LINE
C
C /-5*I2-/-3*I2-/I2+2*NSEG/-3*I2-/-3*I2-/
C /---B--/---P--/---IW----/PSFIX-/PSVAR-/
C /B(N10)/B(N11)/--B(N12)-/B(N13)/B(N14)/
CN10    N11    N12       N13    N14
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     B(1)     CONSTITUTIVE LAW COEFFICIENTS, C(I,J)
C   N1    B(N1)    NEGATIVE OF PLASTIC+CREEP+THERMAL STRAINS INTEGRATED
C                  THROUGH SHELL WALL THICKNESS. LIKE THERMAL STRESS AND
C                  MOMENT RESULTANTS.
C   N2    B(N2)    DISCRETE RING VARIABLES, SUCH AS ECCENTRICITIES AND
C                  EP+EC+ET ('THERMAL STRAINS') INTEGRATED OVER RING
C                  CROSS-SECTION AREA, AND EA, EIX, EIY, ETC...
C   N3    B(N3)    PREBUCKLING QUANTITIES--W,U,BETA,S,N10,N20,M10,M20
C   N7    B(N7)    NOT USED
C   N8    B(N8)    SOLUTION VECTOR FOR LOAD STEP NO. KSTEP
C   N9    B(N9)    ARC LENGTH INCREMENTS (FINITE DIFFERENCE ELEMENTS)
C   N10   B(N10)   SHELL REFERENCE SURFACE GEOMETRY PARAMETERS R, R',
C                  1/R1, 1/R2, (1/R1)'
C   N11   B(N11)   NORMAL PRESSURE AND SURFACE TRACTION DISTRIBUTIONS
C   N12   B(N12)   EQUATION NUMBERS CORRESPONDING TO 'W' MESH POINTS
C   N13   B(N13)   NOT USED
C   N14   B(N14)   NOT USED
C
C=DECK      PLOTS
      SUBROUTINE PLOTS (INTTYP,LOGIN,LOGOUT)
C
C       SUB TO WRITE TO A PLOT FILE
C
c     WRITE (53, 100) 'PLOTS  ',FLOAT(INTTYP),FLOAT(LOGIN),FLOAT(LOGOUT)
      RETURN
100   FORMAT (' ',A7,9E13.5)
      END 
C=DECK      PINIT
      SUBROUTINE PINIT(IUNIT)
      COMMON /UCCPLT/ IQZPLT,IFILE,NAME(2),IFTIME(4)
      IQZPLT=12345678
      IFILE=IUNIT
C
C   PINIT CALLS PLOTS USING PASSED ARGUMENT IUNIT
C
      RETURN
      END
C=DECK      DUMMY
      SUBROUTINE DUMMY
C BEG JAN 2012
C     ENTRY FDATE
C     ENTRY WDATE
C END JAN 2012
      ENTRY JOBNAM
      ENTRY NARG
      ENTRY WDATE
      ENTRY ENPLT
      RETURN
      END
