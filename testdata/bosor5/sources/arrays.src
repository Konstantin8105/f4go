C=DECK      ARRAYSLIB
C
C  THIS IS THE ARRAYS LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      ARRAYS
      SUBROUTINE ARRAYS
C
C  200 SEGMENT VERSION OF BOSOR5
C     OVERLAY(6,0)     (CDC VERSION)
C     PROGRAM ARRAYS   (CDC VERSION)
C
C
C     CALLED FROM MAIN.. FINDS STIFFNESS MATRIX, LOAD-GEOMET*IC MATRIX
C     AND MASS MATRIX, ALL FOR A GIVEN CIRCUMFERENTIAL WAVE NUMBER N.
C
      COMMON/IFLOWS/IFLOW,ICREEP,IJNCT,IJNTB,ITSTOR,ITHSTR,IZSTOR,IBSTOR
      COMMON/BUCKN/N0B,NMINB,NMAXB,INCRB
      COMMON/WAVES/N
      COMMON/TOMER/TOME,DTIME
      COMMON/ZREGNS/NREGNS,IREGN(10,2)
      COMMON/RING4/D1B(201),D2B(201)
      COMMON/SEGBND/ISEGA,ISEGB,I2AB,NCONDB
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/INSTAB/INDIC
      COMMON/RMASS/RM(99)
      COMMON/TOTPTS/M3
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(201),IROWCB(201),IIWP,IIWB
      COMMON/MISCEL/ICOND1,ICOND2,KK,NSUB,KLAP,I5TOT,IC,III,IV
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/DETER/DET,NEX
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/      /B(160000)
      COMMON/SHEL/IWAL(201)
      COMMON/OUTP/NPRT
      COMMON/SMODE/IPMODE(99),ICMODE(99),ISMODE(99),IQMODE(99),IHMOD(99)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/RGFCES/RHF(99),RHFIX(99)
      COMMON/KKSSP/KMIN,KMAX
      COMMON/ISNL/ISIGNL
      COMMON/CONPRE/CPRE
      DOUBLE PRECISION DB
#if cray
      DIMENSION DB(160000)
#else
      DIMENSION DB(80000)
#endif
      EQUIVALENCE (B(1),DB(1))
C
C     HOW THE WORKING SPACE STORAGE, B(160000), IS ALLOCATED...
C
C     VARIABLES GOVERNING THE LENGTH OF VARIOUS ARRAYS...
C
C    M3 = NUMBER OF DEGREES OF FREEDOM IN    BUCKLING PROBLEM
C    IMAXB = LENGTH OF BLOCK OF STIFFNESS MATRIX,    BUCKLING PROBLEM
C    I2 = NUMBER OF 'MESH' POINTS IN ENTIRE STRUCTURE
C    IPRE = NUMBER OF DIFFERENT KINDS OF VARIABLES STORED FOR EACH RING
C    NTOT = TOTAL NUMBER OF DISCRETE RINGS IN STRUCTURE
C    NSEG = NUMBER OF SHELL SEGMENTS
C
C/2*IMAXB/--M3-/10*I2/-3*I2-/-I2-/IPRE*NTOT/--I2-/5*I2-/3*I2-/--I2-/
C/---AS--/FLOC-/--C--/CSHEAR/----/---RING--/--CM-/--B--/--P--/--DS-/
C/-DB(1)-/B(N1)/B(N2)/B(N3)-/----/--B(N4)--/B(N5)/B(N6)/B(N7)/B(N8)/
C1       N1    N2    N3         N4         N5    N6    N7    N8    N9
C
C     GO TO NEXT LINE...
C
C BEG JAN 1996 (QSAVE NOT STORED HERE ANYMORE: GAVE TROUBLE.)
C /I2+2*NSEG/-2614-/-3*I2-/-3*I2-/
C /---IW----/JUNCTB/PSFIX-/PSVAR-/
C /--B(N9)--/B(N10)/B(N11)/B(N12)/
C N9       N10    N11    N12    N13D
C
C     FOLLOWING QUANTITIES OVERLAY STARTING AT N2. THEY ARE FOR DETER-
C     MINANT CALCULATION...
C
C                                /2*IMAXB/--2*M3-/--M3--/
C                                /--TP---/--DI---/-DIAG-/
C                                /DB(N2D)/DB(N3D)/B(N14)/
C                               N2D     N3D     N14
C END JAN 1996
C
C     STARTING ADDRESSES AND DEFINITIONS OF VARIABLES...
C
C  ADD.   VAR.      DEFINITION
C
C   1     DB(1)    STABILITY MATRIX
C   N1    B(N1)    NUMBERS WHICH INDICATE THE LOCATION OF THE MAIN DIAG-
C                  ONAL ELEMENTS RELATIVE TO THE BEGINNING OF EACH BLOCK
C                  OF THE STIFFNESS MATRIX
C   N2    B(N2)    CONSTITUTIVE LAW COEFFICIENTS, C(I,J)
C   N3    B(N3)    CONSTITUTIVE LAW COEFFICIENTS, C33, C36, C66
C   N4    B(N4)    DISCRETE RING VARIABLES, SUCH AS ECCENTRICITIES AND
C                  EP+EC+ET ('THERMAL STRAINS') INTEGRATED OVER RING
C                  CROSS-SECTION AREA, AND EA, EIX, EIY, ETC...
C   N5    B(N5)    MASS PER UNIT AREA OF SHELL WALL
C   N6    B(N6)    SHELL REFERENCE SURFACE GEOMETRY PARAMETERS R, R',
C                  1/R1, 1/R2, (1/R1)'
C   N7    B(N7)    NORMAL PRESSURE AND SURFACE TRACTION DISTRIBUTIONS
C   N8    B(N8)    ARC LENGTH INCREMENTS (FINITE DIFFERENCE ELEMENTS)
C   N9    B(N9)    EQUATION NUMBERS CORRESPONDING TO 'W' MESH POINTS
C   N10   B(N10)   CONSTRAINT CONDITIONS, EQU. NOS CORRESPONDING THERETO
C   N11   B(N11)   PREBUCKLING RESULTANTS N10,N20 AND ROTATION CHI0
C                  CORRESPONDING TO LAST TIME STEP
C   N12   B(N12)   PREBUCKLING RESULTANTS N10,N20 AND ROTATION CHI0
C                  CORRESPONDING TO CURRENT TIME STEP
C   N13D  DB(N13D) WORKING SPACE REQUIRED IN FACTOR AND SOLVE
C   N2D   DB(N2D)  WORKING SPACE REQUIRED IN FACTOR AND SOLVE
C   N3D   DB(N3D)  WORKING SPACE REQUIRED IN FACTOR
C   N14   B(N14)   DIAGONAL ELEMENTS OF FACTORED STABILITY MATRIX
C
      IF (NPRT.GT.0) WRITE(6,10) N
   10 FORMAT(/// 97H ENTER SUBROUTINE ARRAYS TO CALCULATE STIFFNESS MATR
     1IX, LOAD-GEOMETRIC MATRIX,OR MASS MATRIX FOR     I6,6H WAVES   )
      IF (NPRT.GT.1) CALL SR100T(2)
      ICPRE = CPRE
      ITOT = I2AB + 2*(ISEGB - ISEGA + 1)
      N1 = 2*IMAXB + 1
      N2 = N1 + M3
      N3 = N2 + 10*I2
      N4 = N3 + 4*I2
      N5 = N4 + IPRE*NTOT
      N6 = N5 + I2
      N7 = N6 + 5*I2
      N8 = N7 + 3*I2
      N9 = N8 + I2
      N10 = N9 + I2 + 2*NSEG
      N11 = N10 + 2614
      N12 = N11 + 3*I2
      N13 = N12 + 3*I2
      N13D = N13/2 + 1
C BEG JAN 1996
C     N2D = IMAXB + (M3+1)/2 + 1
C     N3D = N2D + IMAXB
C     N14 = N1 + M3 + 2*IMAXB + 2*M3 +1
      N2D = N13D
      N3D = N2D + IMAXB
      N14 = N13 + 2*IMAXB + 2*M3 + 1
C END JAN 1996
      IL = 14*I2 + IPRE*NTOT
      IF (KSTEPM.EQ.1) GO TO 165
   20 IARG = KSTEP + IFLOW*50
      CALL GASP(B(N2),IL,3,ICMODE(IARG))
      I3 = 3*I2
      CALL GASP(B(N3),I3,3,IHMOD(KSTEP))
      ILONG = 11*I2 + 2*NSEG + 2614 + M3
      CALL GASP(B(N5),ILONG,3,IWAL(8))
      DO 30 I=1,M3
      I1 = N1 + I - 1
      I22 = N11 + I - 1
   30 B(I1) = B(I22)
      I6 = 6*I2
      CALL GASP(B(N11),I6,3,IQMODE(KSTEP))
      DO 40 I=1,IMAXB
   40 DB(I) = 0.0
      IBUCK = 1
   50 CONTINUE
      IARG = KSTEP + IFLOW*50 + 1
      IF (IBUCK.EQ.2.AND.ICMODE(IARG).EQ.0) CALL ERREX
      IF (IBUCK.EQ.2) CALL GASP(B(N2),IL,3,ICMODE(IARG))
      IF (IBUCK.EQ.2) CALL GASP(B(N11),I6,3,IQMODE(KSTEP+1))
      ICOND1 = 1
      ICOND2 = 1
      KK = 1
      DO 70 I=1,ISEGA
      IF (I.EQ.ISEGA) GO TO 80
      I5I = I5(I)
      DO 60 J=1,I5I
      IPOS = (KK-1)*IPRE + N4
      KSEG = B(IPOS)/1000
      FSEG = KSEG
      KPOINT = B(IPOS) - FSEG*1000.
      IF (I.NE.KSEG) GO TO 70
      IF (I.NE.KPOINT) GO TO 60
      KK = KK + 1
   60 CONTINUE
   70 CONTINUE
   80 CONTINUE
C     IEND = N13 - 1
C     WRITE(6,201)(B(I),I=N1,IEND)
C 201 FORMAT(1P10E12.3 )
      NSUB = 7
      KLAP = 4
      I5TOT = 0
      IC = 4
      III = 1
      IV = 0
      IF (IBUCK.EQ.1) KROOTS = 0
      ITOTL = 0
C
C  BEGIN LOOP OVER NUMBER OF SEGMENTS...
C
      DO 100 I=1,NSEG
C
C     CALCULATE MATRIX ELEMENTS FOR NEXT SHELL SEGMENT
C
      I5I = I5(I)
      IF (I.LT.ISEGA) GO TO 90
      IF (I.GT.ISEGB) GO TO 110
      IARG1 = N8 + ITOTL
      IPOS = 10*ITOTL + N2
      IPOS1 = 3*ITOTL + N3
      IPOS2 = N5 + ITOTL
      IPOS3 = N7 + 3*ITOTL
      IPOS4 = N6 + 5*ITOTL
      IARG2 = N10 + 1206
      IARG3 = N10 + 2412
      IPOS5 = N12 + 3*ITOTL
      IPOS6 = N11 + 3*ITOTL
      IF (IBUCK.EQ.1) IPOS6 = IPOS5
C     WRITE(6,202) I,I5I,ITOTL,IARG1,IPOS,IPOS1,IPOS2,IPOS3,IPOS4,IARG2,
C    1 IARG3,IPOS5,IPOS6
C 202 FORMAT(13I9)
      CALL STABIL(I,I5I,B(IARG1),NSEG,IBUCK,B(IPOS),B(IPOS1),B(IPOS2),
     1 B(IPOS3),B(IPOS4),DB(1),B(N9),B(N1),B(IARG2),B(N10),IROWCB,
     2 B(IARG3),IMAXB,B(IPOS5),B(IPOS6),RHF,RHFIX,RM,D1B,D2B,NCONDB,
C BEG JAN 1996
C    3 DB(N13D),B(N4))
     3          B(N4))
C END JAN 1996
   90 ITOTL = ITOTL + I5I
  100 CONTINUE
  110 CONTINUE
      IF (NPRT.GT.0) WRITE(6,120) IBUCK,N
  120 FORMAT(/46H ***** COEFFICIENT MATRIX CALCULATED. IBUCK =  I2,
     1 7H    N = I6, 6H *****   /)
      IF (INDIC.EQ.-2) GO TO 130
      IF (IBUCK.EQ.2) GO TO 170
      IBUCK = 2
      GO TO 50
  130 CONTINUE
      DETS = DET
       CALL FACTR(DB(N2D),DB(1),IDRW(1,1),DET,NEX,IBLK,NGBK,NFK,B(N1),
     1 B(N14),DB(N3D),KMAXB)
      WRITE(6,150) KSTEP,TOME,N,DET,NEX
  150 FORMAT(//' TIME STEP NO.' I3, '  TIME=' 1PE12.3, '   N = 'I6,'  CI
     1RCUMFERENTIAL WAVES. ***** STABILITY DETERMINANT ='1PE12.3,'*10**'
     2 I5//)
      WRITE(6,151) KSTEP,KTM,KROOTS
  151 FORMAT(/' TIME STEP' I3,'   NO. OF NEGATIVE ROOTS=' I3,'   NO. OF
     1LAGRANGE MULTIPLIERS=' I3/)
      PROD = DETS*DET
      IF (KTM.GT.KROOTS) GO TO 155
      IF (KSTEP.EQ.KMAX.AND.ISIGNL.EQ.0) GO TO 165
      IF (KSTEP.EQ.KMAX.AND.ISIGNL.EQ.1) ISIGNL = 2
      IF (ISIGNL.NE.2) GO TO 154
      WRITE(6,153) KSTEP
  153 FORMAT(///' ***** STABILITY DETERMINANT DOES NOT CHANGE SIGN IN '/
     1' THE TIME INTERVAL UP TO AND INCLUDING TIME STEP NO. 'I3'  FOR '/
     2' THE RANGE OF CIRCUMFERENTIAL WAVE NUMBERS TESTED IN THIS RUN'/)
  154 CONTINUE
      IF (PROD.GT.0.0.OR.KSTEP.EQ.KMIN) GO TO 170
  155 TOMEM = TOME - DTIME
      WRITE (6,160)N,TOMEM,TOME
  160 FORMAT(//37H ***** STABILITY DETERMINANT FOR N =    I6,
     1 40H CHANGES SIGN IN THE TIME INTERVAL FROM      1PE12.3,
     2 4H TO  1PE12.3,  7H *****         //)
      IF (ISIGNL.EQ.1) GO TO 164
      WRITE(6,11)
   11 FORMAT(1H0)
      WRITE(6,12)
      WRITE(6,12)
      WRITE(6,12)
      WRITE(6,12)
   12 FORMAT(' **********PLEASE READ THE FOLLOWING IMPORTANT NOTICE ****
     1******')
      KSTEP1 = KSTEP - 1
      WRITE(6,13) N,N,KSTEP1,KSTEP,N
   13 FORMAT(//' THE USER HAS CHECKED FOR BIFURCATION BUCKLING LOADS  '/
     1' FOR N = 'I6,'  CIRCUMFERENTIAL WAVES.  IT HAS BEEN DETERMINED '/
     2' BY THE ABOVE CALCULATIONS THAT FOR N = 'I6,'  THE STABILITY   '/
     3' DETERMINANT CHANGES SIGN BETWEEN TIME STEP NO.'I3,'  AND TIME '/
     4' STEP NO.'I3,'.                                                '/
     5' HOWEVER, IT MAY HAPPEN THAT THE MINIMUM NONSYMMETRIC BIFUR-   '/
     6' CATION BUCKLING LOAD CORRESPONDS TO A DIFFERENT VALUE OF N THAN'
     7  I6//)
      WRITE(6,14) KSTEP1
   14 FORMAT(' THE PURPOSE OF THE FOLLOWING CALCULATIONS IS TO DETER- '/
     1' MINE FOR WHICH N THE CRITICAL LOAD IS SMALLEST.  A SEQUENCE OF'/
     2' EIGENVALUE PROBLEMS.....                                      '/
     3'            (K1(N) + LAMBDA*K2(N))*Q  =  0                     '/
     4' IS THEREFORE SET UP, WHERE                                    '/
     5' K1(N) = STABILITY STIFFNESS MATRIX CORRESPONDING TO A BUCKLING'/
     6' MODE WITH N CIRC. WAVES FOR THE STRUCTURE AS LOADED AND DE-   '/
     7' FORMED BY THE LOADS CORRESPONDING TO TIME STEP NO.' I3/)
      IF (ICPRE.EQ.0) THEN
        WRITE(6,15) KSTEP1,KSTEP
      ELSE
        WRITE(6,18) KSTEP
      ENDIF
   15 FORMAT(
     1' K2(N) = LOAD-GEOMETRIC MATRIX FOR N CIRC. WAVES CORRESPONDING '/
     2' TO THE LOAD INCREMENT FROM STEP NO.'I3,'  TO STEP NO.' I3//)
   18 FORMAT(
     1' K2(N) = LOAD-GEOMETRIC MATRIX FOR N CIRC. WAVES CORRESPONDING '/
     2' TO THE TOTAL LOAD AT STEP NO.'I3//)
      WRITE(6,16)
   16 FORMAT(' LAMBDA = THE EIGENVALUE.  DONT CONCERN YOURSELF WITH   '/
     1' THE ABSOLUTE VALUE OF THIS.  ONLY THE SIGN OF THE MINIMUM     '/
     2' LAMBDA AND THE RELATIVE VALUES OF LAMBDA FOR VARIOUS N ARE    '/
     3' SIGNIFICANT IF PLASTICITY OCCURS.                            '//
     4' Q = THE EIGENVECTOR  (BUCKLING MODE)  '//)
      WRITE(6,17)
   17 FORMAT(1H1)
  164 CONTINUE
      IF(ISIGNL.EQ.1) ISIGNL = 2
      IF(ISIGNL.EQ.2) GO TO 170
  165 CONTINUE
      IF (KSTEP.LT.KMAX) GO TO 169
      IF (PROD.LT.0.0) GO TO 169
      IF (KSTEPM.EQ.1) GO TO 169
      ISIGNL = 1
      WRITE(6,1)
    1 FORMAT(1H0)
      WRITE(6, 2)
      WRITE(6, 2)
      WRITE(6, 2)
      WRITE(6, 2)
    2 FORMAT(' **********PLEASE READ THE FOLLOWING IMPORTANT NOTICE ****
     1******')
      KSTEP1 = KSTEP - 1
      WRITE(6, 3) N, N, N
    3 FORMAT(//' THE USER HAS CHECKED FOR BIFURCATION BUCKLING LOADS  '/
     1' FOR N = 'I6,'  CIRCUMFERENTIAL WAVES.  IT HAS BEEN DETERMINED '/
     2' BY THE ABOVE CALCULATIONS THAT FOR N = 'I6,'   THE STABILITY  '/
     3' DETERMINANT DOES NOT CHANGE SIGN IN THE TIME AND LOAD RANGE   '/
     4' SPECIFIED FOR THIS RUN.                                       '/
     5' HOWEVER, IT MAY HAPPEN THAT THE MINIMUM NONSYMMETRIC BIFUR-   '/
     6' CATION BUCKLING LOAD CORRESPONDS TO A DIFFERENT VALUE OF N THAN'
     7  I6//)
      WRITE(6, 4) KSTEP1
    4 FORMAT(' THE PURPOSE OF THE FOLLOWING CALCULATIONS IS TO DETER- '/
     1' MINE FOR WHICH N THE CRITICAL LOAD IS SMALLEST.  A SEQUENCE OF'/
     2' EIGENVALUE PROBLEMS.....                                      '/
     3'            (K1(N) + LAMBDA*K2(N))*Q  =  0                     '/
     4' IS THEREFORE SET UP, WHERE                                    '/
     5' K1(N) = STABILITY STIFFNESS MATRIX CORRESPONDING TO A BUCKLING'/
     6' MODE WITH N CIRC. WAVES FOR THE STRUCTURE AS LOADED AND DE-   '/
     7' FORMED BY THE LOADS CORRESPONDING TO TIME STEP NO.' I3/)
      IF (ICPRE.EQ.0) THEN
        WRITE(6,15) KSTEP1,KSTEP
      ELSE
        WRITE(6,18) KSTEP
      ENDIF
      WRITE(6, 6)
    6 FORMAT(' LAMBDA = THE EIGENVALUE.  DONT CONCERN YOURSELF WITH   '/
     1' THE ABSOLUTE VALUE OF THIS.  ONLY THE SIGN OF THE MINIMUM     '/
     2' LAMBDA AND THE RELATIVE VALUES OF LAMBDA FOR VARIOUS N ARE    '/
     3' SIGNIFICANT IF PLASTICITY OCCURS.                            '//
     4' Q = THE EIGENVECTOR  (BUCKLING MODE)  '//)
      WRITE(6, 7)
    7 FORMAT(1H1)
  169 CONTINUE
      KSTEPM = 0
      INDIC = -1
      KSTEP = KSTEP - 1
      N = NMINB
      GO TO 20
  170 CONTINUE
      RETURN
C     RETURN CARD NOT NEEDED IN CDC VERSION
      END
C=DECK      STABIL
      SUBROUTINE STABIL(ISEG,L5,HS,NSEG,IBUCK,COEF,CSHEAR,CMASS,PR,BG,
     1     AS,FW,      FLOC,FFX,FFIX,IROWC,FTYPE,IMAX,PSVAR,PSFIX,RHF,
C BEG JAN 1996
C    2 RHFIX,RM,D1,D2,NCOND,QSAVE,RING)
     2 RHFIX,RM,D1,D2,NCOND,      RING)
C END JAN 1996
C
C     CALLED FROM ASTAB, WHICH IS CALLED FROM ARRAYS, WHICH IS CALLED
C     FROM MAIN.  SETS UP STABILITY OR VIBRATION OR NONSYMMETRIC
C     STRESS EQUATIONS FOR CURRENT SEGMENT (ISEG) AND CURRENT WAVE-
C     NUMBER N. SEE THE DESCRIPTION UNDER PRESTS FOR MORE DETAILS OF
C     METHOD. BASED ON MINIMIZATION OF ENERGY WITH RESPECT TO MESH
C     POINT DISPLACEMENTS.
C
      DOUBLE PRECISION  R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C,B1,D,U,ROT,PRE,QD,AS,DS,SMS,CHIFIX
      DOUBLE PRECISION     VN1,VN2,WB,VB,UB,QSAVE
      DOUBLE PRECISION USTAR,VSTAR,WSTAR,HPAST,HI,WBD
      DOUBLE PRECISION RNT
      DIMENSION RNT(6,7)
      DIMENSION UB(7),VB(7),WB(7),HS(1),WBD(7) ,RING(*)
      COMMON/SVP/PS(201)
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/WAVES/N
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      DIMENSION         QD(4,7),RM(95),PSVAR(L5,3),PSFIX(L5,3)
      DIMENSION COEF(L5,10),BG(L5,5),PR(L5,3),RHFIX(99),RHF(99)
      DIMENSION CSHEAR(L5,3),CMASS(*),FTYPE(*)
      DIMENSION FFX(201,6),FFIX(201,6),FLOC(*),ITYPE(201),IROWC(201)
      DIMENSION QSAVE(35,4,7),IRSAVE(35),ISAVE(35,7),FW(*),AS(3366)
      DIMENSION C(6,6),B1(6,7),D(4,7),U(7,7),ROT(3,7),PRE(6,6)
      DIMENSION D1(201),D2(201)
      COMMON/MISCEL/ICOND1,ICOND2,KK,NSUB,KLAP,I5TOT,IC,III,IV
      COMMON/INSTAB/INDIC
      COMMON/TEMTUR/TEMP(201),P(201)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/OUTP/NPRT
      COMMON/CMAXS/CMAX
      COMMON/BCK/IDRW( 20,5)
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
      COMMON/INDICS/I3M,I2M,I1M,I0,I1P,I2P,I3P
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/RPLST5/NTYP(99),NPARTS(99)
      COMMON/CONPRE/CPRE
      COMMON/FNDAT/FSTIF(201)
      DO 10 I=1,201
   10 ITYPE(I) = FTYPE(I)
C
C     SOME INITIALIZATIONS FOLLOW.
      IF (IBUCK.EQ.3) GO TO 40
      DO 30 I=1,6
      DO 20 J=1,6
      PRE(I,J) = 0.0
   20 C(I,J) = 0.0
      DO 30 J=1,7
      RNT(I,J) = 0.0
   30 B1(I,J) = 0.0
   40 CONTINUE
      DO 60 I=1,4
      DO 50 J=1,7
      QD(I,J) = 0.0
   50 D(I,J) = 0.0
   60 CONTINUE
      DO 80 I=1,3
      DO 70 J=1,7
   70 ROT(I,J) = 0.0
   80 CONTINUE
      DO 90 I=1,7
      UB(I) = 0.0
      VB(I) = 0.0
      WBD(I) = 0.0
   90 WB(I) = 0.0
      UB(2) = 0.5
      UB(5) = 0.5
      VB(3) = 0.5
      VB(6) = 0.5
      FN = FLOAT(N)
C
C     LOOP BEGINS FOR COEFFICIENT MATRIX AND RIGHT-HAND-SIDE  VECTOR,
C     IF ANY.
      HI = HS(1)
C
C  BEGIN LOOP OVER POINTS WITHIN SEGMENT...
C
      DO 630 I=1,L5
C
      H = HS(I)
      HPAST = HI
      HI = 2.*H - HPAST
      IT = I5TOT + I + 1
C     GLOBAL EQUATION NO.S FOR FINITE-DIFFERENCE 'ELEMENT' MODULE ARE
C     I3M,I2M,I1M,I0,I1P,I2P,I3P.  THESE LOCATE THE LOCAL ELEMENT
C     MATRICES FOR ASSEMBLY INTO THE GLOBAL MATRICES
      I3M = FW(IT - 1)
      I0 = FW(IT)
      I3P = FW(IT + 1)
      I2M = I0 - 2
      I1M = I0 - 1
      I1P = I0 + 1
      I2P = I0 + 2
C     CERTAIN LOCAL MATRICES ARE 'EXPLODED' BECAUSE OF MINUS SIDES OF
C     CONSTRAINT CONDITIONS.
      I3PI0 = I3P - I0
      ICNSUB = IC + NSUB - KLAP
      IF(I3PI0.EQ.ICNSUB) I1P = I0 + IC + 1
      IF(I3PI0.EQ.ICNSUB) I2P = I0 + IC + 2
C     INITIALIZE LOCAL ENERGY MATRIX U.
      DO 100 II=1,7
      DO 100 JJ=1,7
  100 U(II,JJ) = 0.0
      DS = H
      IF (I.EQ.1.OR.I.EQ.L5) DS = H/2.
C     SHELL GEOMETRY PARAMETERS . .
C        R = PARALLEL CIRCLE RADIUS
C        RD= DERIVATIVE OF PARALLEL CIRCLE RADIUS WITH RESPECT TO S
C       FK1= MERIDIONAL CURVATURE
C       FK2= NORMAL CIRCUMFERENTIAL CURVATURE
C      CURD =DERIVATIVE OF MERIDIONAL CURVATURE W.R.T. S
C
      R = BG(I,1)
      RD = BG(I,2)
      FK1 = BG(I,3)
      FK2 = BG(I,4)
      CURD = BG(I,5)
C
C     IF (ISEG.EQ.121) THEN
C   C    WRITE(6,4222) ISEG,I,R,RD,FK1,FK2
C4222    FORMAT(' ARRSEG=',I4,'  POINT=',I2,'  R,RD,FK1,FK2=',1P4E12.4)
C     ENDIF
C
      RDS = R*DS
C     POLE CONDITIONS
      ISIG = 0
      RI = R
      IF (R.NE.0.) GO TO 110
      R = H/100000.
      ISIG = 1
      RDS = H**2/8.
  110 CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W,W' FOR VARIABLE SPACING
C
      CALL GETWWD(H,HI,HPAST,WB,WBD)
      CALL GETROT(ROT,I,L5,ISIG,WB,WBD)
      CHIFIX = PSFIX(I,3)
C     KINEMATIC RELATIONS FOR SHELL DEFORMED BY CHIFIX...
      CALL GETB1(B1,CHIFIX,ROT,L5,ISIG,WB,WBD,HPAST,HI)
      CALL GETRNT(RNT,ROT,B1,ISIG)
      IF (IBUCK.NE.1) GO TO 130
C     CONSTITUTIVE EQUATION COEFFICIENTS
      CALL GETC(L5,I,COEF,C,CSHEAR)
C     'FIXED' PRESSURE-ROTATION EFFECT
      PISEG = P(ISEG)
      IF (INDIC.EQ.-1) PISEG = PS(ISEG)
      CALL GETP(PISEG,PR(1,3),PR(1,2),UB,VB,WB,B1,ROT,I,U)
      PRE(1,1) = PSFIX(I,1)*RDS
      PRE(2,2) = PSFIX(I,2)*RDS
      PRE(3,3) = PRE(1,1)
      PRE(4,4) = PRE(2,2)
      PRE(5,5) = PRE(1,1)
      PRE(6,6) = PRE(2,2)
C     WORK DONE BY 'FIXED' PRESTRESSES DURING BUCKLING OR VIBRATION
      CALL MATMU4(PRE,RNT,U,6,7,1)
C     SHELL WALL STRAIN ENERGY INDEPENDENT OF 'VARIABLE' LOADS
  120 CALL MATMU4(C,B1,U,6,7,1)
C
C     ADD ELASTIC FOUNDATION CONTRIBUTION...(MARCH 25, 1986)
C
      CALL FOUNDA(FSTIF(ISEG),WB,RDS,U)
C
C     CONTRIBUTIONS OF DISTRIBUTED THERMAL AND MECHANICAL LOADS TO RHS
      GO TO 160
  130 IF (IBUCK.NE.2) GO TO 140
C     VN1 = MERIDONAL PRESTRESS RESULTANT
C     VN2 = CIRCUMFERENTIAL PRESTRESS RESULTANT
      VN1 = RDS*(PSVAR(I,1) - (1.-CPRE)*PSFIX(I,1))
      VN2 = RDS*(PSVAR(I,2) - (1.-CPRE)*PSFIX(I,2))
C     'VARIABLE' PRESSURE-ROTATION EFFECT
      DP = P(ISEG) - (1.-CPRE)*PS(ISEG)
      CALL GETP(DP   ,PR(1,3),PR(1,2),UB,VB,WB,B1,ROT,I,U)
      PRE(1,1) = VN1
      PRE(2,2) = VN2
      PRE(3,3) = VN1
      PRE(4,4) = VN2
      PRE(5,5) = VN1
      PRE(6,6) = VN2
C     WORK DONE BY 'VARIABLE' PRESTRESS DURING BUCKLING
      CALL MATMU4(PRE,RNT,U,6,7,1)
      GO TO 160
  140 CONTINUE
  150 IF (IBUCK.NE.3) GO TO 160
C     LOCAL MASS MATRIX GENERATED
      SMS = CMASS(I)
      U(2,2) = -0.25*SMS*RDS
      U(3,3) = U(2,2)
      U(1,1) =-WB(1)*WB(1)*RDS*SMS
      U(4,1) =-WB(4)*WB(1)*RDS*SMS
      U(7,1) =-WB(7)*WB(1)*RDS*SMS
      U(7,4) =-WB(7)*WB(4)*RDS*SMS
      U(4,4) =-WB(4)*WB(4)*RDS*SMS
      U(7,7) =-WB(7)*WB(7)*RDS*SMS
      U(5,2) = U(2,2)
      U(5,5) = U(2,2)
      U(6,3) = U(2,2)
      U(6,6) = U(2,2)
  160 CONTINUE
C     RING ENERGY AND RIGHT-HAND-SIDE
      IF (NTOT.EQ.0) GO TO 180
C
      IPOS = (KK-1)*IPRE + 1
      KSEG = RING(IPOS)/1000.
      FSEG = KSEG
      IF (ISEG.NE.KSEG) GO TO 180
      KPOINT = RING(IPOS)-FSEG*1000.
      IF (I.NE.KPOINT) GO TO 180
      IF (NTYP(KK).EQ.0) GO TO 170
C     D-MATRIX RELATES AXIAL AND RADIAL DISPLACEMENTS TO NORMAL AND
C     TANGENTIAL DISPLACEMENTS
      CALL GETD(I,D,ROT,UB,VB,WB)
      CALL GETG(IBUCK,D,RING(IPOS),CHIFIX,U)
  170 KK = KK + 1
  180 CONTINUE
C
C     CONSTRAINT CONDITIONS
C
C     IFX(ICOND1,1) CONTAINS LOCATIONS OF 'MINUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
      IF (ICOND1.GT.NCOND) GO TO 330
      IFX1 = FFX(ICOND1,1)
      IF (I.EQ.(IFX1-ISEG*1000)) GO TO 190
      GO TO 330
C     FILL THE 'MINUS'PART OF THE CONSTRAINT CONDITION
C
C     IR,IR1,IR2,IR3 CONTAIN GLOBAL MATRIX ROW NOS. CORRESPONDING TO THE
C     LAGRANGE MULTIPLIERS ASSOCIATED WITH CONSTRAINT CONDITIONS
C     IDENTIFIED BY IFX(ICOND1,1)
  190 IR = FFX(ICOND1,2)
      IR1 = IR + 1
      IR2 = IR + 2
      IR3 = IR + 3
      IF (IBUCK.EQ.1) GO TO 200
      ICOND1 = ICOND1 + 1
      GO TO 180
  200 KKK = ICOND1
C
C     FIFX1, 2, 3, AND 4 CONTAIN INTEGERS WHICH MAY OR MAY NOT RELEASE
C     THE CONSTRAINT CONDITIONS.
      IF (IABS(N).GT.1) GO TO 220
      IF (IABS(N).GT.0) GO TO 210
      IF ((ISTOP0(1)/1000).NE.ISEG) GO TO 220
      IF ((ISTOP0(1)-1000*ISEG).NE.I) GO TO 220
      IF (FFX(ICOND1,3).EQ.1.0.AND.FFX(ICOND1,4).EQ.1.0) GO TO 220
C     RIGID BODY AXISYMMETRIC DISPLACEMENTS PREVENTED
      FIFX1 = ISTOP0(3)*CMAX
      FIFX2 = ISTOP0(4)*CMAX
      FIFX3 = ISTOP0(5)*CMAX
      FIFX4 = ISTOP0(6)*CMAX
      GO TO 230
  210 IF ((ISTOP1(1)/1000).NE.ISEG) GO TO 220
      IF ((ISTOP1(1)-1000*ISEG).NE.I) GO TO 220
      IF (FFX(ICOND1,3).EQ.1.0.AND.FFX(ICOND1,4).EQ.1.0) GO TO 220
C     RIGID BODY DISPLACEMENTS CORRESPONDING TO N=1 CIRCUMFERENTIAL
C     WAVE ARE PREVENTED
      FIFX1 = ISTOP1(3)*CMAX
      FIFX2 = ISTOP1(4)*CMAX
      FIFX3 = ISTOP1(5)*CMAX
      FIFX4 = ISTOP1(6)*CMAX
      GO TO 230
  220 CONTINUE
      FIFX1 = FFX(ICOND1,3)*CMAX
      FIFX2 = FFX(ICOND1,4)*CMAX
      FIFX3 = FFX(ICOND1,5)*CMAX
      FIFX4 = FFX(ICOND1,6)*CMAX
C
  230 IF (RI.NE.0.) GO TO 240
C     POLE CONDITIONS
C
      FIFX1 = CMAX
      FIFX2 = CMAX
      FIFX3 = CMAX
      FIFX4 = CMAX
      IF (N.EQ.0) FIFX1 = 0.
      IF (IABS(N).NE.1) GO TO 240
      FIFX2 = 0.
      FIFX3 = 0.
      FIFX4 = 0.
  240 CONTINUE
      IF (INDIC.EQ.3) GO TO 250
C     KROOTS = NO. OF NEGATIVE EIGENVALUES DUE TO LAGRANGE MULTIPLIERS
C              WE KEEP TRACK OF THIS TO AVOID MISSING ROOTS IN
C              EBAND,EBAND2, AND EIGEN, THE THREE EQUATION-SOLVING
C              ROUTINES.
      IF (FIFX1.NE.0.) KROOTS = KROOTS+1
      IF (FIFX2.NE.0.) KROOTS = KROOTS+1
      IF (FIFX3.NE.0.) KROOTS = KROOTS+1
      IF (FIFX4.NE.0.) KROOTS = KROOTS+1
  250 CONTINUE
C
C     D1(KKK) = KKKTH RADIAL DISCONTINUITY
C     D2(KKK) = KKKTH AXIAL  DISCONTINUITY
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO ENERGY OF 'MINUS' PART
C     OF CONSTRAINT AND BOUNDARY CONTITIONS.
C
      DO 260 II=1,NSUB
      USTAR = R*FK2*UB(II) - RD*WB(II)
      VSTAR = VB(II)
      WSTAR = RD*UB(II) + R*FK2*WB(II)
C     QD( ) = LOCAL MATRIX CONTAINING 'MINUS' PART OF CONSTRAINTS
C
      QD(1,II) = FIFX1*(-USTAR + D1(KKK)*ROT(1,II))
      QD(2,II) = FIFX2*(-VSTAR +
     1 (D1(KKK)*(FN*WSTAR-VSTAR) +D2(KKK)*FN*USTAR)/R)
      QD(3,II) = FIFX3*(-WSTAR - D2(KKK)*ROT(1,II))
      QD(4,II) = -FIFX4*ROT(1,II)
  260 CONTINUE
      IF (RI.NE.0.) GO TO 280
      IF (IABS(N).NE.1) GO TO 280
C     POLE CONDITION
      DO 270 II=1,NSUB
      QD(3,II) = QD(3,II) + QD(2,II)
  270 QD(2,II) = 0.
  280 CONTINUE
C
C     END OF LOOP FOR 'MINUS' PART OF CONSTRAINT CONDITIONS.
C
      ICOND1 = ICOND1 + 1
C     FILL AS ARRAY WITH MINUS PART OF CONSTRAINT CONDITIONS.
C
      IF ((FLOC(IR)-FLOC(IR-1)).GT.FLOAT(NSUB+1)) GO TO 300
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 1,2,AND5
      ILOC1 = FLOC(IR)
      ILOC2 = FLOC(IR1)
      ILOC3 = FLOC(IR2)
      ILOC4 = FLOC(IR3)
      DO 290 II=1,NSUB
      IB = ILOC1    - NSUB - 1 + II
      AS(IB) = QD(1,II)
      IB = ILOC2     - NSUB - 2 + II
      AS(IB)= QD(2,II)
      IB = ILOC3     - NSUB - 3 + II
      AS(IB)= QD(3,II)
      IB = ILOC4     - NSUB - 4 + II
  290 AS(IB)= QD(4,II)
      GO TO 180
  300 IF (NGBK(III).LT.IR) GO TO 310
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE
C     3 AND 4 AS LONG AS CURRENT QD(I,J) IS STORED IN CURRENT BLOCK.
C
      CALL FILLB(IC,NSUB,I3M,I2M,I1M,I0,I1P,I2P,I3P,IR,FLOC,QD,AS)
      GO TO 180
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 3 AND 4
C     EXCEPT THAT QD(I,J) HAS TO BE SAVED BECAUSE IT CONTRIBUTES
C     ELEMENTS TO A FUTURE BLOCK.
C
  310 IV = IV + 1
      IRSAVE(IV) = IR
      ISAVE(IV,1) = I3M
      ISAVE(IV,2) = I2M
      ISAVE(IV,3) = I1M
      ISAVE(IV,4) = I0
      ISAVE(IV,5) = I1P
      ISAVE(IV,6) = I2P
      ISAVE(IV,7) = I3P
      DO 320 II=1,IC
      DO 320 J=1,NSUB
  320 QSAVE(IV,II,J) = QD(II,J)
      GO TO 180
C
C     FILL THE 'PLUS' PART OF THE CONSTRAINT CONDITION
C     IFIX(ICOND2,2) CONTAINS LOCATIONS OF 'PLUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
  330 IF (ICOND2.GT.NCOND) GO TO 440
      IFIX2 = FFIX(ICOND2,2)
      IF (I.EQ.(IFIX2-ISEG*1000)) GO TO 340
      GO TO 440
C     NO 'PLUS' SIDE IF CONDITION REPRESENTS BOUNDARY.
  340 IF (FFIX(ICOND2,2).EQ.FFIX(ICOND2,1)) GO TO 420
      KKK = ICOND2
C     IR,IR1,IR2,IR3 HAVE SAVE MEANING AS ABOVE
      IR = IROWC(ICOND2)
      IR1 = IR + 1
      IR2 = IR + 2
      IR3 = IR + 3
      IF (IBUCK.NE.1) GO TO 420
      FIFX1 = FFIX(ICOND2,3)*CMAX
      FIFX2 = FFIX(ICOND2,4)*CMAX
      FIFX3 = FFIX(ICOND2,5)*CMAX
      FIFX4 = FFIX(ICOND2,6)*CMAX
C
C     LOOP FOR CONTRIBUTION OF 'PLUS' SIDE TO LOCAL MATRIX
C
      DO 350 II=1,NSUB
      USTAR = R*FK2*UB(II) - RD*WB(II)
      VSTAR = VB(II)
      WSTAR = RD*UB(II) + R*FK2*WB(II)
C     D( ) = LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINT CONDS.
      D(1,II) = USTAR*FIFX1
      D(2,II) = VSTAR*FIFX2
      D(3,II) = WSTAR*FIFX3
      D(4,II) = FIFX4*ROT(1,II)
  350 CONTINUE
C
C
C     FILL AS( ) WITH LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINTS
C     ITYPE( ) = TYPE OF CONSTRAINT CONDITION. 5 MEANS SEGS. IN SERIES.
C
      IF (ITYPE(ICOND2).EQ.5) GO TO 400
C     THIS BRANCH FOR PLUS SIDES OF ALL TYPES OF CONSTRAINT CONDITIONS
C     EXCEPT ITYPE(ICOND2) = 5.
C
      ILOC1 = FLOC(IR)
      ILOC2 = FLOC(IR1)
      ILOC3 = FLOC(IR2)
      ILOC4 = FLOC(IR3)
      DO 360 II=1,NSUB
      IB = ILOC1    - NSUB - 1 + II
      AS(IB) = D(1,II)
      IB = ILOC2     - NSUB - 2 + II
      AS(IB) = D(2,II)
      IB = ILOC3     - NSUB - 3 + II
      AS(IB) = D(3,II)
      IB = ILOC4     - NSUB - 4 + II
  360 AS(IB) = D(4,II)
      IF (IV.EQ.0) GO TO 420
      DO 370 IIV=1,IV
      IF (IR.EQ.IRSAVE(IIV)) GO TO 380
  370 CONTINUE
      GO TO 420
C     THIS BRANCH FOR INSERTION INTO GLOBAL STIFFNESS MATRIX OF
C     'MINUS' SIDE OF CONSTRAINT CONDITIONS REQUIRING VARIABLES FROM
C     PREVIOUS BLOCKS.
C
  380 DO 390 II=1,IC
      DO 390 J=1,NSUB
  390 QD(II,J) = QSAVE(IIV,II,J)
      I3MS = ISAVE(IIV,1)
      I2MS = ISAVE(IIV,2)
      I1MS = ISAVE(IIV,3)
      I0S  = ISAVE(IIV,4)
      I1PS = ISAVE(IIV,5)
      I2PS = ISAVE(IIV,6)
      I3PS = ISAVE(IIV,7)
      CALL FILLB(IC,NSUB,I3MS,I2MS,I1MS,I0S,I1PS,I2PS,I3PS,IR,FLOC,QD,AS
     1  )
      GO TO 420
  400 CONTINUE
C
C     THIS BRANCH FOR PLUS SIDE OF CONSTRAINT CONDITION TYPE 5
C
      DO 410 II=1,NSUB
      I1 = IR3 + II
      DO 410 J=1,IC
      ILOC1 = FLOC(I1)
      IB = ILOC1    - IC + J - II
  410 AS(IB) = D(J,II)
  420 ICOND2 = ICOND2 + 1
      DO 430 II=1,NSUB
      DO 430 J=1,IC
  430 D(J,II) = 0.0
      GO TO 330
  440 CONTINUE
C
C     FILL AS( ) WITH LOCAL MATRIX CORRESPONDING TO MESH POINT I
C
      DO 620 II=1,NSUB
      GO TO (450,460,470,480,490,500,510),II
  450 J = I3M
      GO TO 520
  460 J = I2M
      GO TO 520
  470 J = I1M
      GO TO 520
  480 J = I0
      GO TO 520
  490 J = I1P
      GO TO 520
  500 J = I2P
      GO TO 520
  510 J = I3P
  520 CONTINUE
      DO 610 K=1,II
      GO TO (530,540,550,560,570,580,590),K
  530 INDX = I3M
      GO TO 600
  540 INDX = I2M
      GO TO 600
  550 INDX = I1M
      GO TO 600
  560 INDX = I0
      GO TO 600
  570 INDX = I1P
      GO TO 600
  580 INDX = I2P
      GO TO 600
  590 INDX = I3P
  600 CONTINUE
      ILOC1 = FLOC(J)
      IB = ILOC1   - J + INDX
      AS(IB) = AS(IB) + U(II,K)
  610 CONTINUE
  620 CONTINUE
  630 CONTINUE
C
C     END OF LOOP OVER MESH POINTS IN CURRENT SEGMENT
C
      I5TOT = I5TOT + L5  + 2
      IF (I3P.EQ.NGBK(III)) GO TO 640
      IR3 = I3P + IC
      IF (IR3.EQ.NGBK(III)) GO TO 640
      GO TO 720
  640 NN =2.*FLOC(I3P)
      IF (IR3.EQ.NGBK(III)) NN =2.*FLOC(IR3)
C     STORE BLOCK NUMBER III ON DISK OR DRUM.
      IF(IBLK.NE.1.OR.INDIC.NE.-2)CALL GASP(AS,NN,1,IDRW(III,IBUCK))
      IF (NPRT.LT.3) GO TO 690
      ZERO = 0.0
      WRITE (6,650)III,IBUCK
      IF (III.EQ.1) NROWS  = 0
  650 FORMAT(//23H PREFACTORED BLOCK NO.    I3,16H FOLLOWS. IBUCK= I3//)
      NROWS1 = NROWS + 1
      NROWS = NGBK(III)
      DO 680 I=NROWS1,NROWS
      IF (I.NE.NROWS1) J1 = FLOC(I-1) + 1.
      IF (I.EQ.NROWS1) J1 = 1
      J2 = FLOC(I)
      J3 = 10- J2 + J1
      IF (J3.GT.0) WRITE (6,660)I,(ZERO,J=1,J3),(AS(J),J=J1,J2)
      IF (J3.LE.0) WRITE (6,670)I,(AS(J),J=J1,J2)
  660 FORMAT(1X,I3,11E11.3)
  670 FORMAT(1X,I3,(11E11.3))
  680 CONTINUE
  690 IF (IBLK.EQ.1.AND.INDIC.EQ.-2) GO TO 710
      DO 700 I=1,IMAX
  700 AS(I) = 0.0
  710 III = III + 1
  720 CONTINUE
      RETURN
      END
C=DECK      FILLB
      SUBROUTINE FILLB(IC,N,I3M,I2M,I1M,I0,I1P,I2P,I3P,IR,FLOC,QD,BB)
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN
C     PURPOSE IS TO ASSEMBLE THE 'MINUS' CONSTRAINT CONDITION
C     MATRIX QD(4X7) INTO THE GLOBAL MATRIX BB.
C     BUCKLING,VIBRATION, AND NONSYMMETRIC STRESS PROBLEMS.
C
      DOUBLE PRECISION QD,BB
      DIMENSION FLOC(*),QD(4,7),BB(*)
      DO 100 I=1,IC
      J = IR - 1 + I
      DO 90 K=1,N
      GO TO (10,20,30,40,50,60,70),K
   10 INDX = I3M
      GO TO 80
   20 INDX = I2M
      GO TO 80
   30 INDX = I1M
      GO TO 80
   40 INDX = I0
      GO TO 80
   50 INDX = I1P
      GO TO 80
   60 INDX = I2P
      GO TO 80
   70 INDX = I3P
   80 CONTINUE
      ILOC1 = FLOC(J)
      IB = ILOC1 - J + INDX
      BB(IB) = QD(I,K)
   90 CONTINUE
  100 CONTINUE
      RETURN
      END
C=DECK      GETB1
      SUBROUTINE GETB1(B1,CHIFIX,ROT,L5,ISIG,WB,WBD,HPAST,HI)
C
C     CALLED FROM STABIL, WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     STRAIN-DISPLACEMENT AND CURVATURE DISPLACEMENT RELATIONS IN
C     FINITE-DIFFERENCE FORM. CORRESPONDS TO ITH MESH POINT IN SEGMENT
C     NUMBER ISEG.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C,B1,ROT,CHIFIX,WB,WBD,HPAST,HI
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/INSTAB/INDIC
      DIMENSION B1(6,7),ROT(3,7),WB(7),WBD(7)
C
C     CENTRAL DIFFERENCES USED INSIDE DOMAIN. U AND V LOCATED AT
C     HALF-STATIONS.
      B1(1,1) = FK1*WB(1) + CHIFIX*ROT(1,1)
      B1(1,2) = -1./H + CHIFIX*ROT(1,2)
      B1(1,4) = FK1*WB(4) + CHIFIX*ROT(1,4)
      B1(1,5) = 1./H + CHIFIX*ROT(1,5)
      B1(1,7) = FK1*WB(7) + CHIFIX*ROT(1,7)
      B1(2,1) = FK2*WB(1)
      B1(2,2) = 0.5*RD/R
      B1(2,3) = - 0.5*FN/R
      B1(2,4) = FK2*WB(4)
      B1(2,5) = B1(2,2)
      B1(2,6) = B1(2,3)
      B1(2,7) = FK2*WB(7)
      B1(3,1) = CHIFIX*ROT(2,1)
      B1(3,2) = - B1(2,6)
      B1(3,3) = -1./H -.5*RD/R + CHIFIX*ROT(2,3)
      B1(3,4) = CHIFIX*ROT(2,4)
      B1(3,5) = B1(3,2)
      B1(3,6) = 1./H - .5*RD/R + CHIFIX*ROT(2,6)
      B1(3,7) = CHIFIX*ROT(2,7)
      FMUL = 0.0
      B1(4,1) = 1./(HPAST*H)  -FMUL*B1(1,1)*FK1
      B1(4,2) = FK1/H         -FMUL*B1(1,2)*FK1
      B1(4,4) =-2./(HI*HPAST) -FMUL*B1(1,4)*FK1
      B1(4,5) = -FK1/H        -FMUL*B1(1,5)*FK1
      B1(4,7) = 1./(H*HI)     -FMUL*B1(1,7)*FK1
C
      DO 10 I=1,7
      B1(5,I) = (-ROT(2,I)*FN +ROT(1,I)*RD)/R -FMUL*B1(2,I)*FK2
   10 B1(6,I) = 2.*(-ROT(1,I)*FN + ROT(2,I)*RD)/R
      B1(6,3) = B1(6,3) - 2.*FK2/H
      B1(6,6) = B1(6,6) + 2.*FK2/H
      IF (ISIG.NE.1) RETURN
      IF (FN.NE.0.) GO TO 30
      DO 20 J=1,7
      B1(2,J) = B1(1,J)
      B1(5,J) = B1(4,J)
      B1(3,J) = 0.0
   20 B1(6,J) = 0.0
      RETURN
   30 DO 40 K=1,3
      DO 40 J=1,7
   40 B1(K,J) = 0.0
      B1(1,2) = -1./H
      B1(1,5) =  1./H
      B1(2,2) = -1./H
      B1(2,3) = FN/H
      B1(2,5) = 1./H
      B1(2,6) = -FN/H
      B1(3,2) = -FN/H
      B1(3,5) =  FN/H
      B1(5,1) = B1(4,1) - .5*(FN/H)**2
      B1(5,2) = 0.0
      C = FN*(FK1+FK2)
      B1(5,3) = -C/H
      B1(5,4) = B1(4,4) + (FN/H)**2
      B1(5,5) = 0.0
      B1(5,6) = C/H
      B1(5,7) = B1(4,7) - .5*(FN/H)**2
      DO 50 J=1,7
   50 B1(6,J) = FN*B1(4,J)
      RETURN
      END
C=DECK      GETC
      SUBROUTINE GETC(L5,IGL,COEF,C,CSHEAR)
C
C     CALLED FROM STABIL, WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     THE WALL STIFFNESS MATRIX COEF IS TRANSFERRED TO ARRAY C, FOR
C     CURRENT MESH STATION IN CURRENT SEGMENT.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      DIMENSION C(6,6),COEF(L5,10),CSHEAR(L5,3)
      C(1,1) = COEF(IGL,1)
      C(1,2) = COEF(IGL,2)
      C(1,4) = COEF(IGL,3)
      C(1,5) = COEF(IGL,4)
      C(2,2) = COEF(IGL,5)
      C(2,4) = COEF(IGL,6)
      C(2,5) = COEF(IGL,7)
      C(3,3) = CSHEAR(IGL,1)
      C(3,6) = CSHEAR(IGL,2)
      C(4,4) = COEF(IGL,8)
      C(4,5) = COEF(IGL,9)
      C(5,5) = COEF(IGL,10)
      C(6,6) = CSHEAR(IGL,3)
      C(2,1) = C(1,2)
      C(4,1) = C(1,4)
      C(5,1) = C(1,5)
      C(4,2) = C(2,4)
      C(5,2) = C(2,5)
      C(6,3) = C(3,6)
      C(5,4) = C(4,5)
      DO 10 I=1,6
      DO 10 J=1,6
   10 C(I,J) = C(I,J) *RDS
      RETURN
      END
C=DECK      GETD
      SUBROUTINE GETD(K,D,ROT,UB,VB,WB)
C
C     CALLED FROM STABIL,WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     CALCULATES MATRIX WHICH TRANSFORMS DISPLACEMENTS NORMAL AND
C     TANGENTIAL TO AXIS OF REVOLUTION TO DISPLACEMENTS NORMAL AND
C     TANGENTIAL TO SHELL REFERENCE SURFACE. CURRENT MESH POINT IN CUR-
C     RENT SEGMENT.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION D,ROT,UB,VB,WB,RFK2
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      DIMENSION D(4,7),ROT(3,7),UB(7),VB(7),WB(7)
      RFK2 = R*FK2
      DO 10 I=1,7
      D(1,I) = RFK2*UB(I) - RD*WB(I)
      D(2,I) = VB(I)
      D(3,I) = RD*UB(I) + RFK2*WB(I)
   10 D(4,I) = ROT(1,I)
      RETURN
      END
C=DECK      GETP
      SUBROUTINE GETP(P,PCOEF,PCOEFD,UB,VB,WB,B1,ROT,I,U)
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN.
C     PRESSURE ROTATION EFFECT FOR BUCKLING PROBLEMS
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION U,PR,PP,WB,PROD,PROD1,PROD2
      DOUBLE PRECISION B1,PR2,ROT,UB,VB
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H
      DIMENSION U(7,7),PCOEF(100),PCOEFD(100),WB(7)
      DIMENSION B1(6,7),ROT(3,7),UB(7),VB(7)
      PR = P*PCOEF(I)*RDS
      PP = -.5*P*PCOEFD(I)*RDS
      PROD = PR*(FK1+FK2)
      PROD1 = -.25*PR*FK1
      PROD2 = -.25*PR*FK2
      PR2 = PR/2.
C
C     ADD TERMS FOR EFFECT OF REF. SURF. BUCKLING STRAIN ON WORK DONE BY
C     PRESSURE...
C
      DO 20 J = 1,7
      DO 10 K = 1,J
   10 U(J,K) = U(J,K) - PR2*(WB(J)*(B1(1,K) +B1(2,K))  +
     1   (B1(1,J) +B1(2,J))*WB(K))
     2 +PR2*(UB(J)*ROT(1,K) + ROT(1,J)*UB(K)
     3      +VB(J)*ROT(2,K) + ROT(2,J)*VB(K))
   20 CONTINUE
C
      RETURN
      END
C=DECK      GETRNT
      SUBROUTINE GETRNT(RNT,ROT,B1,ISIG)
C
C     GET MATRIX FOR TRANSFORMATION FROM DISP. GRADIENTS TO NODAL UNKN.
C     THIS MATRIX IS USED IN THE DERIVATION OF WORK DONE BY MEMBRANE
C     STRESS RESULTANTS DURING BUCLING OR VIBRATION
C
      DOUBLE PRECISION RNT,ROT,B1,R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H
      DIMENSION RNT(6,7),ROT(3,7),B1(6,7)
C
      DO 10 I = 1,7
      RNT(1,I) = ROT(1,I)
      RNT(2,I) = ROT(2,I)
      RNT(3,I) = B1(1,I)
      RNT(4,I) = B1(2,I)
   10 CONTINUE
C
      RNT(5,3) = -1./H
      RNT(5,6) = 1./H
      RNT(6,2) = .5*FN/R
      RNT(6,3) = -.5*RD/R
      RNT(6,5) = RNT(6,2)
      RNT(6,6) = RNT(6,3)
C
      IF (ISIG.NE.1) RETURN
C
C     POLE CONDITIONS...
      DO 20 K = 1,7
   20 RNT(6,K) = RNT(5,K)
C
      RETURN
      END
C=DECK      GETROT
      SUBROUTINE GETROT(ROT,I,L5,ISIG,WB,WBD)
C
C     CALLED FROM STABIL. MATRIX ROT(I,J) IS SET UP WHICH RELATES
C     ROTATION VECTOR WITH SHELL REFERENCE SURFACE DISPLACEMENT COMPONEN
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION ROT,WB,WBD
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/INSTAB/INDIC
      DIMENSION ROT(3,7),WB(7),WBD(7)
      ROT(1,1) = WBD(1)
      ROT(1,2) = -0.5*FK1
      ROT(1,4) = WBD(4)
      ROT(1,5) = ROT(1,2)
      ROT(1,7) = WBD(7)
      ROT(2,1) = WB(1)*FN/R
      ROT(2,2) = 0.0
      ROT(2,3) = -0.5*FK2
      ROT(2,4) = WB(4)*FN/R
      ROT(2,5) = 0.0
      ROT(2,6) = ROT(2,3)
      ROT(2,7) = WB(7)*FN/R
      ROT(3,2) = 0.25*FN/R
      ROT(3,3) = 0.5/H - 0.25*RD/R
      ROT(3,5) = ROT(3,2)
      ROT(3,6) = -0.5/H - 0.25*RD/R
      IF (ISIG.NE.1) RETURN
      DO 10 K=1,7
   10 ROT(2,K) = ROT(1,K)
      IF (FN.NE.0.) GO TO 30
      DO 20 K=1,7
   20 ROT(3,K) = 0.0
      RETURN
   30 ROT(3,2) = -.5*FN/H
      ROT(3,3) = 1./H
      ROT(3,5) = .5*FN/H
      ROT(3,6) = -1./H
      RETURN
      END
C=DECK      GETWWD
      SUBROUTINE GETWWD(DS,K,H,WB,WBD)
C     CALLED FROM STABIL
C     FINITE-DIFFERENCE EXPRESSIONS FOR VARIABLE MESH SPACING WITH
C     U,V HALF-WAY BETWEEN W.
C
      DOUBLE PRECISION DS,K,H,WB,WBD,HMK,KPDS,HPDS
      DIMENSION WB(7),WBD(7)
      HMK = H - K
      KPDS = K + DS
      HPDS = H + DS
      WB(1) = HMK*KPDS/(16.*H*DS)
      WB(4) = KPDS*HPDS/(4.*H*K)
      WB(7) = -HMK*HPDS/(16.*K*DS)
      WBD(1) = -0.5/H
      WBD(7) = 0.5/K
      WBD(4) = -WBD(1) - WBD(7)
      RETURN
      END
C=DECK      GETG
      SUBROUTINE GETG(IBUCK,D,RING,CHIFIX,U)
      DOUBLE PRECISION D,CHIFIX,U,R,RD,FK1,FK2,CURD,RDS,FN,H,X,E1,E2
      DOUBLE PRECISION A1,A2,A3,B1,B2,B3,G,G1,E,FNRS,YNR,YNRS,XNR,XNRS
      DOUBLE PRECISION XS,YS,XC,YC,CS,SS,XSTAR,YSTAR,RS
      DIMENSION D(4,7),RING(26),U(7,7),X(3,3),G(3,4),G1(4,4),E(3,4)
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/INSTAB/INDIC
      COMMON/CONPRE/CPRE
      XS = RING(2)
      YS = RING(3)
      E1 = RING(4)
      E2 = RING(5)
      GJR = RING(27)
      XC = XS - E1
      YC = YS - E2
      CS = COS(CHIFIX)
      SS = SIN(CHIFIX)
      A1 = -XC*CS - YC*SS
      A2 = CS
      A3 = SS
      B1 = XC*SS - YC*CS
      B2 = -SS
      B3 = CS
      XSTAR = XS*CS + YS*SS
      YSTAR =-XS*SS + YS*CS
      RS = R + XSTAR
      FNRS = FN/RS
      YNR = YSTAR*FN/R
      YNRS = YSTAR*FN/RS
      XNR = XSTAR*FN/R
      XNRS = XSTAR*FN/RS
C
C     NOW GET THE MATRIX E  (EQUATION 50)
C
      E(1,1) = -(1. + A1/RS)*YNR  -B1*FNRS
      E(2,1) = -(A2/RS)*YNR - B2*FNRS
      E(3,1) = -(A3/RS)*YNR - B3*FNRS
      E(1,2) = (RS + A1)/R
      E(2,2) = A2/R
      E(3,2) = A3/R
      E(1,3) = -(1. + A1/RS)*XNR - A1*FNRS
      E(2,3) = -(A2/RS)*XNR - A2*FNRS
      E(3,3) = -(A3/RS)*XNR - A3*FNRS
      E(1,4) = B1*XNRS - A1*YNRS
      E(2,4) = B2*XNRS - A2*YNRS
      E(3,4) = B3*XNRS - A3*YNRS
C
      IF (IBUCK.NE.1) GO TO 50
C
C     STABILITY STIFFNESS MATRIX CALCULATION
C
C     X(I,J) IS THE MATRIX OF INTEGRALS, I2, GIVEN IN EQ. (62).
C
      X(1,1) = RING(12)
      X(1,2) = RING(13)
      X(1,3) = RING(15)
      X(2,2) = RING(14)
      X(2,3) = RING(16)
      X(3,3) = RING(17)
      X(2,1) = X(1,2)
      X(3,1) = X(1,3)
      X(3,2) = X(2,3)
C
C     NEXT CALCULATE THE MATRIX G = -N*E + F  (EQ. 63)
C
      DO 10 J=1,4
      DO 10 I=1,3
   10 G(I,J) = -FN*E(I,J)
C
C     ADD F SO THAT WE HAVE G = -N*E + F
C
      G(1,3) = G(1,3) + 1.0
      G(1,4) = G(1,4) + YSTAR + B1
      G(2,4) = G(2,4) + B2
      G(3,4) = G(3,4) + B3
C
C     NOW GET THE PRODUCT TRANSPOSE(-NE + F)(I2)(-NE + F)
C
      CALL MATMU4(X,G,G1,3,4,0)
C
C     ADD TORSIONAL STIFFNESS TERMS....
C
      G1(1,1) = G1(1,1) + GJR*FNRS*FNRS/RS**2
      G1(4,1) = G1(4,1) + GJR*FNRS*FNRS*(1. - XSTAR/RS)/RS
      G1(4,4) = G1(4,4) + GJR*FNRS*FNRS*(1. - XSTAR/RS)**2
C
C     SYMMETRIZE G1
C
      G1(1,2) = G1(2,1)
      G1(1,3) = G1(3,1)
      G1(2,3) = G1(3,2)
      G1(1,4) = G1(4,1)
      G1(2,4) = G1(4,2)
      G1(3,4) = G1(4,3)
C
C     NOW GET THE PRODUCT TRANSPOSE(T)*G1*T, WHERE T IS THE MATRIX
C     WHICH OCCURS IN EQUATION
C     (T IS CALLED D HERE.  SORRY
C
      CALL MATMU4(G1,D,U,4,7,1)
C
C     NEXT CALCULATE THE SECOND TERM OF EQ (63)..T*ND*I1*ND*T
C
      INDX = 0
      IF (INDIC.NE.-2) INDX = 15
C
C     FIRST BUILD THE MATRIX I1  (CALLED X HERE)
C
      X(1,1) = RING(6+INDX)
      X(1,2) = RING(7+INDX)
      X(1,3) = RING(9+INDX)
      X(2,2) = RING(8+INDX)
      X(2,3) = RING(10+INDX)
      X(3,3) = RING(11+INDX)
      X(2,1) = X(1,2)
      X(3,1) = X(1,3)
      X(3,2) = X(2,3)
   20 CONTINUE
C
C     NEXT, GENERATE THE MATRIX G=N*D (D IS GIVEN IN EQ. 48)
C
      DO 30 J=1,4
      DO 30 I=1,3
   30 G(I,J) = 0.0
      G(1,1) = FN
      G(1,4) = - FN*(XSTAR + A1)
      G(2,4) = -FN*A2
      G(3,4) = -FN*A3
C
C     NOW GET THE PRODUCT TRANSPOSE(N*D)*(I1)*(N*D)   (SEE EQ. 63)
C
      CALL MATMU4(X,G,G1,3,4,0)
C
C     SYMMETRIZE G1
C
      G1(1,2) = G1(2,1)
      G1(1,3) = G1(3,1)
      G1(2,3) = G1(3,2)
      G1(1,4) = G1(4,1)
      G1(2,4) = G1(4,2)
      G1(3,4) = G1(4,3)
C
C     NOW GET THE PRODUCT TRANSPOSE(T)*TRANSPOSE(N*D)*(I1)*(N*D)*(T)
C
      CALL MATMU4(G1,D,U,4,7,1)
C
C     NOW START GENERATING THE LAST TERM IN EQUATION (63)..
C             TRANSPOSE(T)*TRANSPOSE(N*F-E)*(I1)*(N*F-E)*(T)
C
C     FIRST WE MUST GENERATE (N*F-E)...
C
      DO 40 J=1,4
      DO 40 I=1,3
   40 G(I,J) = -E(I,J)
C
C     NEXT, ADD +N*F TO -E SO THAT WE HAVE G = N*F-E
      G(1,3) = G(1,3) + FN
      G(1,4) = G(1,4) + FN*(YSTAR + B1)
      G(2,4) = G(2,4) + FN*B2
      G(3,4) = G(3,4) + FN*B3
C
C     NOW GET THE PRODUCT TRANSPOSE(N*F-E)*(I1)*(N*F-E)   SEE EQ. 63
C
      CALL MATMU4(X,G,G1,3,4,0)
C
C     SYMMETRIZE G1
C
      G1(1,2) = G1(2,1)
      G1(1,3) = G1(3,1)
      G1(2,3) = G1(3,2)
      G1(1,4) = G1(4,1)
      G1(2,4) = G1(4,2)
      G1(3,4) = G1(4,3)
C
C     NOW GET THE PRODUCT TRANSPOSE(T)*TRANSPOSE(N*F-E)*(I1)*(N*F-E)*(T)
C
      CALL MATMU4(G1,D,U,4,7,1)
C     IF (INDIC.EQ.-1)
C    1CALL MAPRIN(G1,4,4,1,1,30H G1                                    )
      GO TO 60
   50 CONTINUE
C
C     NOW GET THE CONTRIBUTION OF THE DISCRETE RING TO THE LOAD-
C     GEOMETRIC MATRIX.....
C     EQUATION (64) GIVES THE REQUIRED TERMS...
C
C     FIRST, WE MUST BUILD THE MATRIX DELTA(I1)  (SEE EQ. 65)
C     THIS MATRIX IS CALLED X HERE.
C
      X(1,1) = RING(6) - (1.-CPRE)*RING(21)
      X(1,2) = RING(7) - (1.-CPRE)*RING(22)
      X(1,3) = RING(9) - (1.-CPRE)*RING(24)
      X(2,2) = RING(8) - (1.-CPRE)*RING(23)
      X(2,3) = RING(10)- (1.-CPRE)*RING(25)
      X(3,3) = RING(11)- (1.-CPRE)*RING(26)
      X(2,1) = X(1,2)
      X(3,1) = X(1,3)
      X(3,2) = X(2,3)
C
C     NEXT, WE WILL TRANSFER BACK TO THE SECTION WHERE WE DEVELOPED
C     THE SECOND AND THIRD  LINES OF EQ. 63. I1 BECOMES DELTA(I1).
C
      GO TO 20
   60 CONTINUE
      RETURN
      END
C
C
C
C=DECK      FOUNDA
      SUBROUTINE FOUNDA(FSTIFF,WB,RDS,U)
C
C     PURPOSE IS TO ADD CONTRIBUTION DUE TO ELASTIC FOUNDATION OF
C     STIFFNESS FSTIFF...
C
      DOUBLE PRECISION WB, RDS, U, PROD
      DIMENSION WB(7), U(7,7)
C
      PROD = RDS*FSTIFF
      U(1,1) = U(1,1) + WB(1)*WB(1)*PROD
      U(4,1) = U(4,1) + WB(4)*WB(1)*PROD
      U(7,1) = U(7,1) + WB(7)*WB(1)*PROD
      U(7,4) = U(7,4) + WB(7)*WB(4)*PROD
      U(4,4) = U(4,4) + WB(4)*WB(4)*PROD
      U(7,7) = U(7,7) + WB(7)*WB(7)*PROD
C
      RETURN
      END
