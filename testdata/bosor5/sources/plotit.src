C=DECK      PLOTITLIB
C
C  THIS IS THE PLOTIT LIBRARY (SOURCE FILE)
C
C
C
C=DECK      PLOTIT
C./      ADD   NAME=PLOTIT
      SUBROUTINE PLOTIT
C
C  200-SEGMENT VERSION OF BOSOR5
C
C*****
C     THIS SUBROUTINE MODIFIED BY HAC IN AUGUST,1974 BY INCORPORATING
C     CHANGES MADE BY CHICAGO BRIDGE AND IRON INTO ORIGINAL SUBROUTINE.
C
C     USC MODIFICATION APRIL,1976
C
C*****
C
C     DATA FROM CASE PLOTTED WHEN ALL CALCULATIONS ASSOCIATED WITH THAT
C     CASE HAVE BEEN COMPLETED.plotit.src
C     THIS SUBROUTINE MUST BE ALTERED FOR IBM 360/65 EQUIPMENT.
C
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT,NFILE
      COMMON/FLSTEP/KSTEP,KSTEPM
      COMMON/SMOAD/IMOAD(2),IMMODE,FMAX,ISIG
      COMMON/OUTP/NPRT
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/SHEL/IWAL(201)
      COMMON/HED/TITLE(12)
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/LSEQ/ALODE(95)
C BEG JUNE 1990
      COMMON/RING2/GAM(99),GJ(99),YC(99),XC(99),E1(99),E2(99),PPI(99)
C END JUNE 1990
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/BUCKMD/BMTITL(11)
      COMMON/IDENTS/IC,IT,IR,IDS,IDB,IDP,IDSH,IM,ITS,ITSH,IZST,IDARC,IZX
      COMMON/IDENT2/ IANGLE,ISIGR,IEPSR,IEPCPR
      DIMENSION NP(3),NPTS(5 ,3),X(2000),QQQ(20)
      DIMENSION Z(2000),R(2000),ANGLE(2000),RP(2000),ZP(2000)
      DIMENSION BMODE(18000)
C BEG SEP 2011
C     DIMENSION RING(1000)
      DIMENSION RING(20000)
C END SEP 2011
#ifdef linux
      CHARACTER*4 CATITLE(11,3),CBTITLE(5,3),CCTITLE(5,3),CDTITLE(5,3)
      CHARACTER*4 CETITLE(5,3), CFTITLE(5,3),CGTITLE(5,3),CHTITLE(5,3)
      CHARACTER*4 COTITLE(5,3), CPTITLE(5,3)
      CHARACTER*8 CLEGEND(23)
      CHARACTER*4 CQTITLE(11)

      INTEGER   ATITLE(11,3),BTITLE(5,3),CTITLE(5,3),DTITLE(5,3)
      INTEGER   ETITLE(5,3), FTITLE(5,3),GTITLE(5,3),HTITLE(5,3)
      INTEGER   OTITLE(5,3), PTITLE(5,3)
      INTEGER*8 LEGEND(23)
      INTEGER   QTITLE(11)
#else
C     REAL*4 CTITLE(5,3),DTITLE(5,3),ETITLE(5,3),FTITLE(5,3),GTITLE(5,3)
C     REAL*4 OTITLE(5,3), ATITLE(11,3),BTITLE(5,3)
C     REAL*8 LEGEND(23)
C     REAL*4 HTITLE(5,3),PTITLE(5,3)
C     REAL*4 QTITLE(11)

      CHARACTER*4 CATITLE(11,3),CBTITLE(5,3),CCTITLE(5,3),CDTITLE(5,3)
      CHARACTER*4 CETITLE(5,3), CFTITLE(5,3),CGTITLE(5,3),CHTITLE(5,3)
      CHARACTER*4 COTITLE(5,3), CPTITLE(5,3)
      CHARACTER*8 CLEGEND(23)
      CHARACTER*4 CQTITLE(11)

      INTEGER   ATITLE(11,3),BTITLE(5,3),CTITLE(5,3),DTITLE(5,3)
      INTEGER   ETITLE(5,3), FTITLE(5,3),GTITLE(5,3),HTITLE(5,3)
      INTEGER   OTITLE(5,3), PTITLE(5,3)
      INTEGER*8 LEGEND(23)
      INTEGER   QTITLE(11)
#endif
C
      DATA CLEGEND( 1),CLEGEND( 2)/'        ','        '/
      DATA CLEGEND( 3),CLEGEND( 4)/'        ','        '/
      DATA CLEGEND( 5),CLEGEND( 6)/'        ','        '/
      DATA CLEGEND( 7),CLEGEND( 8)/'        ','        '/
      DATA CLEGEND( 9),CLEGEND(10)/'        ','        '/
      DATA CLEGEND(11),CLEGEND(12)/'        ','        '/
      DATA CLEGEND(13),CLEGEND(14)/'        ','        '/
      DATA CLEGEND(15),CLEGEND(16)/'        ','        '/
      DATA CLEGEND(17),CLEGEND(18)/'        ','        '/
      DATA CLEGEND(19),CLEGEND(20)/'        ','        '/
      DATA CLEGEND(21),CLEGEND(22)/'        ','        '/
      DATA CLEGEND(23)            /'        '/

      DATA COTITLE(1,1),COTITLE(2,1),COTITLE(3,1)/'    ','    ','U   '/
      DATA COTITLE(1,2),COTITLE(2,2),COTITLE(3,2)/'    ','    ','V   '/
      DATA COTITLE(1,3),COTITLE(2,3),COTITLE(3,3)/'    ','    ','W   '/

      DATA CBTITLE(1,1),CBTITLE(2,1),CBTITLE(3,1)/'    ','    ','N1  '/
      DATA CBTITLE(1,2),CBTITLE(2,2),CBTITLE(3,2)/'    ','    ','N2  '/
      DATA CBTITLE(1,3),CBTITLE(2,3),CBTITLE(3,3)/'    ','    ','N12 '/

      DATA CCTITLE(1,1),CCTITLE(2,1),CCTITLE(3,1)/'    ','    ','M1  '/
      DATA CCTITLE(1,2),CCTITLE(2,2),CCTITLE(3,2)/'    ','    ','M2  '/
      DATA CCTITLE(1,3),CCTITLE(2,3),CCTITLE(3,3)/'    ','    ','MT  '/

      DATA CDTITLE(1,1),CDTITLE(2,1),CDTITLE(3,1)/'    ','    ','W0  '/
      DATA CDTITLE(1,2),CDTITLE(2,2),CDTITLE(3,2)/'    ','    ','U0  '/
      DATA CDTITLE(1,3),CDTITLE(2,3),CDTITLE(3,3)/'    ','    ','BETA'/

      DATA CETITLE(1,1),CETITLE(2,1),CETITLE(3,1)/'    ','    ','N10 '/
      DATA CETITLE(1,2),CETITLE(2,2),CETITLE(3,2)/'    ','    ','N20 '/
      DATA CETITLE(1,3),CETITLE(2,3),CETITLE(3,3)/'    ','    ','M10 '/

      DATA CFTITLE(1,1),CFTITLE(2,1),CFTITLE(3,1)/'    ','    ','S1I '/
      DATA CFTITLE(1,2),CFTITLE(2,2),CFTITLE(3,2)/'    ','    ','S1O '/
      DATA CFTITLE(1,3),CFTITLE(2,3),CFTITLE(3,3)/'    ','    ','S2I '/

      DATA CGTITLE(1,1),CGTITLE(2,1),CGTITLE(3,1)/'    ','    ','S2O '/
      DATA CGTITLE(1,2),CGTITLE(2,2),CGTITLE(3,2)/'    ','    ','SEI '/
      DATA CGTITLE(1,3),CGTITLE(2,3),CGTITLE(3,3)/'    ','    ','SEO '/

      DATA CBTITLE(4,1),CBTITLE(5,1)/'    ','    '/
      DATA CBTITLE(4,2),CBTITLE(5,2)/'    ','    '/
      DATA CBTITLE(4,3),CBTITLE(5,3)/'    ','    '/

      DATA CCTITLE(4,1),CCTITLE(5,1)/'    ','    '/
      DATA CCTITLE(4,2),CCTITLE(5,2)/'    ','    '/
      DATA CCTITLE(4,3),CCTITLE(5,3)/'    ','    '/

      DATA CDTITLE(4,1),CDTITLE(5,1)/'    ','    '/
      DATA CDTITLE(4,2),CDTITLE(5,2)/'    ','    '/
      DATA CDTITLE(4,3),CDTITLE(5,3)/'    ','    '/

      DATA CETITLE(4,1),CETITLE(5,1)/'    ','    '/
      DATA CETITLE(4,2),CETITLE(5,2)/'    ','    '/
      DATA CETITLE(4,3),CETITLE(5,3)/'    ','    '/

      DATA CFTITLE(4,1),CFTITLE(5,1)/'    ','    '/
      DATA CFTITLE(4,2),CFTITLE(5,2)/'    ','    '/
      DATA CFTITLE(4,3),CFTITLE(5,3)/'    ','    '/

      DATA CGTITLE(4,1),CGTITLE(5,1)/'    ','    '/
      DATA CGTITLE(4,2),CGTITLE(5,2)/'    ','    '/
      DATA CGTITLE(4,3),CGTITLE(5,3)/'    ','    '/


      DATA CATITLE(1,1),CATITLE(2,1),CATITLE(3,1)/'    ','    ','    '/
      DATA CATITLE(1,2),CATITLE(2,2),CATITLE(3,2)/'    ','    ','    '/
      DATA CATITLE(1,3),CATITLE(2,3),CATITLE(3,3)/'    ','    ','    '/
      DATA CATITLE(4,1),CATITLE(5,1),CATITLE(6,1)/'ARC ','LENG','TH  '/
      DATA CATITLE(4,2),CATITLE(5,2),CATITLE(6,2)/'ARC ','LENG','TH  '/
      DATA CATITLE(4,3),CATITLE(5,3),CATITLE(6,3)/'ARC ','LENG','TH  '/
      DATA CATITLE(7,1),CATITLE(8,1),CATITLE(9,1)/'    ','    ','    '/
      DATA CATITLE(7,2),CATITLE(8,2),CATITLE(9,2)/'    ','    ','    '/
      DATA CATITLE(7,3),CATITLE(8,3),CATITLE(9,3)/'    ','    ','    '/
      DATA CATITLE(10,1),CATITLE(11,1)              /'    ','    '/
      DATA CATITLE(10,2),CATITLE(11,2)              /'    ','    '/
      DATA CATITLE(10,3),CATITLE(11,3)              /'    ','    '/

      DATA CHTITLE(1,1),CHTITLE(2,1),CHTITLE(3,1)/'  SI','GMA1','(INN'/
      DATA CHTITLE(1,2),CHTITLE(2,2),CHTITLE(3,2)/'  SI','GMA1','(OUT'/
      DATA CHTITLE(1,3),CHTITLE(2,3),CHTITLE(3,3)/'    ',' TAU','(INN'/
      DATA CHTITLE(4,1),CHTITLE(5,1)/'ER) ','    '/
      DATA CHTITLE(4,2),CHTITLE(5,2)/'ER) ','    '/
      DATA CHTITLE(4,3),CHTITLE(5,3)/'ER) ','    '/

      DATA CPTITLE(1,1),CPTITLE(2,1),CPTITLE(3,1)/'  SI','GMA2','(INN'/
      DATA CPTITLE(1,2),CPTITLE(2,2),CPTITLE(3,2)/'  SI','GMA2','(OUT'/
      DATA CPTITLE(1,3),CPTITLE(2,3),CPTITLE(3,3)/'    ',' TAU','(OUT'/
      DATA CPTITLE(4,1),CPTITLE(5,1)/'ER) ','    '/
      DATA CPTITLE(4,2),CPTITLE(5,2)/'ER) ','    '/
      DATA CPTITLE(4,3),CPTITLE(5,3)/'ER) ','    '/

      DATA CQTITLE( 1),CQTITLE( 2),CQTITLE( 3)/'  CI','RCUM','FERE'/
      DATA CQTITLE( 4),CQTITLE( 5),CQTITLE( 6)/'NTIA','L CO','ORDI'/
      DATA CQTITLE( 7),CQTITLE( 8),CQTITLE( 9)/'NATE',', DE','GREE'/
      DATA CQTITLE(10),CQTITLE(11)            /'S   ','    '/
C
      INTEGER INTDAT
      SAVE    INTDAT
      DATA    INTDAT / 0 /
C
C     CHANGE CHARACTER TO HOLLERITH (INTEGER) DATA
C
      if (INTDAT .LE. 0) THEN

        DO 2 I=1,11
          CALL    CC2H ( CQTITLE(I), QTITLE(I), 4 )
          DO 1 J=1,3
            CALL  CC2H ( CATITLE(I,J), ATITLE(I,J), 4 )
    1     CONTINUE
    2   CONTINUE

        DO 4 I=1,5
          DO 3 J=1,3
            CALL  CC2H ( CBTITLE(I,J), BTITLE(I,J), 4 )
            CALL  CC2H ( CCTITLE(I,J), CTITLE(I,J), 4 )
            CALL  CC2H ( CDTITLE(I,J), DTITLE(I,J), 4 )
            CALL  CC2H ( CETITLE(I,J), ETITLE(I,J), 4 )
            CALL  CC2H ( CFTITLE(I,J), FTITLE(I,J), 4 )
            CALL  CC2H ( CGTITLE(I,J), GTITLE(I,J), 4 )
            CALL  CC2H ( CHTITLE(I,J), HTITLE(I,J), 4 )
            CALL  CC2H ( COTITLE(I,J), OTITLE(I,J), 4 )
            CALL  CC2H ( CPTITLE(I,J), PTITLE(I,J), 4 )
            CALL  CC2H ( CBTITLE(I,J), BTITLE(I,J), 4 )
            CALL  CC2H ( CBTITLE(I,J), BTITLE(I,J), 4 )
            CALL  CC2H ( CBTITLE(I,J), BTITLE(I,J), 4 )
            CALL  CC2H ( CBTITLE(I,J), BTITLE(I,J), 4 )
    3     CONTINUE
    4   CONTINUE

        DO 5 I=1,23
          CALL    CC2H ( CLEGEND(I), LEGEND(I), 8 )
    5   CONTINUE

         INTDAT = 1
      ENDIF
C
C
      IF ( NEDPLT.EQ.1) GO TO 999
      IF(NFIRST.NE.0) GO TO 991
C
C**** INITIALIZE CALCOMP PLOTTER
      NFILE=21
      CALL PLOTI(NFILE)
      CALL FRAMEV(0)
991   CONTINUE
      NFIRST = 1
      CALL GASP(Z,I2,3,IZX)
      CALL GASP(R,I2,3,IWAL(14))
      CALL GASP(ANGLE,I2,3,IANGLE)
C BEG FEB 1990
      RZMAX= 0.0
      RZMIN= 10.E20
      DO 25 I=1,I2
        RZSIZ = SQRT(R(I)**2 + Z(I)**2)
        RZMAX = AMAX1(RZMAX,RZSIZ)
        RZMIN = AMIN1(RZMIN,RZSIZ)
 25   CONTINUE
      RZSIZ = RZMAX - RZMIN
C BEG NOV 1992
      IF (RZSIZ.LE.0.0) RZSIZ = ABS(RZMAX)
C END NOV 1992
C END FEB 1990
      IF (NTOT.EQ.0) GO TO 30
      IRING = IPRE*NTOT
      CALL GASP(RING,IRING,3,IR)
      DO 20 J=1,NTOT
      IPOSR = IPRE*(J-1) + 1
      E1(J) = RING(IPOSR+3)
      E2(J) = RING(IPOSR+4)
20    CONTINUE
30    CONTINUE
      IF (JPLOT.EQ.0) GO TO 50
      DO 40 I=1,JPLOT
      ICOORD = KPLOT(I)
      RN(I) = R(ICOORD)
      ZN(I) = Z(ICOORD)
40    CONTINUE
50    CONTINUE
      IF (ISIG.GT.0) GO TO 60
      IPLOT = 1
      CALL GEOPLT(R,Z,RP,ZP)
      IF (ISIG.EQ.0) GO TO 200
60    CONTINUE
      IPLOT = 2
70    DO 80 I=1,3
80    NP(I)=1
      IALL = I2
      DO 90 I=1,5
      DO 90 J=1,3
90    NPTS(I,J) = IALL
      CALL GASP(X,I2,3,IDARC)
      IF (ISIG.EQ.2) GO TO 150
      NALL = IALL*8
      REWIND 40
      WRITE (40,100)KSTEP,ALODE(KSTEP)
100   FORMAT('LOAD STEP ',I2,',  LOAD =',1PE12.3,'  PRESTRESS')
      REWIND 40
      READ (40,110) (ATITLE(I,3),I=1,11)
110   FORMAT(11A4)
      DO 120 I=1,11
      BMTITL(I) = ATITLE(I,3)
120   CONTINUE
      NFIN = 1
      CALL GASP(BMODE,NALL,3,IMMODE)
      DO 130 I=1,I2
      ARG = ANGLE(I)
      RP(I) = (BMODE(I  )*SIN(ARG) + BMODE(I+I2)*COS(ARG)) / FMAX
      ZP(I) = (-BMODE(I  )*COS(ARG) + BMODE(I+I2)*SIN(ARG)) / FMAX
130   CONTINUE
C BEG FEB 1990
  141 FORMAT('$END PLOT')
      WRITE(54,142) (TITLE(I),I=1,12)
  142 FORMAT(1X,12A4)
      WRITE(54,143) KSTEP
  143 FORMAT(' AXISYMMETRIC DEFORMATION: Load Step No.',I2)
      WRITE(54,144) FMAX,RZSIZ,KSTEP
  144 FORMAT(' Maximum value of SQRT(u**2 +w**2): FMAX =',1PE12.4/
     1       ' Size of the structure:            RZSIZ =',1PE12.4/
     1'  Axisymmetric deformations are normalized by VMAX and'/
     1'  magnified by FMAG = 0.1*RZSIZ for plotting, thus:'/
     1'   R(deformed) =R(undeformed) +FMAG*( w*sin(a)+u*cos(a))/FMAX'/
     1'   Z(deformed) =Z(undeformed) +FMAG*(-w*cos(a)+u*sin(a))/FMAX'/
     1'  in which (a) is the angle from the horizontal to the'/
     1'  meridional tangent (a=90 deg. for cyl; a=0 for flat plates)'//
     1'          UNDEFORMED (R,Z) COORDINATES     DEFORMED (R,Z) COORDIN
     1ATES'/
     1'          Radius, R0  Axial Station, Z0   Radius, R   Axial Stati
     1on, Z'/
     1'R,Z_LOADSTEP',I2/
     1'*')
c Code modified 10/15/92.  Segment number added in last column.
      WRITE(54,145) CHAR(9),CHAR(9),CHAR(9),CHAR(9),char(9)
  145 FORMAT(
     1' Node No.',A1,'Radius, R0',A1,'Axial Station, Z0',A1,'Radius, R',
     1 A1,'Axial Station, Z',a1,'Segment No.')
      FMAG = 0.1*RZSIZ
      iseg = 1
      itotal = i5(iseg)
      DO 147 I = 1,I2
        RDEFRM = R(I) + RP(I)*FMAG
        ZDEFRM = Z(I) + ZP(I)*FMAG
        if (i .gt. itotal) then
          iseg = iseg + 1
          itotal = itotal + i5(iseg)
        endif
        WRITE(54,146) I,CHAR(9),R(I),CHAR(9),Z(I),CHAR(9),
     1                   RDEFRM,CHAR(9),ZDEFRM,char(9),iseg
  146 FORMAT(I4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4,
     1          A1,1PE12.4,a1,i4)
  147 CONTINUE
c End modifications 10/15/92
      write(54, 141)
C END FEB 1990
      CALL GEOPLT(R,Z,RP,ZP)
140   CONTINUE
      IF (NLAST.GT.0)
     1CALL PLOTOP(1,IALL,1,3,3,NP,NPTS,X,BMODE(1  ),TITLE,DTITLE,
     1ATITLE,LEGEND,NFIN)
      IF (NLAST.GT.0)
     1CALL PLOTOP(1,IALL,1,3,3,NP,NPTS,X,BMODE(4*I2+1),TITLE,ETITLE,
     1ATITLE,LEGEND,NFIN)
C BEG FEB 1990
      WRITE(54,142) (TITLE(I),I=1,12)
      WRITE(54,143) KSTEP
      WRITE(54,151) KSTEP
  151 FORMAT(/' AXISYMMETRIC DISPLACEMENTS, W0 and U0, MERIDIONAL ROTATI
     1ON, BETA, AND RESULTANTS N10, N20, M10'/
     1'        Arc Length, x  Norm.Disp., W0   Merid.Disp.,U0  Rotation,
     1BETA  Merid.Res.,N10  Circ.Res.,N20  Merid.Mom.,M10'/
     1'AXISYM_LOADSTEP',I2/
     1'*')
      WRITE(54,152) CHAR(9),CHAR(9),CHAR(9),CHAR(9),CHAR(9),CHAR(9),
     1 CHAR(9)
  152 FORMAT(' Node No.',A1,'Arc Length, x',A1,'Norm.Disp., W0',A1,
     1'Merid.Disp.,U0',A1,'Rotation,BETA',A1,'Merid.Res.,N10',A1,
     1'Circ.Res.,N20',A1,'Merid.Mom.,M10')
      DO 154 I = 1,IALL
         WRITE(54,153) I,CHAR(9),X(I),CHAR(9),BMODE(I),CHAR(9),
     1  BMODE(1*I2+I),CHAR(9),BMODE(2*I2+I),CHAR(9),
     1  BMODE(4*I2+I),CHAR(9),BMODE(5*I2+I),CHAR(9),BMODE(6*I2+I)
  153   FORMAT(I4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4,
     1            A1,1PE12.4,A1,1PE12.4,A1,1PE12.4)
  154 CONTINUE
      write(54, 141)
C END FEB 1990
      GO TO 200
150   CONTINUE
      MNUMB = NVEC
      DO 190 K=1,MNUMB
      REWIND 40
      WRITE (40,160)N,ALODE(KSTEP)
160   FORMAT('BUCKLE MODE. N =',I6,',  LOAD = ',1PE12.3)
      REWIND 40
      READ (40,110)(ATITLE(I,3),I=1,11)
      DO 170 I=1,11
      BMTITL(I) = ATITLE(I,3)
170   CONTINUE
      NALL = IALL*3
      NFIN = 1
      CALL GASP(BMODE,NALL,3,IMOAD(K))
      DO 180 I=1,I2
      ARG = ANGLE(I)
      RP(I) = (BMODE(2*I2+I)*SIN(ARG) + BMODE(I  )*COS(ARG))
      ZP(I) = (-BMODE(2*I2+I)*COS(ARG) + BMODE(I  )*SIN(ARG))
180   CONTINUE
C BEG FEB 1990
      WRITE(54,142) (TITLE(I),I=1,12)
      WRITE(54,231)
  231 FORMAT(' ******** BUCKLING MODE:')
      WRITE(54,233) N, K
  233 FORMAT(
     1       '   Number of circumferential waves, N =',I6/
     1       '   Eigenvalue no.                   K =',I6)
      WRITE(54,234) RZSIZ,K,N
  234 FORMAT(
     1       ' Size of the structure:         RZSIZ =',1PE12.4/
     1'  Buckling modal displacements are'/
     1'  magnified by FMAG = 0.1*RZSIZ for plotting, thus:'/
     1'   R(deformed) =R(undeformed) +FMAG*( w*sin(a)+u*cos(a))'/
     1'   Z(deformed) =Z(undeformed) +FMAG*(-w*cos(a)+u*sin(a))'/
     1'  in which (a) is the angle from the horizontal to the'/
     1'  meridional tangent (a=90 deg. for cyl; a=0 for flat plates)'//
     1'          UNDEFORMED (R,Z) COORDINATES     DEFORMED (R,Z) COORDIN
     1ATES'/
     1'          Radius, R0  Axial Station, Z0   Radius, R   Axial Stati
     1on, Z'/
     1'R,Z_EIGENMODE',I2,'--N',I6/
     1'*')
c Code modified 10/15/92.  Segment number added in last column.
      WRITE(54,235) CHAR(9),CHAR(9),CHAR(9),CHAR(9),char(9)
  235 FORMAT(
     1' Node No.',A1,'Radius, R0',A1,'Axial Station, Z0',A1,'Radius, R',
     1 A1,'Axial Station, Z',a1,'Segment No.')
      FMAG = 0.1*RZSIZ
      itotal = i5(1)
      iseg = 1
      DO 237 I = 1,I2
        RDEFRM = R(I) + RP(I)*FMAG
        ZDEFRM = Z(I) + ZP(I)*FMAG
        if (i .gt. itotal) then
          iseg = iseg + 1
          itotal = itotal + i5(iseg)
        endif
        WRITE(54,236) I,CHAR(9),R(I),CHAR(9),Z(I),CHAR(9),
     1                   RDEFRM,CHAR(9),ZDEFRM,char(9),iseg
  236 FORMAT(I4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4,
     1          A1,1PE12.4,a1,i4)
  237 CONTINUE
c End modifications 10/15/92
      WRITE(54,141)
C END FEB 1990
      CALL GEOPLT(R,Z,RP,ZP)
      IF (NLAST.GT.0) THEN
        CALL PLOTOP(1,IALL,1,3,3,NP,NPTS,X,BMODE(1  ),TITLE,OTITLE,
     1  ATITLE,LEGEND,NFIN)
C BEG FEB 1990
        WRITE(54,142) (TITLE(I),I=1,12)
        WRITE(54,231)
        WRITE(54,233) N, K
        WRITE(54,241) K,N,K,N
  241 FORMAT(/ I2,'th EIGENVECTOR FOR N=',I6,' CIRCUMFERENTIAL WAVES.  M
     1ERIDIONAL, CIRCUMFERENTIAL, AND NORMAL MODAL DISPLACEMENTS, u,v,w:
     1'/
     1'                         Meridional    Circumferential      Norma
     1l'/
     1'                        Displacement    Displacement     Displace
     1ment'/
     1'        Arc Length, x        u               v                w'/
     1'EIGENMODE',I2,'--N',I6/
     1'*')
        WRITE(54,242) CHAR(9),CHAR(9),CHAR(9),CHAR(9)
  242   FORMAT(' Node No.',A1,'Arc Length, x',A1,'Modal u',A1,
     1 'Modal v',A1,'Modal w')
        DO 244 I = 1,IALL
           WRITE(54,243) I,CHAR(9),X(I),CHAR(9),BMODE(I),CHAR(9),
     1    BMODE(I2+I),CHAR(9),BMODE(2*I2+I)
  243     FORMAT(I4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4,A1,1PE12.4)
  244   CONTINUE
        WRITE(54,141)
      ENDIF
C END FEB 1990
190   CONTINUE
200   CONTINUE
      IF (NPRT.GT.1) WRITE (6,210)
210   FORMAT(' LEAVING SUBROUTINE PLOT')
      IF (NPRT.GT.1) CALL SR100T(2)
220   CONTINUE
      RETURN
C
C     CLOSE CALCOMP PLOT FILE 21
C
999   CONTINUE
      CALL ENDPLT(NFILE)
      RETURN
C     RETURN NOT NEEDED IN CDC VERSION
      END
C=DECK      ARROW
      SUBROUTINE ARROW(XA,YA,IPOS,LODTYP)
C*****
C     THIS SUBROUTINE MODIFIED BY HAC IN AUGUST,1974 BY INCORPORATING
C     CHANGES MADE BY CHICAGO BRIDGE AND IRON INTO ORIGINAL SUBROUTINE.
C*****
C
C     XA AND YA ARE COORDINATES OF A POINT ABOUT WHICH AN
C     ARROW WILL BE DRAWN
C
C     IPOS IS THE DIRECTION THE ARROW IS TO BE DRAWN
C
C     LODTYP IS THE TYPE OF LOAD SO THAT THE PROPER LABEL WILL BE USED
C
C     LODTYP = 0  FIXED LOAD
C     LODTYP = 1  VARIABLE LOAD
C
C     IPOS = 1  HORIZONTAL ARROW - POINT RIGHT
C     IPOS = 2  VERTICAL ARROW - POINT DOWN
C     IPOS = 3  CURVED ARROW - POINT CLOCKWISE
C     IPOS = 4  HORIZONTAL ARROW - POINT LEFT
C     IPOS = 5  VERTICAL ARROW - POINT UP
C     IPOS = 6  CURVED ARROW - POINT COUNTER CLOCKWISE
C
C
      CHARACTER*7  CHA
      INTEGER      HOL(2)
c
      GO TO (100, 200, 300, 400, 500, 600), IPOS
C
100   CONTINUE
C
C     DRAW A HORIZONTAL ARROW WITH THE POINT RIGHT
C
      XLA = XA + 0.093842
      XRA = XLA + 0.117302
      CALL PLOT (XLA, YA, 3)
      CALL PLOT (XRA, YA, 2)
      XTA = XRA - 0.078201
      YTA = YA + 0.046921
      CALL PLOT (XTA, YTA, 2)
      YBA = YA - 0.046921
      CALL PLOT(XRA,YA,3)
      CALL PLOT (XTA, YBA, 2)
      XH = XA + 0.351906
      IF (LODTYP .EQ. 1)  GO TO 110
      CHA = 'H      '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL  SYMBOL (XH, YA, 0.07, HOL, 0.0, 1)
C
      RETURN
C
110   CONTINUE
      CHA = 'DH     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XH, YA, 0.07, HOL, 0.0, 2)
C
      RETURN
C
200   CONTINUE
C
C     DRAW A VERTICAL ARROW WITH THE POINT DOWN
C
      YTA = YA - 0.117302
      YBA = YTA - 0.117302
      CALL PLOT (XA, YTA, 3)
      CALL PLOT (XA, YBA, 2)
      YLA = YBA + 0.078201
      XLA = XA - 0.046921
      CALL PLOT (XA, YBA, 3)
      CALL PLOT (XLA, YLA, 2)
      XRA = XA + 0.046921
      CALL PLOT (XA, YBA, 3)
      CALL PLOT (XRA, YLA, 2)
      YV = YA - 0.391006
      IF (LODTYP .EQ. 1)  GO TO 210
      CHA = 'V      '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XA, YV, 0.07, HOL, 0.0, 1)
C
      RETURN
C
210   CONTINUE
      CHA = 'DV     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL( XA, YV, 0.07, HOL, 0.0, 2)
C
      RETURN
C
300   CONTINUE
C
C     DRAW A CLOCKWISE CURVED ARROW
C
      XCAL = XA - 0.078201
      YCAL = YA + 0.195503
      XCAR = XA - 0.062501
      YCAR = YA + 0.226783
      CALL PLOT (XCAL, YCAL, 3)
      CALL PLOT (XCAR, YCAR, 2)
      XCAL = XA - 0.031280
      YCAL = YA + 0.258064
      CALL PLOT (XCAL, YCAL, 2)
      XCAR = XA + 0.031280
      YCAR = YA + 0.258064
      CALL PLOT (XCAR, YCAR, 2)
      XCAL = XA + 0.062501
      YCAL = YA + 0.226783
      CALL PLOT (XCAL, YCAL, 2)
      XCAR = XA + 0.078201
      YCAR = YA + 0.195503
      CALL PLOT (XCAR, YCAR, 2)
      YCAL = YA + 0.242424
      CALL PLOT (XCAR, YCAL, 2)
      XCAL = XA + 0.031280
      YCAL = YA + 0.226783
      CALL PLOT (XCAR, YCAR, 3)
      CALL PLOT (XCAL, YCAL, 2)
      XM = XA + 0.156402
      YM = YA + 0.234604
      IF (LODTYP .EQ. 1)  GO TO 310
      CHA = 'HM     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XM, YM, 0.07, HOL, 0.0, 1)
C
      RETURN
C
310   CONTINUE
      CHA = 'DM     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XM, YM, 0.07, HOL, 0.0, 2)
C
      RETURN
C
400   CONTINUE
C
C     DRAW A HORIZONTAL ARROW WITH THE POINT LEFT
C
      XRA = XA - 0.093842
      XLA = XRA - 0.117302
      CALL PLOT (XLA, YA, 3)
      CALL PLOT (XRA, YA, 2)
      XTA = XLA + 0.078201
      YTA = YA + 0.046921
      CALL PLOT (XLA, YA, 3)
      CALL PLOT (XTA, YTA, 2)
      YBA = YA - 0.046921
      CALL PLOT (XLA, YA, 3)
      CALL PLOT (XTA, YBA, 2)
      XH = XA - 0.351906
      IF (LODTYP .EQ. 1)  GO TO 410
      CHA = 'H      '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XH, YA, 0.07, HOL, 0.0, 1)
C
      RETURN
C
410   CONTINUE
      XH = XA - 0.508309
      CHA = 'DH     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XH, YA, 0.07, HOL, 0.0, 2)
C
      RETURN
C
500   CONTINUE
C
C     DRAW A VERTICAL ARROW WITH THE POINT UP
C
      YTA = YA + 0.234604
      YBA = YA + 0.117302
      CALL PLOT (XA, YBA, 3)
      CALL PLOT (XA, YTA, 2)
      YLA = YTA - 0.078201
      XLA = XA - 0.046921
      CALL PLOT (XLA, YLA, 3)
      CALL PLOT (XA, YTA, 2)
      XRA = XA + 0.046921
      CALL PLOT (XRA, YLA, 3)
      CALL PLOT (XA, YTA, 2)
      YV = YA + 0.195503
      IF (LODTYP .EQ. 1)  GO TO 510
      XAV = XA - 0.195503
      CHA = 'V      '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XAV, YV, 0.07, HOL, 0.0, 1)
C
      RETURN
C
510   CONTINUE
      XAV = XA - 0.156402
      CHA = 'DV     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XAV, YV, 0.07, HOL, 0.0, 2)
C
      RETURN
C
600   CONTINUE
C
C     DRAW A COUNTER CLOCKWISE CURVED ARROW
C
      XCAL = XA - 0.078201
      YCAL = YA - 0.195503
      XCAR = XA - 0.062501
      YCAR = YA - 0.226783
      CALL PLOT (XCAL, YCAL, 3)
      CALL PLOT (XCAR, YCAR, 2)
      XCAL = XA - 0.031280
      YCAL = YA - 0.258064
      CALL PLOT (XCAL, YCAL, 2)
      XCAR = XA + 0.031280
      YCAR = YA - 0.258064
      CALL PLOT (XCAR, YCAR, 2)
      XCAL = XA + 0.062501
      YCAL = YA - 0.226783
      CALL PLOT (XCAL, YCAL, 2)
      XCAR = XA + 0.078201
      YCAR = YA - 0.195503
      CALL PLOT (XCAR, YCAR, 2)
      YCAL = YA - 0.242424
      CALL PLOT (XCAR, YCAL, 2)
      XCAL = XA + 0.031280
      YCAL = YA - 0.226783
      CALL PLOT (XCAR, YCAR, 3)
      CALL PLOT (XCAL, YCAL, 2)
      XM = XA + 0.195503
      YM = YA - 0.226783
      IF (LODTYP .EQ. 1)  GO TO 610
      CHA = 'M      '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XM, YM, 0.07, HOL, 0.0, 1)
C
      RETURN
C
610   CONTINUE
      CHA = 'DM     '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL (XM, YM, 0.07, HOL, 0.0, 2)
C
      RETURN
C
      END
C=DECK      AXIS
C./      ADD   NAME=CSEG
      SUBROUTINE AXIS(X,Y,LARRAY,NCHAR,ALEN,ANGLE,AMIN,DX)
C
C       SUB TO WRITE TO A PLOT FILE
C
C       CONVERT EVERYTHING TO FLOAT AND WRITE OUT
C
#if star
      real LARRAY(31)
#else
      character LARRAY(124)
#endif
C
c     WRITE (53, 100) 'AXIS   ',X,Y,0.0,FLOAT(NCHAR),ALEN,ANGLE,
c    1AMIN,DX,0.0
c     IF (ABS(NCHAR).GT.0) WRITE (53, 150) LARRAY
      RETURN
C
100   FORMAT (' ',A7,9E13.5)
150   FORMAT (' ',124A1)
      END
C=DECK      CSEG
      SUBROUTINE CSEG(OP,M1,NP,X,SX,XMIN,DX,Y,SY,YMIN,DY,KK)
      DIMENSION X(*),Y(*),TFX(16),TFY(16)
      INTEGER OP,FLAG
      COMMON /CSEG11/CX,CY,ASX,ASY,FLAG,M,K,ILOOP
      CALL NARG(N,LOC)
      M=M1
      ASX=ABS(SX)+.01
      ASY=ABS(SY)+.01
      IF (M.LE.15) GO TO 20
      CALL SYMBOL(1.,10.,.14,'CSEG ARG. M.GT.15',0.,17)
      M=15
20    K=-1
      XXMIN=XMIN
      YYMIN=YMIN
      IF (SX) 40,50,50
40    CALL DECML(XXMIN,SAVE,NEXP,1)
      IF((SAVE+.1).GE.(10.)) NEXP=NEXP+1
      XXMIN=10.**NEXP
50    IF (SY) 54,60,60
54    CALL DECML(YYMIN,SAVE,NEXP1,1)
      IF((SAVE+.1).GE.(10.))  NEXP1=NEXP1+1
      YYMIN=10.**NEXP1
60    MM=M+1
      IF (11.LT.N) K=KK
      FLAG=OP
      IF (OP) 62,10,62
62    CX=TFX(MM)
      CY=TFY(MM)
      ILOOP=0
10    DO 100 I=1,NP
      IF (SX) 102,102,2
102   IF(X(I).GT.0.) GO TO 112
      FX=-.02
      GO TO 3
112   FX =(ALOG10(X(I)/XXMIN))*DX
      GO TO 3
2     FX=(X(I)-XXMIN)/DX
3     IF (SY) 103,103,4
103   IF (Y(I).GT.0.) GO TO 113
      FY=-.02
      GO TO 5
113   FY = (ALOG10(Y(I)/YYMIN))*DY
      GO TO 5
4     FY=(Y(I)-YYMIN)/DY
5     CALL CSEG10(FX,FY)
      ILOOP=1
100   CONTINUE
      TFX(MM) = FX
      TFY(MM)= FY
      RETURN
      END
C=DECK      CSEG10
C./      ADD   NAME=CSEG10
      SUBROUTINE CSEG10(X1,Y1)
      DIMENSION FLAT(16),IPEN(20,7)
      DIMENSION FL(7)
      DATA FL/2*.1,3*.2,.1,.2/
      INTEGER OPM(16),FLAG
      INTEGER OP1,OP2
      COMMON /CSEG11/CX,CY,ASX,ASY,FLAG,M,K,ILOOP
      DATA FLAT/16*.901/
      DATA IPEN/20*2,
     13*2,3,3*2,3,3*2,3,3*2,3,3*2,3,
     215*2,3,2,3,2,3,
     39*2,3,9*2,3,
     45*2,3,2,3,2,3,5*2,3,2,3,2,3,
     58*2,3,2,3,8*2,3,
     62,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3/
      OP2=0
      OP1=0
      FLAST=.901
      MO = MOD(M,7)+1
      MM = M+1
      IF (FLAG) 5,10,5
5     OP1=OPM(MM)
10    IF ((ASX.LT.X1).OR.(ASY.LT.Y1)) GO TO 50
      IF((X1.LT.(-.01)).OR.(Y1.LT.(-.01))) GO TO 50
      IF(FLAG) 12,14,12
14    FLAG = 1
      CX=X1
      CY=Y1
      CALL PLOT(CX,CY,3)
      OPM(MM)=OP2
      FLAT(MM)=FLAST
      RETURN
12    DX=X1-CX
      DY=Y1-CY
      DZ=SQRT(DX**2+DY**2)
      NP=100.*DZ
      IF (NP.LE.0) RETURN
      IF (ILOOP.NE.0) GO TO 18
      IF (OP1.EQ.0) CALL PLOT(CX,CY,3)
18    FLAST=FLAT(MM)
      DFL = FL(MO)
      DO 30 J=1,NP
      FLAST = FLAST+DFL
      IF (FLAST.GT.21.) FLAST=1.001
      IF (J.NE.NP) GO TO 21
      XP = X1
      YP = Y1
      GO TO 221
21    DP = FLOAT(J-1)/100.
      XP = CX+DP*DX/DZ
      YP = CY+DP*DY/DZ
221   IF (OP1+OP2) 22,29,22
22    IF (OP1+OP2-2)23,35,23
23    IF ((ASX.LT.XP).OR.(ASY.LT.YP)) GO TO 300
      IF ((XP.LT.(-.01)).OR.(YP.LT.(-.01))) GO TO 300
      IF (OP1) 27,29,27
300   IF (OP1) 30,35,30
27    CALL PLOT(XP,YP,3)
      OP1=0
      GO TO 30
29    CALL PLOT(XP,YP,IPEN(NINT(FLAST),MO))
      IF (J-NP) 30,28,30
28    IF (K) 30,31,31
31    CALL SYMBOL(X1,Y1,.07,K,0.,-1)
30    CONTINUE
35    FLAT(MM)=FLAST
      OPM(MM)=OP2
      CX=X1
      CY=Y1
      RETURN
50    OP2=1
      IF (FLAG.EQ.0) GO TO 55
      IF (OP1.EQ.0) GO TO 12
55    FLAG =1
      GO TO 35
      END
C=DECK      DECML
C./      ADD   NAME=DECML
      SUBROUTINE DECML(X,Y,N1,M1)
      DIMENSION X(*),Y(*),N1(*)
      DIMENSION DY(1)
      DIMENSION DX(1)
      LOGICAL FLAG
      DOUBLE PRECISION EM,DX,DY,R,F
      EQUIVALENCE(F,J)
      MOVE=16777216
      FLAG=.FALSE.
      GO TO 300
      ENTRY DDECML(DX,DY,N1,M1)
      FLAG=.TRUE.
300   MM=1
      CALL NARG(NARGS,LOC)
      IF(NARGS .GE. 4) MM=IABS(M1)
      DO 200 I=1,MM
      IF(FLAG)  GOTO 100
      F=X(I)
101   IF(F .EQ. (0.)) GOTO 201
      R=DABS(F)
      IF(R .LT. (10.) .AND.  R .GE. (1.)) GOTO 201
      K = IABS(J/MOVE) - 64
      M=FLOAT(K) * 1.20412
      F=F/10.D0**M
204   R=DABS(F)
      IF(R .LT. (10.)) GOTO 209
      F=F/10.D0
      M=M+1
      GOTO 204
209   IF(R.GE.(1.)) GOTO 203
      F=F*10.D0
      M=M-1
      GOTO 204
201   M=0
203   IF(FLAG)  GOTO 208
      Y(I)=F
      GOTO 207
208   DY(I)=F
207   N1(I) = M
      GOTO 200
100   F=DX(I)
      GOTO 101
200   CONTINUE
      RETURN
      END
C=DECK      ENDPLT
      SUBROUTINE ENDPLT(NFILE)
C
C     ENDPLT PUTS A TRAILER AT THE END OF THE PLOT
C     AND IT CLOSES THE FILE
      CALL ENPLT(4.,0.)
      REWIND NFILE
      RETURN
      END
C=DECK      EOFTV
      SUBROUTINE EOFTV
      RETURN
      END
C=DECK      FRAMEV
      SUBROUTINE FRAMEV(I)
C*****
C      WRITTEN BY CBI IN 1974
C
C      USC MODIFICATION APRIL,1976
C
C*****
C     POSITIONS PLOTTER FOR NEXT PLOT
C     ORIGINAL BOSOR5 ALWAYS CALLED FRAMEV WITH I = 0
C BEG JAN 2012
C     COMMON /DATES/ ADUM,BDUM,DATE
C     INTEGER DATE(5)
      INTEGER   IDAT(3), ITIM(3), OP, NHOL, HOLDAT(8)
      CHARACTER SDAT*32
      COMMON /DATES/ IDAT, ITIM, OP, NHOL, HOLDAT, SDAT
C END JAN 2012
C BEG JUNE 1990
      COMMON/HED/TITLE(12)
      REAL*4 TITLE
C END JUNE 1990
      COMMON/FRAME/XFRAME
C
      CHARACTER*7  CHA
      INTEGER      HOL(2)
C
      CALL PLOTS (1,21,21)
      IF(I.EQ.1) GO TO 19
      XFRAME=0.
C      CALL PLOT(11.,0.0,-3)
C      CALL SYMBOL(1.,0.8,0.14,TITLE,90.,48)
C      CALL PLOT(3.,11.,-3)
      GO TO 19
10    CALL PLOT(9.,10.2,-3)
15    CALL PLOT(0.,-11.,-2)
19    CONTINUE
      CALL PLOT(-.5,0.0,-3)
      CALL PLOT(2.,0.8,-3)
      CHA = 'BOSOR5 '
      CALL  CC2H ( CHA, HOL, 7 )
      CALL SYMBOL(5.1,-0.75,0.1,HOL,0.0,7)
C BEG JAN 2012
C     CALL SYMBOL(6.0,-0.75,0.1,DATE,0.0,20)
      CALL SYMBOL(6.3,-0.75,0.1,HOLDAT,0.0,NHOL)
C END JAN 2012
      XFRAME=XFRAME+1.01
      CALL NUMBER(8.1,9.9,0.1,XFRAME,0.0,-1)
      RETURN
      END
C=DECK      GEOPLT
      SUBROUTINE GEOPLT (X, Y, XP, YP)
C*****
C     THIS SUBROUTINE MODIFIED BY HAC IN AUGUST,1974 BY INCORPORATING
C     CHANGES MADE BY CHICAGO BRIDGE AND IRON INTO ORIGINAL SUBROUTINE.
C*****
C
C
      DIMENSION X(2000),Y(2000),XP(2000),YP(2000),XPE(2000),YPE(2000)
      DIMENSION XSAVE(2000),YSAVE(2000)     
C BEG JUNE 1990
      CHARACTER*4 CSTRPLT(12)
#ifdef linux
      INTEGER STRPLT(12)
#else
C     REAL*4  STRPLT(12)
      INTEGER STRPLT(12)
#endif
C END JUNE 1990
C
      COMMON/SEGS/NSEG,M2,I5(201),I2,I2G
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/GLOBAL/IDZ,IZRING(99),ISAVE(20),INOTE
C BEG JUNE 1990
      COMMON/RING2/GAM(99),GJ(99),YC(99),XC(99),E1(99),E2(99),PPI(99)
      DIMENSION E1G(99),E2G(99)
#ifdef linux
      INTEGER    TITLE
#else
C     REAL*4     TITLE
      INTEGER    TITLE
#endif
      COMMON/HED/TITLE(12)
C END JUNE 1990
      COMMON/STEPS/DTEMP(201),STEP(201),STEP1(99),STEP2(99),STEP3(99)
C     'OLD' VERSION OF GEOPLT ON FILE 1 HAD FOLLOWING STATEMENT:
      COMMON/FOSAVE/V(99),HF(99),FM(99)
C     NOTE: ORIGINAL VALUES FOR V, HF, AND FM ARE SAVED IN /FOSAVE/
C           IN SUBROUTINE OUTIN2
#ifdef linux
      INTEGER       BMTITL
#else
      INTEGER       BMTITL
#endif
      COMMON/BUCKMD/BMTITL(11)

      INTEGER HOLLER(20)
C
      DATA IFIRST / 0 /
C
      DATA CSTRPLT / 'INIT', 'IAL ', 'UNDE', 'FORM',
     $               'ED S', 'TRUC', 'TURE', 'DEFO',
     $               'RMED', ' STR', 'UCTU', 'RE  ' /
C
C     IPLOT = 1  PLOT UNDEFORMED STRUCTURE
C     IPLOT = 2  PLOT DEFORMED STRUCTURE
C     JPLOT = NUMBER OF R, Z PAIRS
C
C     DEBUG:  EITHER USE X0 AND Y0 OR INSERT CALL GASP(ZAX,...)
C             BEFORE EACH CALL TO GEOPLT IN PLOTIT - AS DONE HERE

      INTEGER INTDAT
      SAVE    INTDAT
      DATA    INTDAT / 0 /
C
C     CHANGE CHARACTER TO HOLLERITH (INTEGER) DATA
C
      if (INTDAT .LE. 0) THEN
        DO 1 I=1,12
          CALL  CC2H ( CSTRPLT(I), STRPLT(I), 4 )
    1   CONTINUE

        INTDAT = 1
      ENDIF
C
C     BEGIN
C
      IF (IPLOT .EQ. 1)  GO TO 2
      WRITE (6, 1110)
      GO TO 4
2     WRITE (6, 1112)
4     CONTINUE
1110  FORMAT(' WE ARE ENTERING S-R GEOPLT TO',
     *       ' PLOT THE DEFORMED STRUCTURE',//)
1112  FORMAT (' WE ARE ENTERING S-R GEOPLT TO',
     *        ' PLOT THE UNDEFORMED STRUCTURE',//)
C
      IF (LDONE .EQ. 999)  GO TO 220
      IF (IFIRST .EQ. 1)  GO TO 10
      IFIRST = 1
10    CONTINUE
      INTSTR = 0
      ILDFRM = 0
      NFIXLD = 0
      NVARLD = 0
      LODPLT = 0
      NFIXV = 0
      NFIXH = 0
      NFIXM = 0
      NVARV = 0
      NVARH = 0
      NVARM = 0
C
      IJPLOT = JPLOT + 1
      DO 15 I = 1,I2    
      XSAVE(I) = X(I)   
      YSAVE(I) = Y(I)   
   15 CONTINUE    
C     
      DO 210 IP=1,IJPLOT
      IEP = 0
C
C     IF INTSTR = 0  PLOT THE WHOLE STRUCTURE
C     
      IF (IPLOT.EQ.1) LODPLT = 0    
      IF (IPLOT.EQ.1) ILDFRM = 0    
      DO 25 I = 1,I2    
      X(I) = XSAVE(I)   
      Y(I) = YSAVE(I)   
   25 CONTINUE    
C     
C
      IF (INTSTR .EQ. 0)  GO TO 90
C
C     LPLOT(IP - 1) = THE SIZE OF EXPANSION FOR AN R, Z LOCATION.
C
C     DEBUG
      IF(IP.EQ.1) WRITE(6,1300)
1300  FORMAT(//,60('* '),/,10X,'WARNING: SUBSCRIPT IP-1 IS ZERO',
     1/,60('* '),/)
      BIGGER = LPLOT(IP - 1)
C
C     KPLOT(IP-1) =  INTEGER LOCATION OF R, Z IN THE X AND Y ARRAYS
C
      INDX = KPLOT(IP-1)
C
C     CALL PLOT (10.0, -31.0, -3)
C     CALL PLOT (0.0, 0.8, -3)
C
      XMID = XLMAX + (XRMAX - XLMAX) * 0.5
      YMID = YBMAX + (YTMAX - YBMAX) * 0.5
      XDIF = X(INDX) - XMID
      YDIF = Y(INDX) - YMID
C
      XL = XLMAX + XDIF
      XR = XRMAX + XDIF
      YB = YBMAX + YDIF
      YT = YTMAX + YDIF
      XMID = XL + (XR - XL) * 0.5
      YMID = YB + (YT - YB) * 0.5
C
      IF (BIGGER .LE. 0.0)  BIGGER = 1.0
      XL = XMID - (XMID - XL) / BIGGER
      XR = XMID + (XR - XMID) / BIGGER
      YB = YMID - (YMID - YB) / BIGGER
      YT = YMID + (YT - YMID) / BIGGER
85    CONTINUE
C
      GO TO 103
C
C     SEARCH ALL ARRAYS AT START OF PLOTTING FOR MAX AND MIN DATA VALUES
C        - THIS INCLUDES THE DEFORMED AND UNDEFORMED DATA ARRAYS AS
C        THEY APPLY.  ON ALL EXPANDED PLOTS THE MAX AND MIN VALUES
C        ARE SET AUTOMATICALLY.
C
90    XL = X(1)
      XR=X(1)
      YB=Y(1)
      YT = Y(1)
C
      DO 100  J = 2, I2
      XL = AMIN1(XL, X(J))
      XR = AMAX1(XR, X(J))
      YT = AMAX1(YT, Y(J))
      YB = AMIN1(YB, Y(J))
100   CONTINUE
C
1310  FORMAT(/,5X,'NTOT =',I5)
      IF (NTOT .EQ. 0)  GO TO 103
C
      DO 102  I = 1, NTOT
      J = IZRING(I)
      XPT = X(J) + E1(I)
      YPT = Y(J) + E2(I)
      XL = AMIN1(XL, XPT)
      XR = AMAX1(XR, XPT)
      YB = AMIN1(YB, YPT)
      YT = AMAX1(YT, YPT)
102   CONTINUE
C
103   CONTINUE
C
      AX = ABS(XR - XL)
      AY = ABS(YT - YB)
      IXCH = 0
      IF (AX .GT. AY)  GO TO 106
      IXCH = 1
      XLT=XL
      XRT=XR
      XL = YB
      XR = YT
      YB = XLT
      YT = XRT
C
106   CONTINUE
1320  FORMAT(//,5X,'XL =',E14.8,/,5X,'XR =',E14.8,
     1/,5X,'YB =',E14.8,/,'YT =',E14.8,/)
C     NOW WE SELECT THE PROPER SCALE VALUES WHICH ARE MULTIPLES OF 1, 2,
C     OR 5.
C
      DR = XR - XL
      ADR = ABS(DR)
      FACT = 0.1 * ADR
      IF (IPLOT .EQ. 1)  GO TO 105
C
      DO 99  I = 1, I2
      XPE(I) = X(I) + FACT * XP(I)
      YPE(I) = Y(I) + FACT * YP(I)
99    CONTINUE
C
      IF (IP .GT. 1)  GO TO 105
      DO 104  I = 1, I2
      IF (IXCH .EQ. 1)  GO TO 101
      XL = AMIN1(XL, XPE(I))
      XR = AMAX1(XR, XPE(I))
      YB = AMIN1(YB, YPE(I))
      YT = AMAX1(YT, YPE(I))
      GO TO 104
101   CONTINUE
      XL = AMIN1(XL,YPE(I))
      XR = AMAX1(XR,YPE(I))
      YB = AMIN1(YB,XPE(I))
      YT = AMAX1(YT,XPE(I))
104   CONTINUE
C
105   CONTINUE
C
      DR = ALOG10(DR)
      IDR = DR
      DR = DR - IDR
      IF (DR .GT. 0.0)  GO TO 107
      DR = 1.0 - DR
      IDR = IDR - 1
107   IF (DR .GT. 0.30102994)  GO TO 108
      DX = 2.0 * 10.0**(IDR-1)
      GO TO 110
108   IF (DR .GT. 0.69896995)  GO TO 109
      DX = 5.0 * 10.0**(IDR-1)
      GO TO 110
109   DX = 10.0**IDR
C     NEXT WE MODIFY THE X AND Y LIMITS TO START ON AN EVEN INCREMENT
C     OF 1, 2, OR 5.
C
110   ADX = XR / DX + 0.49999995 * (1.0 + SIGN(1.0,XR))
      IF (XR .LT. 0.0) ADX = XR / DX + 0.49999995 * (1.0 - SIGN(1.0,XR))
      IF (XR .EQ. 0.0)  ADX = 1.0
      XR = DX * AINT(ADX)
      ADX = XL / DX - 0.49999995 * (1.0 + SIGN(1.0,XL))
      IF (XL .LT. 0.0) ADX = XL / DX - 0.49999995 * (1.0 - SIGN(1.0,XL))
      IF (XL .EQ. 0.0)  ADX = -1.0
      XL = DX * AINT(ADX)
      ADY = YT / DX + 0.49999995 * (1.0 + SIGN(1.0, YT))
      IF (YT .LT. 0.0) ADY = YT / DX + 0.49999995 * (1.0 - SIGN(1.0,YT))
      IF (YT .EQ. 0.0)  ADY = 1.0
      YT = DX * AINT(ADY)
      ADY = YB / DX - 0.49999995 * (1.0 + SIGN(1.0, YB))
      IF (YB .LT. 0.0) ADY = YB / DX - 0.49999995 * (1.0 - SIGN(1.0,YB))
      IF (YB .EQ. 0.0)  ADY = -1.0
      YB = DX * AINT(ADY)
C
C     THIS IS WHERE WE MAKE THE X AND Y AXIS HAVE THE SAME NUMBER OF
C     UNITS WITH THE SCALE FACTOR THE SAME ON BOTH X AND Y.
C
      IDXRL = ABS(XR - XL)/DX  + 0.001
      IDYTB = ABS(YT - YB)/DX  + 0.001
      JNDX = 1
      IF (IDXRL - IDYTB)  111, 116, 113
111   IXPL = IDYTB - IDXRL
112   XL = XL - DX
      IF (JNDX .EQ. IXPL)  GO TO 116
      JNDX = JNDX + 1
      XR = XR + DX
      IF (JNDX .EQ. IXPL)  GO TO 116
      JNDX = JNDX + 1
      GO TO 112
113   IYPL = IDXRL - IDYTB
114   YB = YB - DX
      IF (JNDX .EQ. IYPL)  GO TO 116
      JNDX = JNDX + 1
      YT = YT + DX
      IF (JNDX .EQ. IYPL)  GO TO 116
      JNDX = JNDX + 1
      GO TO 114
116   CONTINUE
C
      IF (IXCH .EQ. 0)  GO TO 115
      XLT = XL
      XRT = XR
      XL = YB
      XR=YT
      YB=XLT
      YT = XRT
115   CONTINUE
C
      IF (IP .GT. 1)  GO TO 118
      XLMAX = XL
      XRMAX = XR
      YBMAX = YB
      YTMAX = YT
C
C     WE NOW HAVE OUR MAX AND MIN VALUES FOR THE TOTAL STRUCTURE PLOT.
C     WRITE A MODIFIED GRID.
C
118   CONTINUE
      XLLAST = XL 
      XRLAST = XR 
      YBLAST = YB 
      YTLAST = YT 
C     
C
C     WRITE TITLES
C
      IF (IPLOT .EQ. 2)  GO TO 120
C
      CALL SYMBOL (0.0, 9.5, 0.14, STRPLT, 0.0, 28)
      GO TO 125
C
120   CALL SYMBOL (0.0, 9.5, 0.14, STRPLT(8), 0.0, 20)
      CALL SYMBOL (0.0, 9.2, 0.14, BMTITL, 0.0, 44)
C
125   CALL SYMBOL (0.0, 9.8, 0.14, TITLE, 0.0, 44)

      IF (IP .GT. 1)  GO TO 126

C     IF (LODPLT .EQ. 1)  CALL SYMBOL (0.0, 8.9, 0.14, 'RINGS   HAVE NO
C    1LOADS', 0.0, 19)
      IF (LODPLT .EQ. 1) THEN
        CALL CC2H   ('RINGS HAVE NO LOADS',HOLLER,19)
        CALL SYMBOL (0.0, 8.9, 0.14, HOLLER, 0.0, 19)
      ENDIF

C     IF (LODPLT .EQ. 2)  CALL SYMBOL (0.0, 8.9, 0.14, 27HRINGS HAVE FIX
C    1ED LOADS ONLY, 0.0, 27)
      IF (LODPLT .EQ. 2) THEN
        CALL CC2H   ('RINGS HAVE FIXED LOADS ONLY',HOLLER,27)
        CALL SYMBOL (0.0, 8.9, 0.14, HOLLER, 0.0, 27)
      ENDIF

C     IF (LODPLT.EQ. 3)  CALL SYMBOL (0.0, 8.9, 0.14, 30HRINGS HAVE VARI
C    1ABLE LOADS ONLY, 0.0, 30)
      IF (LODPLT .EQ. 3) THEN
        CALL CC2H   ('RINGS HAVE VARIABLE LOADS ONLY',HOLLER,30)
        CALL SYMBOL (0.0, 8.9, 0.14, HOLLER, 0.0, 30)
      ENDIF

C     IF (LODPLT .EQ. 4)  CALL SYMBOL (0.0, 8.9, 0.14, 40HRINGS HAVE BOT
C    1H FIXED AND VARIABLE LOADS, 0.0, 40)
      IF (LODPLT .EQ. 4) THEN
        CALL CC2H ('RINGS HAVE BOTH FIXED AND VARIABLE LOADS',HOLLER,40)
        CALL SYMBOL (0.0, 8.9, 0.14, HOLLER, 0.0, 40)
      ENDIF
C
C
126   IF (INTSTR .EQ. 0)  GO TO 127

C     IF (IPLOT .EQ. 1)  CALL SYMBOL (0.0, 9.5, 0.14,
C    *'                             IS EXPANDED' ,0.0,40)
      IF (IPLOT .EQ. 1) THEN
        CALL CC2H ('                             IS EXPANDED',HOLLER,40)
        CALL SYMBOL (0.0, 9.5, 0.14, HOLLER, 0.0, 40)
      ENDIF

C     IF (IPLOT .EQ. 2)  CALL SYMBOL (3.92, 9.5, 0.14, 11HIS EXPANDED,
C    10.0, 11)
      IF (IPLOT .EQ. 2) THEN
         CALL CC2H   ('IS EXPANDED',HOLLER,11)
         CALL SYMBOL (3.92, 9.5, 0.14, HOLLER, 10.0, 11)
      ENDIF
C
127   CONTINUE
      CALL PLOT(0.,8.,3)
      CALL PLOT(0.,0.,2)
      CALL PLOT(8.,0.,2)

C     CALL SYMBOL(-1.3,4.,0.2,1HZ,0.0,1)
      CALL CC2H('Z',HOLLER,1)
      CALL SYMBOL(-1.3,4.,0.2,HOLLER,0.0,1)

C     CALL SYMBOL(4.,-0.75,0.2,1HR,0.0,1)
      CALL CC2H('R',HOLLER,1)
      CALL SYMBOL(4.,-0.75,0.2,HOLLER,0.0,1)
C
C     SELECT GRID SCALES.
C     SCALE THE GRID IN THE X DIRECTION AND PRINT THE X UNITS.
C
      XRNGE = XR - XL
      YRNGE = YT - YB
      XL1=XL
      AX=AMAX1(ABS(XL),ABS(XR))*1.00005
      NX=ALOG10(AX)+.999999
      NX=4-NX
      IF(NX.LT.-1) NX=-1
      XLPT=-0.2
      IF(XL.LT.0.) XLPT=XLPT-6./7.*0.14
      IF(NX.EQ.1) NX=0
      CALL NUMBER(XLPT,-0.35,0.14,XL,0.0,NX)
      IF (DX .GE. XR)  XL = XR - DX
130   CONTINUE
      XL = DX + XL
      IF (XL .GT. XR)  GO TO 135
      XLPT=(XL-XL1)/XRNGE*8.0
      CALL PLOT(XLPT,0.,3)
      CALL PLOT(XLPT,.2,2)
      CALL PLOT(XLPT,7.8,3)
      CALL PLOT(XLPT,8.0,2)
      XLPT=XLPT-0.2
      IF(XL.LT.0) XLPT=XLPT-6./7.*0.14
      CALL NUMBER(XLPT,-0.35,0.14,XL,0.0,NX)
      GO TO 130
135   CONTINUE
C     SCALE THE GRID IN THE Y DIRECTION AND PRINT THE Y UNITS.
C
      YB1=YB
      IF(YB.NE.0.) NYB=MAX1(ALOG10(ABS(YB)*1.00005)+.999999,1.0)
      IF(YB.EQ.0.) NYB=1
      AY=AMAX1(ABS(YB),ABS(YT))*1.00005
      NY0=MAX1(ALOG10(AY)+.999999,1.0)
      NY=4-NY0
      IF(NY.LT.-1) NY=-1
      XLPT=-0.9+(NY0-NYB)*6./7.*0.14
      IF(YB.LT.0.) XLPT=XLPT-6./7.*0.14
      IF(NY.EQ.1) NY=0
      CALL NUMBER(XLPT,0.,0.14,YB,0.0,NY)
      IF (DX .GE. YT)  YB = YT - DX
140   CONTINUE
      YB = DX + YB
      IF (YB .GT. YT)  GO TO 145
      IF(YB.NE.0.) NYB=MAX1(ALOG10(ABS(YB)*1.00005)+.999999,1.0)
      IF(YB.EQ.0.) NYB=1
      YBPT=(YB-YB1)/YRNGE*8.0
      CALL PLOT(0.,YBPT,3)
      CALL PLOT(.2,YBPT,2)
      CALL PLOT(7.8,YBPT,3)
      CALL PLOT(8.0,YBPT,2)
      XLPT=-0.9+(NY0-NYB)*6./7.*0.14
      IF(YB.LT.0.) XLPT=XLPT-6./7.*0.14
      CALL NUMBER(XLPT,YBPT,0.14,YB,0.0,NY)
      GO TO 140
145   CONTINUE
      CALL PLOT (0.0, 8.0, 3)
      CALL PLOT (8.0, 8.0, 2)
      CALL PLOT (8.0, 0.0, 2)
      CALL PLOT (0.0, 0.0, 3)
C     DO ACTUAL PLOTS FROM HERE.
C     THIS PORTION PLOTS THE UNDEFORMED STRUCTURE.
C
      IF (IPLOT .EQ. 2)  GO TO 170
C
      IF(LODPLT.NE.0) GO TO 148
C*    NEED TO MAKE TEST ON IP ALSO?????????
      XL=XL1
      YB=YB1
      XRANGE = XR - XL
      YRANGE = YT - YB
      DO 146  IC = 1, I2
      XDELX = X(IC) - XL
      YDELY = Y(IC) - YB
      X(IC) = XDELX / XRANGE * 8.0
      Y(IC) = YDELY / YRANGE * 8.0
146   CONTINUE
      IF(NTOT.LE.0) GO TO 148
      DO 149  IE = 1, NTOT
      E1G(IE)=E1(IE)/XRANGE*8.0
      E2G(IE)=E2(IE)/YRANGE*8.0
149   CONTINUE
148   CONTINUE
C
      IST = 1
      IPT = 0
C
      DO 155  K = 1, NSEG
      IPT = IPT + I5(K)
      CALL PLOT (X(IST), Y(IST), 3)
      ISTP1 = IST + 1
C
      DO 150 J = ISTP1, IPT
      IF (X(J).LT.0.0.OR.X(J).GT.8.0) GO TO 150 
      IF (Y(J).LT.0.0.OR.Y(J).GT.8.0) GO TO 150 
C     
      CALL PLOT (X(J), Y(J), 2)
150   CONTINUE
C
      IST = IPT + 1
155   CONTINUE
C
      IF (LODPLT .EQ. 0)  GO TO 158
      IF (IP .GT. 1)  GO TO 158
      GO TO 157
C
C     PLOT MESH POINTS ON STRUCTURE.
C
158   CONTINUE
      REWIND 40
      INC=1+I2/180
      IF (IP.GT.1) INC = 1 + I2/(180*LPLOT(IP-1))     
C**** PLOT MESH POINT SYMBOL (NO. 1 - HEXAGON)
      NUSYM=1
      IF(INC.EQ.1) WRITE(40,1001)
1001  FORMAT('  INDICATES EACH MESH POINT            ')
      IF(INC.EQ.2) WRITE(40,1002)
1002  FORMAT ('  INDICATES EVERY SECOND MESH POINT   ')
      IF(INC.EQ.3) WRITE(40,1003)
1003  FORMAT('  INDICATES EVERY THIRD MESH POINT   ')
      IF (INC.GT.3) WRITE(40,1033)
 1033 FORMAT('  FEWER THAN EVERY THIRD MESH POINT  ')
      REWIND 40
      READ(40,1004) (HOLLER(I),I=1,9)
1004  FORMAT(20A4)
      CALL SYMBOL(4.5,8.2,0.1,HOLLER,0.0,36)
      CALL SYMBOL(4.5,8.25,0.07,NUSYM,0.0,-1)
      DO 159 I=1,I2,INC
      IF (X(I).LT.0.0.OR.X(I).GT.8.0) GO TO 159 
      IF (Y(I).LT.0.0.OR.Y(I).GT.8.0) GO TO 159 
C     
      CALL SYMBOL(X(I),Y(I),0.07,NUSYM,0.0,-1)
1305  FORMAT(5X,'X(I) =',E14.8,5X,'Y(I) =',E14.8)
159   CONTINUE
C
160   CONTINUE
C
      IF (NTOT .EQ. 0)  GO TO 195
C
C     PLOT RINGS AND ATTACHMENT POINTS HERE.
C
      DO 161  I = 1, NTOT
      IF (V(I) .NE. 0.0)  NFIXLD = 1
      IF (HF(I) .NE. 0.0)  NFIXLD = 1
      IF (FM(I) .NE. 0.0)  NFIXLD = 1
161   CONTINUE
C
157   CONTINUE
C
      DO 165 I = 1, NTOT
      IF (LODPLT .EQ. 0)  GO TO 166
      J = IZRING(I)
      IF (X(J).LT.0.0.OR.X(J).GT.8.0) GO TO 165 
      IF (Y(J).LT.0.0.OR.Y(J).GT.8.0) GO TO 165 
C     
      XPT=X(J)+E1G(I)
      YPT=Y(J)+E2G(I)
      IF (XPT .EQ. 0.0 .OR. YPT .EQ. 0.0)  GO TO 165
C**** PLOT ATTACHMENT POINT SYMBOL (NO. 0 - SQUARE)
      NUSYM=0
      CALL SYMBOL (X(J), Y(J), 0.07, NUSYM, 0.0, -1)
C**** PLOT RING CENTROID SYMBOL (NO.5 - DIAMOND)
      NUSYM=5
      CALL SYMBOL (XPT, YPT, 0.07, 5, 0.0, -1)
C
      IF (ILDFRM .EQ. 1)  GO TO 163
      IF (ILDFRM .EQ. 2)  GO TO 164
C
      GO TO (165, 163, 164, 163), LODPLT
C
166   IF (NFIXLD .EQ. 0 .AND. NVARLD .EQ. 0)  LODPLT = 1
      IF (NFIXLD .EQ. 1 .AND. NVARLD .EQ. 0)  LODPLT = 2
      IF (NFIXLD .EQ. 0 .AND. NVARLD .EQ. 1)  LODPLT = 3
      IF (NFIXLD .EQ. 1 .AND. NVARLD .EQ. 1)  LODPLT = 4
C
      NLDTYP = 1
      IF (LODPLT .EQ. 4)  NLDTYP = 2
C
      IF (ILDFRM .EQ. 0)  GO TO 195
C
163   CONTINUE
      IF (V(I) .EQ. 0.0)  GO TO 151
      NFIXV = 2
      IF (V(I) .LT. 0.0)  NFIXV = 5
      CALL ARROW (XPT, YPT, NFIXV, 0)
151   IF (HF(I) .EQ. 0.0)  GO TO 152
      NFIXH = 1
      IF (HF(I) .LT. 0.0)  NFIXH = 4
      CALL ARROW (XPT, YPT, NFIXH, 0)
152   IF (FM(I) .EQ. 0.0)  GO TO 165
      NFIXM = 3
      IF (FM(I) .LT. 0.0)  NFIXM = 6
      CALL ARROW (XPT, YPT, NFIXM, 0)
      GO TO 165
164   IF (STEP1(I) .EQ. 0.0)  GO TO 153
      NVARV = 2
      IF (STEP1(I) .LT. 0.0)  NVARV = 5
      CALL ARROW (XPT, YPT, NVARV, 1)
153   IF (STEP2(I) .EQ. 0.0)  GO TO 154
      NVARH = 1
      IF (STEP2(I) .LT. 0.0)  NVARH = 4
      CALL ARROW (XPT, YPT, NVARH, 1)
154   IF (STEP3(I) .EQ. 0.0)  GO TO 165
      NVARM = 3
      IF (STEP3(I) .LT. 0.0)  NVARM = 6
      CALL ARROW (XPT, YPT, NVARM, 1)
165   CONTINUE
C
      GO TO 195
C
170   CONTINUE
C
C     PLOT DEFORMED STRUCTURE HERE.  THE DASHED LINE IS THE UNDEFORMED
C        STRUCTURE AND THE SOLID LINE IS THE DEFORMED STRUCTURE.
C
      XL=XL1
      YB=YB1
      XRANGE=XR-XL
      YRANGE=YT-YB
      DO 171 IC=1,I2
      X(IC)=(X(IC)-XL)/XRANGE*8.0
      Y(IC)=(Y(IC)-YB)/YRANGE*8.0
      XPE(IC)=(XPE(IC)-XL)/XRANGE*8.0
      YPE(IC)=(YPE(IC)-YB)/YRANGE*8.0
171   CONTINUE
      IST = 1
      IPT = 0
C
      INC=1
      IF(I2.GT.181) INC=2
      IF(I2.GT.361) INC=3
      DO 180  K = 1, NSEG
      IDSHSW = 0
      IPT = IPT + I5(K)
      CALL PLOT (X(IST), Y(IST), 3)
      ISTP1 = IST + INC
C
      IPTU=((IPT-ISTP1)/INC)*INC+ISTP1
      IF(IPTU.NE.IPT) IPTU=IPTU+INC
      DO 175 JJ=ISTP1,IPTU,INC
      J=JJ
      IF(J.GT.IPT) J=IPT
      I1=INC-(JJ-J)
      IF (X(J).LT.0.0.OR.X(J).GT.8.0) GO TO 175 
      IF (Y(J).LT.0.0.OR.Y(J).GT.8.0) GO TO 175 
C     
      DIFFX = (X(J) - X(J-I1)) / 3.0
      DIFFY = (Y(J) - Y(J-I1)) / 3.0
      IF (IDSHSW .EQ. 1)  GO TO 173
      XIST  = X(J-I1) + DIFFX
      YIST  = Y(J-I1) + DIFFY
      CALL PLOT (XIST, YIST, 2)
      XIST = X(J) - DIFFX
      YIST = Y(J) - DIFFY
      CALL PLOT (XIST, YIST, 3)
      CALL PLOT (X(J), Y(J), 2)
      IDSHSW = 1
      GO TO 175
173   CONTINUE
      XIST  = X(J-I1) + DIFFX
      YIST  = Y(J-I1) + DIFFY
      CALL PLOT (XIST, YIST, 3)
      XIST = XIST + DIFFX
      YIST = YIST + DIFFY
      CALL PLOT (XIST, YIST, 2)
      IDSHSW = 0
175   CONTINUE
      IST = IPT + INC
180   CONTINUE
C
      IST = 1
      IPT = 0
C
      DO 190  K = 1, NSEG
      IPT = IPT + I5(K)
      CALL PLOT (XPE(IST), YPE(IST), 3)
      ISTP1 = IST + 1
C
      DO 185  J = ISTP1, IPT
      IF (XPE(J).LT.0.0.OR.XPE(J).GT.8.0) GO TO 185   
      IF (YPE(J).LT.0.0.OR.YPE(J).GT.8.0) GO TO 185   
C     
      CALL PLOT (XPE(J), YPE(J), 2)
185   CONTINUE
C
      IST = IPT + 1
190   CONTINUE
C
      IF (NTOT .EQ. 0) GO TO 193
C
C     PLOT THE RING POINTS ON THE UNDEFORMED STRUCTURE.
C
      DO 191  IRING = 1, NTOT
      J = IZRING(IRING)
      IF (X(J).LT.0.0.OR.X(J).GT.8.0) GO TO 191 
      IF (Y(J).LT.0.0.OR.Y(J).GT.8.0) GO TO 191 
C     
      CALL SYMBOL (X(J), Y(J), 0.07, 0, 0.0, -1)
191   CONTINUE
C
193   CONTINUE
C
      GO TO 200
C
195   CONTINUE
C
      IF (NTOT .EQ. 0)  GO TO 200
      IF(ILDFRM.NE.0) GO TO 197
      ILDFRM=1
      IF(LODPLT.EQ.3) ILDFRM=2
      GO TO 198
197   IF(ILDFRM.EQ.2) GO TO 200
      IF(LODPLT.LE.2) GO TO 200
      ILDFRM=2
198   CONTINUE
      XL = XLMAX
      XR = XRMAX
      YB = YBMAX
      YT = YTMAX
      CALL FRAMEV(1)
C
      GO TO 118
C
200   CONTINUE
      CALL FRAMEV(1)
C
      INTSTR = 1
C
210   CONTINUE
C
      RETURN
C
220   CONTINUE
      CALL PLOT (0.0, 0.0, LDONE)
C
      RETURN
C
      END
C=DECK      NUMBER
      SUBROUTINE NUMBER (X,Y,HEIGHT,FNUMB,ANGLE,NDIGIT)
C
C       SUB TO WRITE TO A PLOT FILE
C
c     WRITE (53, 100) 'NUMBER ',X,Y,HEIGHT,FNUMB,ANGLE,FLOAT(NDIGIT)
      RETURN
100   FORMAT (' ',A7,9E13.5)
      END
C=DECK      PLOT
      SUBROUTINE PLOT (X,Y,IPEN)
C
C       SUB TO WRITE TO A PLOT FILE
C
c     WRITE (53, 100) 'PLOT   ',X,Y,FLOAT(IPEN)
      RETURN
100   FORMAT (' ',A7,9E13.5)
      END
C=DECK      PLOTI
      SUBROUTINE PLOTI(NFILE)

C BEG JAN 2012
C     COMMON /DATES/ ADUM,BDUM,DATE
C     INTEGER DATE(5)
C     DIMENSION XX(7)
C     EQUIVALENCE(DATE(1),XX(3))
      INTEGER   IDAT(3), ITIM(3), OP, NHOL, HOLDAT(8)
      CHARACTER SDAT*32
      COMMON /DATES/ IDAT, ITIM, OP, NHOL, HOLDAT, SDAT
C END JAN 2012
      CALL PINIT(NFILE)
C BEG JAN 2012
C     CALL WDATE(XX)
      OP     = 2
*     CALL     SDATE(OP, SDAT, NHOL)
*     CALL     CC2H(SDAT, HOLDAT, NHOL)
C BEG JULY 2012 (following line commented out)
C     CALL     HDATE(OP, HOLDAT, NHOL)
C END JULY 2012
C END JAN 2012
      RETURN
      END
C=DECK      PLOTOP
C./      ADD   NAME=PLOTOP    
      SUBROUTINE PLOTOP(KF,I1,I2,I3,NF,NP,NPTS,X,Y,TITLE,OTITLE,ATITLE, 
     1LEGEND,NFIN)
C*****
C     THIS SUBROUTINE MODIFIED BY HAC IN AUGUST,1974 BY INCORPORATING   
C     CHANGES MADE BY CHICAGO BRIDGE AND IRON INTO ORIGINAL SUBROUTINE. 
C*****
C     
C                  KF + 0 CONNECTS POINTS ON EACH TRACE     
C                    = 0 DOES NOT CONNECT POINTS
C                  IF NF IS POSITIVE DATA WILL BE NORMALIZED BEFORE PLOT
C                  NG = IABS(NF) IS THE NUMBER OF GRIDS PER FRAME WITH  
C                  VALUES 1 - I3;  1+ I3 + 4    
C                  NP(I) = NUMBER OF TRACES ON GRID I WITH VALUES 1 - I2
C                  1 +I2 + 5  
C                  NPTS(J,I) = NO. OF POINTS ON TRACE J ON GRID I 
C                  WITH VALUES 1 - I1     
C                  X(K) = ABSCISSA K
C                  Y(K,J,I) = ORDINATE K FOR PLOT J ON GRID I     
C                  WITH DIMENSIONS Y(I1,I2,I3)  
C                  TITLE =18A4 ALPHANUMERIC CHARACTERS TO HEAD FRAME    
C                  OTITLE(5,I) = 5A4 ALPHANUMERIC CHARACTERS FOR ORDINAT
C                  TITLE FOR GRID I 
C                  ATITLE(11,I)=11A4 ALPHANUMERIC CHARACTERS FOR ABSCISS
C                  TITLE FOR GRID I 
C                  LEGEND(J,I) = A4 ALPHANUMERIC CHARACTERS TO IDENTIFY 
C                  TRACE J ON GRID I
C     
      DIMENSION NP(I3),NPTS(NFIN,I3),X(I1),Y(I1,I2,I3),YP(1002)   
      DIMENSION XP(2002),YOUT(2000,5),NPTOUT(5) 
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      DIMENSION TITLE(18),OTITLE(5,I3),ATITLE(11,I3)  
      REAL*8 LEGEND(NFIN,I3)  
      DIMENSION  YPOS(4), YINC(4), YBIAS(4,4), MKPT(5)
      DIMENSION XX(4),YY(4),X0L(4),Y0L(4) 
C     
      DATA YPOS, YINC, MKPT / 7.625, 6.84, 5.25, 1.0,    8.0, 4.24,
     1                        2.667, 1.875,   1, 0, 5, 10, 2  /
      DATA YBIAS(1,1), YBIAS(2,1), YBIAS(3,1), YBIAS(4,1)
     1                     /  0.5, 0.0, 0.0, 0.0  /
      DATA YBIAS(1,2), YBIAS(2,2), YBIAS(3,2), YBIAS(4,2)
     1                     / 5.25, 0.5, 0.0, 0.0  /
      DATA YBIAS(1,3), YBIAS(2,3), YBIAS(3,3), YBIAS(4,3)
     1                     / 6.84, 3.67, 0.5, 0.0 /
      DATA YBIAS(1,4), YBIAS(2,4), YBIAS(3,4), YBIAS(4,4)
     1                     / 7.65, 5.25, 2.875, 0.5 /
C     FOLLOWING STATEMENT INSERTED AS YPOS IS NOT USED
      NOTUSE=YPOS(1)    
C     WRITE(6,5)  
5     FORMAT(//,5X,'ENTERING PLOTOP',/)
C     
C     TITLE AT TOP OF FRAME   
C     
      CALL SYMBOL(0.0,9.7,0.14,TITLE,0.0,64)    
C     
      NG = IABS(NF)     
6     FORMAT(/,4X,I2,' GRAPHS TO BE DRAWN')
7     FORMAT(/,5X,'DATA NORMALIZED')
C     
      JPLOT1 = JPLOT + 1
      DO 110 III = 1,JPLOT1   
C     
      DO 100  I = 1, NG 
      NUP = NP(I) 
C     
C   FIND WINDOW...
C     
      CALL EXPAND(III,I1,X,Y(1,1,I),NUP,LPLOT(III-1),KPLOT(III-1),
     1            I1OUT,XP,YOUT,NPTOUT)   
C     
C     FIND EXTREME VALUES FOR GRAPH I .   
C     
      XL = XP(1)  
      XR = XP(1)  
      YB = YOUT(1,1)    
      YT = YOUT(1,1)    
8     FORMAT(//,5X,'GRAPH',I2,5X,I2,' CURVES TO BE DRAWN')
C     
      DO 20  J = 1, NUP 
      NUMPT = NPTOUT(J) 
      I1M2 = I1OUT - 2  
C     
      DO 10 K=1,NUMPT   
      XL = AMIN1(XL,XP(K))    
      XR = AMAX1(XR,XP(K))    
      YB = AMIN1 ( YB, YOUT(K,J))   
      YT = AMAX1 ( YT, YOUT(K,J))   
10    CONTINUE    
C     
20    CONTINUE    
C     DETERMINE SCALE AND SCALE FACTOR FOR ALL CURVES ON GRAPH I  
      XX(1)=XL    
      XX(2)=XR    
      CALL SCALEH(XX,7.75,2)  
      YY(1)=YB    
      YY(2)=YT    
      CALL SCALEH(YY,YINC(NG),2)    
23    FORMAT(/,5X,'GRAPH',I2,5X,'XL =',E14.8,5X,'XR =',E14.8,
     15X,'AXMIN =',E14.8,5X,'ADX =',E14.8)
24    FORMAT(17X,'YB =',E14.8,5X,'YT =',E14.8,5X,'AYMIN =',E14.8,
     15X,'ADY =',E14.8)
C     
      IF (NF .GE. 0)  GO TO 50
C     
      DIV = AMAX1 ( ABS(YB), ABS(YT) )    
C     
      DO 40 J=1,NUP     
      NUMPT = NPTOUT(J) 
      IF (NUMPT .GT. 200)  NUMPT = 200    
C     
      DO 30  K = 1, NUMPT     
      YOUT(K,J) = YOUT(K,J) / DIV   
C     
30    CONTINUE    
C     
40    CONTINUE    
C     
      YB = YB / DIV     
      YT = YT / DIV     
50    CONTINUE    
C     
      YSTART = YBIAS(I, NG)   
C     
      IF (NF .LT. 0)  GO TO 60
C     
C     CALL SYMBOL (6.5, YSTART, 0.07, 10HNORM. DATA, 0.0, 10)     
60    CONTINUE    
      YLEG=0.5*YINC(NG)+(NUP/2+1)*0.20    
62    FORMAT(/,5X,'POINTS CONNECTED BY LINES ON EACH CURVE')
63    FORMAT(/,5X,'POINTS UNCONNECTED ON EACH CURVE')
C     
      DO 90  J = 1, NUP 
      YLEG=YLEG-0.20    
      NUMPT = NPTOUT(J) 
      I1M2 = I1OUT - 2  
      IF(NUMPT.LE.2000) GO TO 68    
      WRITE(6,65) 
65    FORMAT(/,5X,'*** LIMIT PLOT TO FIRST 2000 POINTS ***')
      NUMPT=2000  
68    CONTINUE    
C     
      DO 70  K = 1, NUMPT     
      YP(K) = YOUT(K,J) 
70    CONTINUE    
C     
      YSTART = YBIAS(I, NG)   
      N1 = NUMPT + 1    
      N2 = NUMPT + 2    
      XP(N1)=XX(3)
      XP(N2)=XX(4)
      YP(N1)=YY(3)
      YP(N2)=YY(4)
      IF(J.GT.1) GO TO 75     
      CALL AXIS(0.0,YSTART,ATITLE(1,I),-44,7.0,0.0,XP(N1),XP(N2)) 
      CALL PLOT(7.0,YSTART,3) 
      CALL PLOT(7.75,YSTART,2)
      YLGTH=YINC(NG)    
      IF(NG.EQ.3) YLGTH=2.0   
      CALL AXIS(0.,YSTART,OTITLE(1,I),20,YLGTH,90.,YP(N1),YP(N2)) 
      YPS1=YSTART+YLGTH 
      YPS2=YSTART+YINC(NG)    
      CALL PLOT(0.,YPS1,3)    
      CALL PLOT(0.,YPS2,2)    
      CALL PLOT(0.,YSTART,-3) 
      YTT=YY(3)+YINC(NG)*YY(4)
      IF(YY(3).GE.0..OR.YTT.LT.0.) GO TO 75     
      X0L(1)=0.   
      X0L(2)=XX(3) + 7.75*XX(4)     
      Y0L(1)=0.   
      Y0L(2)=0.   
      CALL CSEG(0,1,2,X0L,7.75,XX(3),XX(4),Y0L,YINC(NG),YY(3),YY(4),    
     1 MKPT(J))   
75    CONTINUE    
      CALL CSEG(0,0,NUMPT,XP,7.75,XX(3),XX(4),YP,YINC(NG),YY(3),YY(4),  
     1MKPT(J))    
80    CONTINUE    
C     
      CALL SYMBOL(7.75,YLEG+0.035,0.07,MKPT(J),0.0,-1)
      CALL SYMBOL(7.90,YLEG,0.07,LEGEND(J,I),0.0,8)   
90    CONTINUE    
      CALL PLOT(0.0,-YSTART,-3)     
C     CALL PLOT(0.0,-12.,-3)  
C     CALL PLOT(0.,0.8,-3)    
C     
100   CONTINUE    
C     
      CALL FRAMEV(1)    
  110 CONTINUE    
C     WRITE(6,200)
200   FORMAT(/,5X,'LEAVING PLOTOP',/)
C     
      RETURN
C     
      END   
C=DECK      EXPAND
      SUBROUTINE EXPAND(IWIND,IALL,XALL,YALL,NUP,LPLOT,KPLOT,     
     1                  I1OUT,XOUT,YOUT,NPTOUT) 
C     
C   PURPOSE IS TO FIND WINDOW FOR OPTAINING X,Y PLOTS OF BOSOR STUFF    
C     
      DIMENSION XALL(*),YALL(IALL,NUP),XOUT(*),YOUT(2000,5),NPTOUT(*)   
C     
      IF (IWIND.EQ.1) THEN    
       XMAX = XALL(IALL) + 1. 
       XMIN = XALL(1)    - 1. 
       GO TO 10   
      ENDIF 
C     
      IF (IWIND.GT.1) THEN    
       FLP = LPLOT
       XMAX = 0.5*(XALL(IALL) - XALL(1))/FLP + XALL(KPLOT)  
       XMIN = XALL(KPLOT)*2. - XMAX 
      ENDIF 
C     
   10 CONTINUE    
      K = 0 
      DO 100 I = 1,IALL 
C     
      IF (XALL(I).LT.XMIN.OR.XALL(I).GT.XMAX) GO TO 100     
C     
C  POINT IS WITHIN WINDOW...  
C     
      K = K + 1   
      XOUT(K) = XALL(I) 
C     
      DO 50 J = 1,NUP   
      YOUT(K,J) = YALL(I,J)   
   50 CONTINUE    
  100 CONTINUE    
C     
      DO 200 J = 1,NUP  
  200 NPTOUT(J) = K     
      I1OUT = K   
C     
      RETURN
      END   
C=DECK      SCALEH
      SUBROUTINE SCALEH(X,S,N)
C*****
C      WRITTEN BY CBI IN 1974
C*****
      DIMENSION X(N),TDX(2),K(2),X0MIN(2)
      INTEGER IN(15),IND(15)
      DATA IN(1),IN(2),IN(3),IN(4),IN(5) / 100,125,150,175,200 /
      DATA IN(6),IN(7),IN(8),IN(9),IN(10) / 250,300,350,400,500 /
      DATA IN(11),IN(12),IN(13),IN(14),IN(15) / 600,700,800,1000,1250 /
      DATA IND(1),IND(2),IND(3),IND(4),IND(5) / 4,5,6,7,4 /
      DATA IND(6),IND(7),IND(8),IND(9),IND(10) /5,6,7,8,5 /
      DATA IND(11),IND(12),IND(13),IND(14),IND(15) / 6,7,8,4,5 /
C
      XL=X(1)
      XR=X(1)
      DO 50 I=1,N
      XL=AMIN1(XL,X(I))
      XR=AMAX1(XR,X(I))
50    CONTINUE
C
      XAMAX=AMAX1(ABS(XL),ABS(XR))
      IF(XAMAX.LT.1.0E-20) GO TO 55
      RATIO=0.
      IF(XR.NE.0.) RATIO=XL/XR
      IF(RATIO.LT.0.999.OR.RATIO.GT.1.001) GO TO 100
      IF(XL.NE.0.) GO TO 60
55    CONTINUE
      AX0=-1.
      ADX=1.
      GO TO 1000
60    IF(XL.GT.0.) GO TO 70
      AX0=2.*XL
      ADX=-XL
      GO TO 1000
70    AX0=0.
      ADX=XL
      GO TO 1000
C
100   RANGE=XR-XL
      IF(ABS(XL/RANGE).LT.0.001) XL=0.
      DX=RANGE/S
      XNDX=ALOG10(DX)
      NDX=XNDX
      IF(XNDX.GE.0) NDX=NDX+1
      IDX=DX*10.**(3-NDX)+1
      II=1
      DO 150 I=1,14
      IF(IDX.GT.IN(I)) II=I+1
150   CONTINUE
      IF(II.EQ.15) GO TO 310
C
      J1=II
      J2=II+1
      TDX(1)=IN(J1)*10.**(NDX-3)
      TDX(2)=IN(J2)*10.**(NDX-3)
      IF(XL.NE.0.) GO TO 200
      AX0=0.
      ADX=TDX(1)
      GO TO 1000
C
200   DO 210 I=1,2
      X0MIN(I)=XR-TDX(I)*S
      K(I)=XL/TDX(I)
      IF(K(I).LT.0) K(I)=K(I)-1
      IF(K(I).EQ.0.AND.XL.LT.0.) K(I)=-1
210   CONTINUE
      I=1
C
220   ADX=TDX(I)
      X0=K(I)*ADX
      IF(X0.LT.X0MIN(I)) GO TO 230
      AX0=X0
      GO TO 1000
C
230   IF(I.EQ.2) GO TO 250
      I=2
      GO TO 220
C
250   I=1
      J=J1
260   ADX=TDX(I)
      XK=K(I)
      IS=0
      INDM1=IND(J)-1
      DO 300 II=1,INDM1
      IF(IS.EQ.1) GO TO 300
      XK=XK+1./FLOAT(IND(J))
      X0=XK*ADX
      IF(X0.LT.XL.AND.X0.GT.X0MIN(I)) IS=1
300   CONTINUE
C
      IF(IS.EQ.1) GO TO 350
      IF(I.EQ.1) GO TO 330
310   CONTINUE
      ADX=DX
      AX0=XL
      WRITE(6,320)
320   FORMAT(/,5X,'*** SCALEH FAILED T0 FIND ADJUSTED VALUES',/)
      GO TO 1000
C
330   I=2
      J=J2
      GO TO 260
C
350   AX0=X0
C
1000  NP1=N+1
      NP2=N+2
      X(NP1)=AX0
      X(NP2)=ADX
      RETURN
      END
C=DECK      SYMBOL
      SUBROUTINE SYMBOL (X,Y,HEIGHT,LARRAY,ANGLE,ICHAR)
C
C       SUB TO WRITE TO A PLOT FILE
C
#if star
      real LARRAY(31)
#else
      character LARRAY(124)
#endif
C
c     WRITE (53, 100) 'SYMBOL ',X,Y,HEIGHT,0.0,ANGLE,FLOAT(ICHAR)
c     IF (ICHAR.GE.0) WRITE (53, 150) LARRAY
c     IF (ICHAR.LT.0) WRITE (53, 175) LARRAY(1)
      RETURN
100   FORMAT (' ',A7,9E13.5)
150   FORMAT (' ',124A1)
175   FORMAT (' ',I10)
      END
