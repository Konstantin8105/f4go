COMMENT             	*> \brief \b DSCAL
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE DSCAL(N,DA,DX,INCX)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       DOUBLE PRECISION DA
COMMENT             	*       INTEGER INCX,N
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       DOUBLE PRECISION DX(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>    DSCAL scales a vector by a constant.
COMMENT             	*>    uses unrolled loops for increment equal to 1.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>         number of elements in input vector(s)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] DA
COMMENT             	*> \verbatim
COMMENT             	*>          DA is DOUBLE PRECISION
COMMENT             	*>           On entry, DA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] DX
COMMENT             	*> \verbatim
COMMENT             	*>          DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>         storage spacing between elements of DX
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date November 2017
COMMENT             	*
COMMENT             	*> \ingroup double_blas_level1
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>     jack dongarra, linpack, 3/11/78.
COMMENT             	*>     modified 3/93 to return if incx .le. 0.
COMMENT             	*>     modified 12/3/93, array(1) declarations changed to array(*)
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	DSCAL
(                   	(
IDENT               	N
,                   	,
IDENT               	DA
,                   	,
IDENT               	DX
,                   	,
IDENT               	INCX
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     November 2017
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	DA
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	N
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	DX
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Local Scalars ..
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	M
,                   	,
IDENT               	MP1
,                   	,
IDENT               	NINCX
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	MOD
COMMENT             	*     ..
if                  	IF
(                   	(
IDENT               	N
<=                  	.LE.
INT                 	0
||                  	.OR.
IDENT               	INCX
<=                  	.LE.
INT                 	0
)                   	)
return              	RETURN
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
token(106)          	THEN
COMMENT             	*
COMMENT             	*        code for increment equal to 1
COMMENT             	*
COMMENT             	*
COMMENT             	*        clean-up loop
COMMENT             	*
IDENT               	M
=                   	=
IDENT               	MOD
(                   	(
IDENT               	N
,                   	,
INT                 	5
)                   	)
if                  	IF
(                   	(
IDENT               	M
!=                  	.NE.
INT                 	0
)                   	)
token(106)          	THEN
token(103)          	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
token(102)          	END
token(103)          	DO
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	5
)                   	)
return              	RETURN
token(102)          	END
if                  	IF
IDENT               	MP1
=                   	=
IDENT               	M
+                   	+
INT                 	1
token(103)          	DO
IDENT               	I
=                   	=
IDENT               	MP1
,                   	,
IDENT               	N
,                   	,
INT                 	5
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	1
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	1
)                   	)
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	2
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	2
)                   	)
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	3
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	3
)                   	)
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	4
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	4
)                   	)
token(102)          	END
token(103)          	DO
else                	ELSE
COMMENT             	*
COMMENT             	*        code for increment not equal to 1
COMMENT             	*
IDENT               	NINCX
=                   	=
IDENT               	N
*                   	*
IDENT               	INCX
token(103)          	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	NINCX
,                   	,
IDENT               	INCX
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	DA
*                   	*
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
token(102)          	END
token(103)          	DO
token(102)          	END
if                  	IF
return              	RETURN
token(102)          	END
