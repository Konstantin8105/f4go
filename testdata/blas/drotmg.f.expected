COMMENT             	*> \brief \b DROTMG
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE DROTMG(DD1,DD2,DX1,DY1,DPARAM)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION DD1,DD2,DX1,DY1
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION DPARAM(5)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    CONSTRUCT THE MODIFIED GIVENS TRANSFORMATION MATRIX H WHICH ZEROS
NEW_LINE            	

COMMENT             	*>    THE SECOND COMPONENT OF THE 2-VECTOR  (DSQRT(DD1)*DX1,DSQRT(DD2)*>    DY2)**T.
NEW_LINE            	

COMMENT             	*>    WITH DPARAM(1)=DFLAG, H HAS ONE OF THE FOLLOWING FORMS..
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    DFLAG=-1.D0     DFLAG=0.D0        DFLAG=1.D0     DFLAG=-2.D0
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>      (DH11  DH12)    (1.D0  DH12)    (DH11  1.D0)    (1.D0  0.D0)
NEW_LINE            	

COMMENT             	*>    H=(          )    (          )    (          )    (          )
NEW_LINE            	

COMMENT             	*>      (DH21  DH22),   (DH21  1.D0),   (-1.D0 DH22),   (0.D0  1.D0).
NEW_LINE            	

COMMENT             	*>    LOCATIONS 2-4 OF DPARAM CONTAIN DH11, DH21, DH12, AND DH22
NEW_LINE            	

COMMENT             	*>    RESPECTIVELY. (VALUES OF 1.D0, -1.D0, OR 0.D0 IMPLIED BY THE
NEW_LINE            	

COMMENT             	*>    VALUE OF DPARAM(1) ARE NOT STORED IN DPARAM.)
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    THE VALUES OF GAMSQ AND RGAMSQ SET IN THE DATA STATEMENT MAY BE
NEW_LINE            	

COMMENT             	*>    INEXACT.  THIS IS OK AS THEY ARE ONLY USED FOR TESTING THE SIZE
NEW_LINE            	

COMMENT             	*>    OF DD1 AND DD2.  ALL ACTUAL SCALING OF DATA IS DONE USING GAM.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in,out] DD1
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DD1 is DOUBLE PRECISION
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] DD2
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DD2 is DOUBLE PRECISION
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] DX1
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DX1 is DOUBLE PRECISION
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] DY1
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DY1 is DOUBLE PRECISION
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[out] DPARAM
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DPARAM is DOUBLE PRECISION array, dimension (5)
NEW_LINE            	

COMMENT             	*>     DPARAM(1)=DFLAG
NEW_LINE            	

COMMENT             	*>     DPARAM(2)=DH11
NEW_LINE            	

COMMENT             	*>     DPARAM(3)=DH21
NEW_LINE            	

COMMENT             	*>     DPARAM(4)=DH12
NEW_LINE            	

COMMENT             	*>     DPARAM(5)=DH22
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup double_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	DROTMG
(                   	(
IDENT               	DD1
,                   	,
IDENT               	DD2
,                   	,
IDENT               	DX1
,                   	,
IDENT               	DY1
,                   	,
IDENT               	DPARAM
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

DOUBLE              	DOUBLE
PRECISION           	PRECISION
IDENT               	DD1
,                   	,
IDENT               	DD2
,                   	,
IDENT               	DX1
,                   	,
IDENT               	DY1
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

DOUBLE              	DOUBLE
PRECISION           	PRECISION
IDENT               	DPARAM
(                   	(
INT                 	5
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

DOUBLE              	DOUBLE
PRECISION           	PRECISION
IDENT               	DFLAG
,                   	,
IDENT               	DH11
,                   	,
IDENT               	DH12
,                   	,
IDENT               	DH21
,                   	,
IDENT               	DH22
,                   	,
IDENT               	DP1
,                   	,
IDENT               	DP2
,                   	,
IDENT               	DQ1
,                   	,
IDENT               	DQ2
,                   	,
IDENT               	DTEMP
,                   	,
NEW_LINE            	

IDENT               	DU
,                   	,
IDENT               	GAM
,                   	,
IDENT               	GAMSQ
,                   	,
IDENT               	ONE
,                   	,
IDENT               	RGAMSQ
,                   	,
IDENT               	TWO
,                   	,
IDENT               	ZERO
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

INTRINSIC           	INTRINSIC
IDENT               	DABS
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Data statements ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

DATA                	DATA
IDENT               	ZERO
,                   	,
IDENT               	ONE
,                   	,
IDENT               	TWO
/                   	/
FLOAT               	0.D0
,                   	,
FLOAT               	1.D0
,                   	,
FLOAT               	2.D0
/                   	/
NEW_LINE            	

DATA                	DATA
IDENT               	GAM
,                   	,
IDENT               	GAMSQ
,                   	,
IDENT               	RGAMSQ
/                   	/
FLOAT               	4096.D0
,                   	,
FLOAT               	16777216.D0
,                   	,
FLOAT               	5.9604645D-8
/                   	/
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DD1
<                   	.LT.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*        GO ZERO-H-D-AND-DX1..
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH21
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	ZERO
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	ZERO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*        CASE-DD1-NONNEGATIVE
NEW_LINE            	

IDENT               	DP2
=                   	=
IDENT               	DD2
*                   	*
IDENT               	DY1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DP2
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	TWO
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	1
)                   	)
=                   	=
IDENT               	DFLAG
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*        REGULAR-CASE..
NEW_LINE            	

IDENT               	DP1
=                   	=
IDENT               	DD1
*                   	*
IDENT               	DX1
NEW_LINE            	

IDENT               	DQ2
=                   	=
IDENT               	DP2
*                   	*
IDENT               	DY1
NEW_LINE            	

IDENT               	DQ1
=                   	=
IDENT               	DP1
*                   	*
IDENT               	DX1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DQ1
)                   	)
>                   	.GT.
IDENT               	DABS
(                   	(
IDENT               	DQ2
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DH21
=                   	=
-                   	-
IDENT               	DY1
/                   	/
IDENT               	DX1
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	DP2
/                   	/
IDENT               	DP1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	DU
=                   	=
IDENT               	ONE
-                   	-
IDENT               	DH12
*                   	*
IDENT               	DH21
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DU
>                   	.GT.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DFLAG
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	DD1
/                   	/
IDENT               	DU
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	DD2
/                   	/
IDENT               	DU
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	DX1
*                   	*
IDENT               	DU
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DQ2
<                   	.LT.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*              GO ZERO-H-D-AND-DX1..
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH21
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	ZERO
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	ZERO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DFLAG
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	DP1
/                   	/
IDENT               	DP2
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	DX1
/                   	/
IDENT               	DY1
NEW_LINE            	

IDENT               	DU
=                   	=
IDENT               	ONE
+                   	+
IDENT               	DH11
*                   	*
IDENT               	DH22
NEW_LINE            	

IDENT               	DTEMP
=                   	=
IDENT               	DD2
/                   	/
IDENT               	DU
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	DD1
/                   	/
IDENT               	DU
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	DTEMP
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	DY1
*                   	*
IDENT               	DU
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

NEW_LINE            	

COMMENT             	*     PROCEDURE..SCALE-CHECK
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DD1
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
WHILE               	WHILE
(                   	(
(                   	(
IDENT               	DD1
<=                  	.LE.
IDENT               	RGAMSQ
)                   	)
||                  	.OR.
(                   	(
IDENT               	DD1
>=                  	.GE.
IDENT               	GAMSQ
)                   	)
)                   	)
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DFLAG
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DH21
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DD1
<=                  	.LE.
IDENT               	RGAMSQ
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	DD1
*                   	*
IDENT               	GAM
                    	**
INT                 	2
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	DX1
/                   	/
IDENT               	GAM
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	DH11
/                   	/
IDENT               	GAM
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	DH12
/                   	/
IDENT               	GAM
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DD1
=                   	=
IDENT               	DD1
/                   	/
IDENT               	GAM
                    	**
INT                 	2
NEW_LINE            	

IDENT               	DX1
=                   	=
IDENT               	DX1
*                   	*
IDENT               	GAM
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	DH11
*                   	*
IDENT               	GAM
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	DH12
*                   	*
IDENT               	GAM
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	ENDDO
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DD2
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
WHILE               	WHILE
(                   	(
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DD2
)                   	)
<=                  	.LE.
IDENT               	RGAMSQ
)                   	)
||                  	.OR.
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DD2
)                   	)
>=                  	.GE.
IDENT               	GAMSQ
)                   	)
)                   	)
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DFLAG
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DH11
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DH21
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

IDENT               	DH12
=                   	=
IDENT               	ONE
NEW_LINE            	

IDENT               	DFLAG
=                   	=
-                   	-
IDENT               	ONE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DABS
(                   	(
IDENT               	DD2
)                   	)
<=                  	.LE.
IDENT               	RGAMSQ
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	DD2
*                   	*
IDENT               	GAM
                    	**
INT                 	2
NEW_LINE            	

IDENT               	DH21
=                   	=
IDENT               	DH21
/                   	/
IDENT               	GAM
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	DH22
/                   	/
IDENT               	GAM
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DD2
=                   	=
IDENT               	DD2
/                   	/
IDENT               	GAM
                    	**
INT                 	2
NEW_LINE            	

IDENT               	DH21
=                   	=
IDENT               	DH21
*                   	*
IDENT               	GAM
NEW_LINE            	

IDENT               	DH22
=                   	=
IDENT               	DH22
*                   	*
IDENT               	GAM
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DFLAG
<                   	.LT.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	2
)                   	)
=                   	=
IDENT               	DH11
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	3
)                   	)
=                   	=
IDENT               	DH21
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	4
)                   	)
=                   	=
IDENT               	DH12
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	5
)                   	)
=                   	=
IDENT               	DH22
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	DFLAG
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	3
)                   	)
=                   	=
IDENT               	DH21
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	4
)                   	)
=                   	=
IDENT               	DH12
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	2
)                   	)
=                   	=
IDENT               	DH11
NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	5
)                   	)
=                   	=
IDENT               	DH22
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

NEW_LINE            	

IDENT               	DPARAM
(                   	(
INT                 	1
)                   	)
=                   	=
IDENT               	DFLAG
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
NEW_LINE            	

NEW_LINE            	

NEW_LINE            	

NEW_LINE            	

NEW_LINE            	

