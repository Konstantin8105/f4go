COMMENT             	*> \brief \b CHER2K
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE CHER2K(UPLO,TRANS,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX ALPHA
NEW_LINE            	

COMMENT             	*       REAL BETA
NEW_LINE            	

COMMENT             	*       INTEGER K,LDA,LDB,LDC,N
NEW_LINE            	

COMMENT             	*       CHARACTER TRANS,UPLO
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX A(LDA,*),B(LDB,*),C(LDC,*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> CHER2K  performs one of the hermitian rank 2k operations
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    C := alpha*A*B**H + conjg( alpha )*B*A**H + beta*C,
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> or
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    C := alpha*A**H*B + conjg( alpha )*B**H*A + beta*C,
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> where  alpha and beta  are scalars with  beta  real,  C is an  n by n
NEW_LINE            	

COMMENT             	*> hermitian matrix and  A and B  are  n by k matrices in the first case
NEW_LINE            	

COMMENT             	*> and  k by n  matrices in the second case.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] UPLO
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          UPLO is CHARACTER*1
NEW_LINE            	

COMMENT             	*>           On  entry,   UPLO  specifies  whether  the  upper  or  lower
NEW_LINE            	

COMMENT             	*>           triangular  part  of the  array  C  is to be  referenced  as
NEW_LINE            	

COMMENT             	*>           follows:
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'U' or 'u'   Only the  upper triangular part of  C
NEW_LINE            	

COMMENT             	*>                                  is to be referenced.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'L' or 'l'   Only the  lower triangular part of  C
NEW_LINE            	

COMMENT             	*>                                  is to be referenced.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] TRANS
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          TRANS is CHARACTER*1
NEW_LINE            	

COMMENT             	*>           On entry,  TRANS  specifies the operation to be performed as
NEW_LINE            	

COMMENT             	*>           follows:
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              TRANS = 'N' or 'n'    C := alpha*A*B**H          +
NEW_LINE            	

COMMENT             	*>                                         conjg( alpha )*B*A**H +
NEW_LINE            	

COMMENT             	*>                                         beta*C.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              TRANS = 'C' or 'c'    C := alpha*A**H*B          +
NEW_LINE            	

COMMENT             	*>                                         conjg( alpha )*B**H*A +
NEW_LINE            	

COMMENT             	*>                                         beta*C.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry,  N specifies the order of the matrix C.  N must be
NEW_LINE            	

COMMENT             	*>           at least zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] K
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          K is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry with  TRANS = 'N' or 'n',  K  specifies  the number
NEW_LINE            	

COMMENT             	*>           of  columns  of the  matrices  A and B,  and on  entry  with
NEW_LINE            	

COMMENT             	*>           TRANS = 'C' or 'c',  K  specifies  the number of rows of the
NEW_LINE            	

COMMENT             	*>           matrices  A and B.  K must be at least zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] ALPHA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ALPHA is COMPLEX
NEW_LINE            	

COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] A
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          A is COMPLEX array, dimension ( LDA, ka ), where ka is
NEW_LINE            	

COMMENT             	*>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
NEW_LINE            	

COMMENT             	*>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
NEW_LINE            	

COMMENT             	*>           part of the array  A  must contain the matrix  A,  otherwise
NEW_LINE            	

COMMENT             	*>           the leading  k by n  part of the array  A  must contain  the
NEW_LINE            	

COMMENT             	*>           matrix A.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] LDA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          LDA is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
NEW_LINE            	

COMMENT             	*>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
NEW_LINE            	

COMMENT             	*>           then  LDA must be at least  max( 1, n ), otherwise  LDA must
NEW_LINE            	

COMMENT             	*>           be at least  max( 1, k ).
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] B
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          B is COMPLEX array, dimension ( LDB, kb ), where kb is
NEW_LINE            	

COMMENT             	*>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
NEW_LINE            	

COMMENT             	*>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
NEW_LINE            	

COMMENT             	*>           part of the array  B  must contain the matrix  B,  otherwise
NEW_LINE            	

COMMENT             	*>           the leading  k by n  part of the array  B  must contain  the
NEW_LINE            	

COMMENT             	*>           matrix B.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] LDB
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          LDB is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, LDB specifies the first dimension of B as declared
NEW_LINE            	

COMMENT             	*>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
NEW_LINE            	

COMMENT             	*>           then  LDB must be at least  max( 1, n ), otherwise  LDB must
NEW_LINE            	

COMMENT             	*>           be at least  max( 1, k ).
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] BETA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          BETA is REAL
NEW_LINE            	

COMMENT             	*>           On entry, BETA specifies the scalar beta.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] C
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          C is COMPLEX array, dimension ( LDC, N )
NEW_LINE            	

COMMENT             	*>           Before entry  with  UPLO = 'U' or 'u',  the leading  n by n
NEW_LINE            	

COMMENT             	*>           upper triangular part of the array C must contain the upper
NEW_LINE            	

COMMENT             	*>           triangular part  of the  hermitian matrix  and the strictly
NEW_LINE            	

COMMENT             	*>           lower triangular part of C is not referenced.  On exit, the
NEW_LINE            	

COMMENT             	*>           upper triangular part of the array  C is overwritten by the
NEW_LINE            	

COMMENT             	*>           upper triangular part of the updated matrix.
NEW_LINE            	

COMMENT             	*>           Before entry  with  UPLO = 'L' or 'l',  the leading  n by n
NEW_LINE            	

COMMENT             	*>           lower triangular part of the array C must contain the lower
NEW_LINE            	

COMMENT             	*>           triangular part  of the  hermitian matrix  and the strictly
NEW_LINE            	

COMMENT             	*>           upper triangular part of C is not referenced.  On exit, the
NEW_LINE            	

COMMENT             	*>           lower triangular part of the array  C is overwritten by the
NEW_LINE            	

COMMENT             	*>           lower triangular part of the updated matrix.
NEW_LINE            	

COMMENT             	*>           Note that the imaginary parts of the diagonal elements need
NEW_LINE            	

COMMENT             	*>           not be set,  they are assumed to be zero,  and on exit they
NEW_LINE            	

COMMENT             	*>           are set to zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] LDC
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          LDC is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, LDC specifies the first dimension of C as declared
NEW_LINE            	

COMMENT             	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
NEW_LINE            	

COMMENT             	*>           max( 1, n ).
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup complex_blas_level3
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  Level 3 Blas routine.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  -- Written on 8-February-1989.
NEW_LINE            	

COMMENT             	*>     Jack Dongarra, Argonne National Laboratory.
NEW_LINE            	

COMMENT             	*>     Iain Duff, AERE Harwell.
NEW_LINE            	

COMMENT             	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
NEW_LINE            	

COMMENT             	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  -- Modified 8-Nov-93 to set C(J,J) to REAL( C(J,J) ) when BETA = 1.
NEW_LINE            	

COMMENT             	*>     Ed Anderson, Cray Research Inc.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	CHER2K
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	TRANS
,                   	,
IDENT               	N
,                   	,
IDENT               	K
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	B
,                   	,
IDENT               	LDB
,                   	,
IDENT               	BETA
,                   	,
IDENT               	C
,                   	,
IDENT               	LDC
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level3 routine (version 3.7.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	ALPHA
NEW_LINE            	

REAL                	REAL
IDENT               	BETA
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	K
,                   	,
IDENT               	LDA
,                   	,
IDENT               	LDB
,                   	,
IDENT               	LDC
,                   	,
IDENT               	N
NEW_LINE            	

CHARACTER           	CHARACTER
IDENT               	TRANS
,                   	,
IDENT               	UPLO
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	B
(                   	(
IDENT               	LDB
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	C
(                   	(
IDENT               	LDC
,                   	,
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. External Functions ..
NEW_LINE            	

LOGICAL             	LOGICAL
IDENT               	LSAME
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	LSAME
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Subroutines ..
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	XERBLA
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

IDENT               	INTRINSIC
IDENT               	CONJG
,                   	,
IDENT               	MAX
,                   	,
REAL                	REAL
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	TEMP1
,                   	,
IDENT               	TEMP2
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	J
,                   	,
IDENT               	L
,                   	,
IDENT               	NROWA
NEW_LINE            	

LOGICAL             	LOGICAL
IDENT               	UPPER
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Parameters ..
NEW_LINE            	

REAL                	REAL
IDENT               	ONE
NEW_LINE            	

IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
FLOAT               	1.0E+0
)                   	)
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	ZERO
NEW_LINE            	

IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
(                   	(
FLOAT               	0.0E+0
,                   	,
FLOAT               	0.0E+0
)                   	)
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Test the input parameters.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	NROWA
=                   	=
IDENT               	N
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	NROWA
=                   	=
IDENT               	K
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	UPPER
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	0
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	UPPER
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	1
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
&&                  	.AND.
NEW_LINE            	

+                   	+
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'C'
)                   	)
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	2
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	3
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	K
<                   	.LT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	4
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWA
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	7
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	LDB
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWA
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	9
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	LDC
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	N
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	12
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

CALL                	CALL
IDENT               	XERBLA
(                   	(
STRING              	'CHER2K'
,                   	,
IDENT               	INFO
)                   	)
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Quick return if possible.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
||                  	.OR.
NEW_LINE            	

+                   	+
(                   	(
IDENT               	K
==                  	.EQ.
INT                 	0
)                   	)
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     And when  alpha.eq.zero.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

DO                  	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

INT                 	10
continue            	CONTINUE
NEW_LINE            	

INT                 	20
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

DO                  	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	30
continue            	CONTINUE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

INT                 	40
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

DO                  	DO
INT                 	50
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

INT                 	50
continue            	CONTINUE
NEW_LINE            	

INT                 	60
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

DO                  	DO
INT                 	70
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	70
continue            	CONTINUE
NEW_LINE            	

INT                 	80
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Start the operations.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  C := alpha*A*B**H + conjg( alpha )*B*A**H +
NEW_LINE            	

COMMENT             	*                   C.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	130
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	90
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

INT                 	90
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	100
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	100
continue            	CONTINUE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

DO                  	DO
INT                 	120
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	CONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
NEW_LINE            	

DO                  	DO
INT                 	110
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

INT                 	110
continue            	CONTINUE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
NEW_LINE            	

+                   	+
REAL                	REAL
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

INT                 	120
continue            	CONTINUE
NEW_LINE            	

INT                 	130
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	180
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	140
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

INT                 	140
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	150
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	150
continue            	CONTINUE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

DO                  	DO
INT                 	170
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	CONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
NEW_LINE            	

DO                  	DO
INT                 	160
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	B
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

INT                 	160
continue            	CONTINUE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
NEW_LINE            	

+                   	+
REAL                	REAL
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	B
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

INT                 	170
continue            	CONTINUE
NEW_LINE            	

INT                 	180
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  C := alpha*A**H*B + conjg( alpha )*B**H*A +
NEW_LINE            	

COMMENT             	*                   C.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	210
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

DO                  	DO
INT                 	200
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

DO                  	DO
INT                 	190
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	TEMP1
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	190
continue            	CONTINUE
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	I
==                  	.EQ.
IDENT               	J
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
NEW_LINE            	

+                   	+
REAL                	REAL
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

INT                 	200
continue            	CONTINUE
NEW_LINE            	

INT                 	210
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	240
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

DO                  	DO
INT                 	230
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

DO                  	DO
INT                 	220
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	TEMP1
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	B
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

INT                 	220
continue            	CONTINUE
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	I
==                  	.EQ.
IDENT               	J
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
REAL                	REAL
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
REAL                	REAL
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
NEW_LINE            	

+                   	+
REAL                	REAL
(                   	(
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
REAL                	REAL
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP1
+                   	+
NEW_LINE            	

+                   	+
IDENT               	CONJG
(                   	(
IDENT               	ALPHA
)                   	)
*                   	*
IDENT               	TEMP2
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

INT                 	230
continue            	CONTINUE
NEW_LINE            	

INT                 	240
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     End of CHER2K.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

END                 	END
NEW_LINE            	

