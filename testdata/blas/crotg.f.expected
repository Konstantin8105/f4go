COMMENT             	*> \brief \b CROTG
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE CROTG(CA,CB,C,S)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX CA,CB,S
NEW_LINE            	

COMMENT             	*       REAL C
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> CROTG determines a complex Givens rotation.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] CA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          CA is COMPLEX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] CB
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          CB is COMPLEX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[out] C
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          C is REAL
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[out] S
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          S is COMPLEX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup complex_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	CROTG
(                   	(
IDENT               	CA
,                   	,
IDENT               	CB
,                   	,
IDENT               	C
,                   	,
IDENT               	S
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	CA
,                   	,
IDENT               	CB
,                   	,
IDENT               	S
NEW_LINE            	

REAL                	REAL
IDENT               	C
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

COMPLEX             	COMPLEX
IDENT               	ALPHA
NEW_LINE            	

REAL                	REAL
IDENT               	NORM
,                   	,
IDENT               	SCALE
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

IDENT               	INTRINSIC
IDENT               	CABS
,                   	,
IDENT               	CONJG
,                   	,
IDENT               	SQRT
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	CABS
(                   	(
IDENT               	CA
)                   	)
==                  	.EQ.
FLOAT               	0.
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	C
=                   	=
FLOAT               	0.
NEW_LINE            	

IDENT               	S
=                   	=
(                   	(
FLOAT               	1.
,                   	,
FLOAT               	0.
)                   	)
NEW_LINE            	

IDENT               	CA
=                   	=
IDENT               	CB
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	SCALE
=                   	=
IDENT               	CABS
(                   	(
IDENT               	CA
)                   	)
+                   	+
IDENT               	CABS
(                   	(
IDENT               	CB
)                   	)
NEW_LINE            	

IDENT               	NORM
=                   	=
IDENT               	SCALE
*                   	*
IDENT               	SQRT
(                   	(
(                   	(
IDENT               	CABS
(                   	(
IDENT               	CA
/                   	/
IDENT               	SCALE
)                   	)
)                   	)
                    	**
INT                 	2
+                   	+
(                   	(
IDENT               	CABS
(                   	(
IDENT               	CB
/                   	/
IDENT               	SCALE
)                   	)
)                   	)
                    	**
INT                 	2
)                   	)
NEW_LINE            	

IDENT               	ALPHA
=                   	=
IDENT               	CA
/                   	/
IDENT               	CABS
(                   	(
IDENT               	CA
)                   	)
NEW_LINE            	

IDENT               	C
=                   	=
IDENT               	CABS
(                   	(
IDENT               	CA
)                   	)
/                   	/
IDENT               	NORM
NEW_LINE            	

IDENT               	S
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	CONJG
(                   	(
IDENT               	CB
)                   	)
/                   	/
IDENT               	NORM
NEW_LINE            	

IDENT               	CA
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	NORM
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
NEW_LINE            	

