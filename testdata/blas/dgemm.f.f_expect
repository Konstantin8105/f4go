 SUBROUTINE DGEMM ( TRANSA , TRANSB , M , N , K , ALPHA , A , LDA , B , LDB , BETA , C , LDC )
 DOUBLE PRECISION ALPHA , BETA
 INTEGER K , LDA , LDB , LDC , M , N
 CHARACTER TRANSA , TRANSB
 DOUBLE PRECISION A ( LDA , * ) , B ( LDB , * ) , C ( LDC , * )
 LOGICAL LSAME
 EXTERNAL LSAME
 EXTERNAL XERBLA
 INTRINSIC MAX
 DOUBLE PRECISION TEMP
 INTEGER I , INFO , J , L , NCOLA , NROWA , NROWB
 LOGICAL NOTA , NOTB
 DOUBLE PRECISION ONE , ZERO


 ONE = 1.0D+0
 ZERO = 0.0D+0

 NOTA = LSAME ( TRANSA , 'N' )
 NOTB = LSAME ( TRANSB , 'N' )
 IF ( NOTA ) THEN
 NROWA = M
 NCOLA = K
 ELSE
 NROWA = K
 NCOLA = M
 END
 IF ( NOTB ) THEN
 NROWB = K
 ELSE
 NROWB = N
 END
 INFO = 0
 IF ( ( .NOT. NOTA ) .AND. ( .NOT. LSAME ( TRANSA , 'C' ) ) .AND. ( .NOT. LSAME ( TRANSA , 'T' ) ) ) THEN
 INFO = 1
 ELSE IF ( ( .NOT. NOTB ) .AND. ( .NOT. LSAME ( TRANSB , 'C' ) ) .AND. ( .NOT. LSAME ( TRANSB , 'T' ) ) ) THEN
 INFO = 2
 ELSE IF ( M .LT. 0 ) THEN
 INFO = 3
 ELSE IF ( N .LT. 0 ) THEN
 INFO = 4
 ELSE IF ( K .LT. 0 ) THEN
 INFO = 5
 ELSE IF ( LDA .LT. MAX ( 1 , NROWA ) ) THEN
 INFO = 8
 ELSE IF ( LDB .LT. MAX ( 1 , NROWB ) ) THEN
 INFO = 10
 ELSE IF ( LDC .LT. MAX ( 1 , M ) ) THEN
 INFO = 13
 END
 IF ( INFO .NE. 0 ) THEN
 CALL XERBLA ( 'DGEMM ' , INFO )
 RETURN
 END
 IF ( ( M .EQ. 0 ) .OR. ( N .EQ. 0 ) .OR. ( ( ( ALPHA .EQ. ZERO ) .OR. ( K .EQ. 0 ) ) .AND. ( BETA .EQ. ONE ) ) ) RETURN
 IF ( ALPHA .EQ. ZERO ) THEN
 IF ( BETA .EQ. ZERO ) THEN
 DO J = 1 , N
 DO I = 1 , M
 C ( I , J ) = ZERO
 end

 end

 ELSE
 DO J = 1 , N
 DO I = 1 , M
 C ( I , J ) = BETA * C ( I , J )
 end

 end

 END
 RETURN
 END
 IF ( NOTB ) THEN
 IF ( NOTA ) THEN
 DO J = 1 , N
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , M
 C ( I , J ) = ZERO
 end

 ELSE IF ( BETA .NE. ONE ) THEN
 DO I = 1 , M
 C ( I , J ) = BETA * C ( I , J )
 end

 END
 DO L = 1 , K
 TEMP = ALPHA * B ( L , J )
 DO I = 1 , M
 C ( I , J ) = C ( I , J ) + TEMP * A ( I , L )
 end

 end

 end

 ELSE
 DO J = 1 , N
 DO I = 1 , M
 TEMP = ZERO
 DO L = 1 , K
 TEMP = TEMP + A ( L , I ) * B ( L , J )
 end

 IF ( BETA .EQ. ZERO ) THEN
 C ( I , J ) = ALPHA * TEMP
 ELSE
 C ( I , J ) = ALPHA * TEMP + BETA * C ( I , J )
 END
 end

 end

 END
 ELSE
 IF ( NOTA ) THEN
 DO J = 1 , N
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , M
 C ( I , J ) = ZERO
 end

 ELSE IF ( BETA .NE. ONE ) THEN
 DO I = 1 , M
 C ( I , J ) = BETA * C ( I , J )
 end

 END
 DO L = 1 , K
 TEMP = ALPHA * B ( J , L )
 DO I = 1 , M
 C ( I , J ) = C ( I , J ) + TEMP * A ( I , L )
 end

 end

 end

 ELSE
 DO J = 1 , N
 DO I = 1 , M
 TEMP = ZERO
 DO L = 1 , K
 TEMP = TEMP + A ( L , I ) * B ( J , L )
 end

 IF ( BETA .EQ. ZERO ) THEN
 C ( I , J ) = ALPHA * TEMP
 ELSE
 C ( I , J ) = ALPHA * TEMP + BETA * C ( I , J )
 END
 end

 end

 END
 END
 RETURN
 END
