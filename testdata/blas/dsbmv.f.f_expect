 SUBROUTINE DSBMV ( UPLO , N , K , ALPHA , A , LDA , X , INCX , BETA , Y , INCY )
 DOUBLE PRECISION ALPHA , BETA
 INTEGER INCX , INCY , K , LDA , N
 CHARACTER UPLO
 DOUBLE PRECISION A ( LDA , * ) , X ( * ) , Y ( * )
 DOUBLE PRECISION ONE , ZERO


 ONE = 1.0D+0
 ZERO = 0.0D+0

 DOUBLE PRECISION TEMP1 , TEMP2
 INTEGER I , INFO , IX , IY , J , JX , JY , KPLUS1 , KX , KY , L
 LOGICAL LSAME
 EXTERNAL LSAME
 EXTERNAL XERBLA
 INTRINSIC MAX , MIN
 INFO = 0
 IF ( .NOT. LSAME ( UPLO , 'U' ) .AND. .NOT. LSAME ( UPLO , 'L' ) ) THEN
 INFO = 1
 ELSE IF ( N .LT. 0 ) THEN
 INFO = 2
 ELSE IF ( K .LT. 0 ) THEN
 INFO = 3
 ELSE IF ( LDA .LT. ( K + 1 ) ) THEN
 INFO = 6
 ELSE IF ( INCX .EQ. 0 ) THEN
 INFO = 8
 ELSE IF ( INCY .EQ. 0 ) THEN
 INFO = 11
 END
 IF ( INFO .NE. 0 ) THEN
 CALL XERBLA ( 'DSBMV ' , INFO )
 RETURN
 END
 IF ( ( N .EQ. 0 ) .OR. ( ( ALPHA .EQ. ZERO ) .AND. ( BETA .EQ. ONE ) ) ) RETURN
 IF ( INCX .GT. 0 ) THEN
 KX = 1
 ELSE
 KX = 1 - ( N - 1 ) * INCX
 END
 IF ( INCY .GT. 0 ) THEN
 KY = 1
 ELSE
 KY = 1 - ( N - 1 ) * INCY
 END
 IF ( BETA .NE. ONE ) THEN
 IF ( INCY .EQ. 1 ) THEN
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , N
 Y ( I ) = ZERO
 end

 ELSE
 DO I = 1 , N
 Y ( I ) = BETA * Y ( I )
 end

 END
 ELSE
 IY = KY
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , N
 Y ( IY ) = ZERO
 IY = IY + INCY
 end

 ELSE
 DO I = 1 , N
 Y ( IY ) = BETA * Y ( IY )
 IY = IY + INCY
 end

 END
 END
 END
 IF ( ALPHA .EQ. ZERO ) RETURN
 IF ( LSAME ( UPLO , 'U' ) ) THEN
 KPLUS1 = K + 1
 IF ( ( INCX .EQ. 1 ) .AND. ( INCY .EQ. 1 ) ) THEN
 DO J = 1 , N
 TEMP1 = ALPHA * X ( J )
 TEMP2 = ZERO
 L = KPLUS1 - J
 DO I = MAX ( 1 , J - K ) , J - 1
 Y ( I ) = Y ( I ) + TEMP1 * A ( L + I , J )
 TEMP2 = TEMP2 + A ( L + I , J ) * X ( I )
 end

 Y ( J ) = Y ( J ) + TEMP1 * A ( KPLUS1 , J ) + ALPHA * TEMP2
 end

 ELSE
 JX = KX
 JY = KY
 DO J = 1 , N
 TEMP1 = ALPHA * X ( JX )
 TEMP2 = ZERO
 IX = KX
 IY = KY
 L = KPLUS1 - J
 DO I = MAX ( 1 , J - K ) , J - 1
 Y ( IY ) = Y ( IY ) + TEMP1 * A ( L + I , J )
 TEMP2 = TEMP2 + A ( L + I , J ) * X ( IX )
 IX = IX + INCX
 IY = IY + INCY
 end

 Y ( JY ) = Y ( JY ) + TEMP1 * A ( KPLUS1 , J ) + ALPHA * TEMP2
 JX = JX + INCX
 JY = JY + INCY
 IF ( J .GT. K ) THEN
 KX = KX + INCX
 KY = KY + INCY
 END
 end

 END
 ELSE
 IF ( ( INCX .EQ. 1 ) .AND. ( INCY .EQ. 1 ) ) THEN
 DO J = 1 , N
 TEMP1 = ALPHA * X ( J )
 TEMP2 = ZERO
 Y ( J ) = Y ( J ) + TEMP1 * A ( 1 , J )
 L = 1 - J
 DO I = J + 1 , MIN ( N , J + K )
 Y ( I ) = Y ( I ) + TEMP1 * A ( L + I , J )
 TEMP2 = TEMP2 + A ( L + I , J ) * X ( I )
 end

 Y ( J ) = Y ( J ) + ALPHA * TEMP2
 end

 ELSE
 JX = KX
 JY = KY
 DO J = 1 , N
 TEMP1 = ALPHA * X ( JX )
 TEMP2 = ZERO
 Y ( JY ) = Y ( JY ) + TEMP1 * A ( 1 , J )
 L = 1 - J
 IX = JX
 IY = JY
 DO I = J + 1 , MIN ( N , J + K )
 IX = IX + INCX
 IY = IY + INCY
 Y ( IY ) = Y ( IY ) + TEMP1 * A ( L + I , J )
 TEMP2 = TEMP2 + A ( L + I , J ) * X ( IX )
 end

 Y ( JY ) = Y ( JY ) + ALPHA * TEMP2
 JX = JX + INCX
 JY = JY + INCY
 end

 END
 END
 RETURN
 END
