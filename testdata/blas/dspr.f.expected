COMMENT             	*> \brief \b DSPR
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE DSPR(UPLO,N,ALPHA,X,INCX,AP)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION ALPHA
NEW_LINE            	

COMMENT             	*       INTEGER INCX,N
NEW_LINE            	

COMMENT             	*       CHARACTER UPLO
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION AP(*),X(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> DSPR    performs the symmetric rank 1 operation
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    A := alpha*x*x**T + A,
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> where alpha is a real scalar, x is an n element vector and A is an
NEW_LINE            	

COMMENT             	*> n by n symmetric matrix, supplied in packed form.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] UPLO
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          UPLO is CHARACTER*1
NEW_LINE            	

COMMENT             	*>           On entry, UPLO specifies whether the upper or lower
NEW_LINE            	

COMMENT             	*>           triangular part of the matrix A is supplied in the packed
NEW_LINE            	

COMMENT             	*>           array AP as follows:
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'U' or 'u'   The upper triangular part of A is
NEW_LINE            	

COMMENT             	*>                                  supplied in AP.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'L' or 'l'   The lower triangular part of A is
NEW_LINE            	

COMMENT             	*>                                  supplied in AP.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, N specifies the order of the matrix A.
NEW_LINE            	

COMMENT             	*>           N must be at least zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] ALPHA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ALPHA is DOUBLE PRECISION.
NEW_LINE            	

COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] X
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          X is DOUBLE PRECISION array, dimension at least
NEW_LINE            	

COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
NEW_LINE            	

COMMENT             	*>           Before entry, the incremented array X must contain the n
NEW_LINE            	

COMMENT             	*>           element vector x.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, INCX specifies the increment for the elements of
NEW_LINE            	

COMMENT             	*>           X. INCX must not be zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] AP
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          AP is DOUBLE PRECISION array, dimension at least
NEW_LINE            	

COMMENT             	*>           ( ( n*( n + 1 ) )/2 ).
NEW_LINE            	

COMMENT             	*>           Before entry with  UPLO = 'U' or 'u', the array AP must
NEW_LINE            	

COMMENT             	*>           contain the upper triangular part of the symmetric matrix
NEW_LINE            	

COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
NEW_LINE            	

COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 )
NEW_LINE            	

COMMENT             	*>           and a( 2, 2 ) respectively, and so on. On exit, the array
NEW_LINE            	

COMMENT             	*>           AP is overwritten by the upper triangular part of the
NEW_LINE            	

COMMENT             	*>           updated matrix.
NEW_LINE            	

COMMENT             	*>           Before entry with UPLO = 'L' or 'l', the array AP must
NEW_LINE            	

COMMENT             	*>           contain the lower triangular part of the symmetric matrix
NEW_LINE            	

COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
NEW_LINE            	

COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 )
NEW_LINE            	

COMMENT             	*>           and a( 3, 1 ) respectively, and so on. On exit, the array
NEW_LINE            	

COMMENT             	*>           AP is overwritten by the lower triangular part of the
NEW_LINE            	

COMMENT             	*>           updated matrix.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup double_blas_level2
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  Level 2 Blas routine.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  -- Written on 22-October-1986.
NEW_LINE            	

COMMENT             	*>     Jack Dongarra, Argonne National Lab.
NEW_LINE            	

COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
NEW_LINE            	

COMMENT             	*>     Sven Hammarling, Nag Central Office.
NEW_LINE            	

COMMENT             	*>     Richard Hanson, Sandia National Labs.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	DSPR
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	AP
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ALPHA
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	N
NEW_LINE            	

CHARACTER           	CHARACTER
IDENT               	UPLO
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	AP
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Parameters ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ZERO
NEW_LINE            	

PARAMETER           	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
FLOAT               	0.0D+0
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	TEMP
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	K
,                   	,
IDENT               	KK
,                   	,
IDENT               	KX
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Functions ..
NEW_LINE            	

LOGICAL             	LOGICAL
IDENT               	LSAME
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	LSAME
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Subroutines ..
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	XERBLA
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Test the input parameters.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	0
NEW_LINE            	

if                  	IF
(                   	(
!                   	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
&&                  	.AND.
!                   	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	1
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	2
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	5
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

CALL                	CALL
IDENT               	XERBLA
(                   	(
STRING              	'DSPR  '
,                   	,
IDENT               	INFO
)                   	)
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Quick return if possible.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
)                   	)
return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Set the start point in X if the increment is not unity.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
<=                  	.LE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	KX
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
!=                  	.NE.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	KX
=                   	=
INT                 	1
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Start the operations. In this version the elements of the array AP
NEW_LINE            	

COMMENT             	*     are accessed sequentially with one pass through AP.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	KK
=                   	=
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  A  when upper triangle is stored in AP.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	K
=                   	=
IDENT               	KK
NEW_LINE            	

DO                  	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
NEW_LINE            	

IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP
NEW_LINE            	

IDENT               	K
=                   	=
IDENT               	K
+                   	+
INT                 	1
NEW_LINE            	

INT                 	10
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
NEW_LINE            	

INT                 	20
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	KX
NEW_LINE            	

DO                  	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	KX
NEW_LINE            	

DO                  	DO
INT                 	30
IDENT               	K
=                   	=
IDENT               	KK
,                   	,
IDENT               	KK
+                   	+
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	TEMP
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

INT                 	30
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
NEW_LINE            	

INT                 	40
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  A  when lower triangle is stored in AP.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	K
=                   	=
IDENT               	KK
NEW_LINE            	

DO                  	DO
INT                 	50
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP
NEW_LINE            	

IDENT               	K
=                   	=
IDENT               	K
+                   	+
INT                 	1
NEW_LINE            	

INT                 	50
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
+                   	+
INT                 	1
NEW_LINE            	

INT                 	60
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	KX
NEW_LINE            	

DO                  	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	JX
NEW_LINE            	

DO                  	DO
INT                 	70
IDENT               	K
=                   	=
IDENT               	KK
,                   	,
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
NEW_LINE            	

IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	TEMP
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

INT                 	70
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
+                   	+
INT                 	1
NEW_LINE            	

INT                 	80
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     End of DSPR  .
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

END                 	END
NEW_LINE            	

