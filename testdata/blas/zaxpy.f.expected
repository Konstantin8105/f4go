COMMENT             	*> \brief \b ZAXPY
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE ZAXPY(N,ZA,ZX,INCX,ZY,INCY)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX*16 ZA
NEW_LINE            	

COMMENT             	*       INTEGER INCX,INCY,N
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX*16 ZX(*),ZY(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    ZAXPY constant times a vector plus a vector.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>         number of elements in input vector(s)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] ZA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ZA is COMPLEX*16
NEW_LINE            	

COMMENT             	*>           On entry, ZA specifies the scalar alpha.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] ZX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ZX is COMPLEX*16 array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>         storage spacing between elements of ZX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] ZY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ZY is COMPLEX*16 array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCY is INTEGER
NEW_LINE            	

COMMENT             	*>         storage spacing between elements of ZY
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup complex16_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>     jack dongarra, 3/11/78.
NEW_LINE            	

COMMENT             	*>     modified 12/3/93, array(1) declarations changed to array(*)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	ZAXPY
(                   	(
IDENT               	N
,                   	,
IDENT               	ZA
,                   	,
IDENT               	ZX
,                   	,
IDENT               	INCX
,                   	,
IDENT               	ZY
,                   	,
IDENT               	INCY
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

COMPLEX             	COMPLEX
*                   	*
INT                 	16
IDENT               	ZA
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

COMPLEX             	COMPLEX
*                   	*
INT                 	16
IDENT               	ZX
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	ZY
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Functions ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	DCABS1
NEW_LINE            	

IDENT               	EXTERNAL
IDENT               	DCABS1
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	N
<=                  	.LE.
INT                 	0
)                   	)
return              	RETURN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DCABS1
(                   	(
IDENT               	ZA
)                   	)
==                  	.EQ.
FLOAT               	0.0d0
)                   	)
return              	RETURN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
&&                  	.AND.
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        code for both increments equal to 1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	ZY
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	ZY
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	ZA
*                   	*
IDENT               	ZX
(                   	(
IDENT               	I
)                   	)
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        code for unequal increments or equal increments
NEW_LINE            	

COMMENT             	*          not equal to 1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	IX
=                   	=
INT                 	1
NEW_LINE            	

IDENT               	IY
=                   	=
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
<                   	.LT.
INT                 	0
)                   	)
IDENT               	IX
=                   	=
(                   	(
-                   	-
IDENT               	N
+                   	+
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
+                   	+
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCY
<                   	.LT.
INT                 	0
)                   	)
IDENT               	IY
=                   	=
(                   	(
-                   	-
IDENT               	N
+                   	+
INT                 	1
)                   	)
*                   	*
IDENT               	INCY
+                   	+
INT                 	1
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	ZY
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	ZY
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	ZA
*                   	*
IDENT               	ZX
(                   	(
IDENT               	IX
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
NEW_LINE            	

