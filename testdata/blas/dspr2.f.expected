COMMENT             	*> \brief \b DSPR2
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE DSPR2(UPLO,N,ALPHA,X,INCX,Y,INCY,AP)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       DOUBLE PRECISION ALPHA
COMMENT             	*       INTEGER INCX,INCY,N
COMMENT             	*       CHARACTER UPLO
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       DOUBLE PRECISION AP(*),X(*),Y(*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> DSPR2  performs the symmetric rank 2 operation
COMMENT             	*>
COMMENT             	*>    A := alpha*x*y**T + alpha*y*x**T + A,
COMMENT             	*>
COMMENT             	*> where alpha is a scalar, x and y are n element vectors and A is an
COMMENT             	*> n by n symmetric matrix, supplied in packed form.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] UPLO
COMMENT             	*> \verbatim
COMMENT             	*>          UPLO is CHARACTER*1
COMMENT             	*>           On entry, UPLO specifies whether the upper or lower
COMMENT             	*>           triangular part of the matrix A is supplied in the packed
COMMENT             	*>           array AP as follows:
COMMENT             	*>
COMMENT             	*>              UPLO = 'U' or 'u'   The upper triangular part of A is
COMMENT             	*>                                  supplied in AP.
COMMENT             	*>
COMMENT             	*>              UPLO = 'L' or 'l'   The lower triangular part of A is
COMMENT             	*>                                  supplied in AP.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry, N specifies the order of the matrix A.
COMMENT             	*>           N must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is DOUBLE PRECISION.
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] X
COMMENT             	*> \verbatim
COMMENT             	*>          X is DOUBLE PRECISION array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
COMMENT             	*>           Before entry, the incremented array X must contain the n
COMMENT             	*>           element vector x.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCX
COMMENT             	*> \verbatim
COMMENT             	*>          INCX is INTEGER
COMMENT             	*>           On entry, INCX specifies the increment for the elements of
COMMENT             	*>           X. INCX must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] Y
COMMENT             	*> \verbatim
COMMENT             	*>          Y is DOUBLE PRECISION array, dimension at least
COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCY ) ).
COMMENT             	*>           Before entry, the incremented array Y must contain the n
COMMENT             	*>           element vector y.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] INCY
COMMENT             	*> \verbatim
COMMENT             	*>          INCY is INTEGER
COMMENT             	*>           On entry, INCY specifies the increment for the elements of
COMMENT             	*>           Y. INCY must not be zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] AP
COMMENT             	*> \verbatim
COMMENT             	*>          AP is DOUBLE PRECISION array, dimension at least
COMMENT             	*>           ( ( n*( n + 1 ) )/2 ).
COMMENT             	*>           Before entry with  UPLO = 'U' or 'u', the array AP must
COMMENT             	*>           contain the upper triangular part of the symmetric matrix
COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 )
COMMENT             	*>           and a( 2, 2 ) respectively, and so on. On exit, the array
COMMENT             	*>           AP is overwritten by the upper triangular part of the
COMMENT             	*>           updated matrix.
COMMENT             	*>           Before entry with UPLO = 'L' or 'l', the array AP must
COMMENT             	*>           contain the lower triangular part of the symmetric matrix
COMMENT             	*>           packed sequentially, column by column, so that AP( 1 )
COMMENT             	*>           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 )
COMMENT             	*>           and a( 3, 1 ) respectively, and so on. On exit, the array
COMMENT             	*>           AP is overwritten by the lower triangular part of the
COMMENT             	*>           updated matrix.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup double_blas_level2
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 2 Blas routine.
COMMENT             	*>
COMMENT             	*>  -- Written on 22-October-1986.
COMMENT             	*>     Jack Dongarra, Argonne National Lab.
COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
COMMENT             	*>     Sven Hammarling, Nag Central Office.
COMMENT             	*>     Richard Hanson, Sandia National Labs.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	DSPR2
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	Y
,                   	,
IDENT               	INCY
,                   	,
IDENT               	AP
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ALPHA
token(98)           	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	UPLO
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	AP
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	Y
(                   	(
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. Parameters ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ZERO
=                   	=
FLOAT               	0.0D+0
)                   	)
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	TEMP1
,                   	,
IDENT               	TEMP2
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	JY
,                   	,
IDENT               	K
,                   	,
IDENT               	KK
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
COMMENT             	*     ..
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
&&                  	.AND.
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	5
else                	ELSE
if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	7
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
token(106)          	THEN
token(105)          	CALL
IDENT               	XERBLA
(                   	(
STRING              	'DSPR2 '
,                   	,
IDENT               	INFO
)                   	)
return              	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
)                   	)
return              	RETURN
COMMENT             	*
COMMENT             	*     Set up the start points in X and Y if the increments are not both
COMMENT             	*     unity.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	INCX
!=                  	.NE.
INT                 	1
)                   	)
||                  	.OR.
(                   	(
IDENT               	INCY
!=                  	.NE.
INT                 	1
)                   	)
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	INCX
>                   	.GT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	KX
=                   	=
INT                 	1
else                	ELSE
IDENT               	KX
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INCY
>                   	.GT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	KY
=                   	=
INT                 	1
else                	ELSE
IDENT               	KY
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCY
token(102)          	END
if                  	IF
IDENT               	JX
=                   	=
IDENT               	KX
IDENT               	JY
=                   	=
IDENT               	KY
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations. In this version the elements of the array AP
COMMENT             	*     are accessed sequentially with one pass through AP.
COMMENT             	*
IDENT               	KK
=                   	=
INT                 	1
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
token(106)          	THEN
COMMENT             	*
COMMENT             	*        Form  A  when upper triangle is stored in AP.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
&&                  	.AND.
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	K
=                   	=
IDENT               	KK
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP2
IDENT               	K
=                   	=
IDENT               	K
+                   	+
INT                 	1
INT                 	10
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
INT                 	20
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	IX
=                   	=
IDENT               	KX
IDENT               	IY
=                   	=
IDENT               	KY
token(103)          	DO
INT                 	30
IDENT               	K
=                   	=
IDENT               	KK
,                   	,
IDENT               	KK
+                   	+
IDENT               	J
-                   	-
INT                 	1
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
*                   	*
IDENT               	TEMP2
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
INT                 	30
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	J
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  A  when lower triangle is stored in AP.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
&&                  	.AND.
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
(                   	(
IDENT               	X
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
IDENT               	K
=                   	=
IDENT               	KK
token(103)          	DO
INT                 	50
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	TEMP2
IDENT               	K
=                   	=
IDENT               	K
+                   	+
INT                 	1
INT                 	50
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
+                   	+
INT                 	1
INT                 	60
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
(                   	(
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
||                  	.OR.
(                   	(
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
IDENT               	TEMP2
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
IDENT               	IX
=                   	=
IDENT               	JX
IDENT               	IY
=                   	=
IDENT               	JY
token(103)          	DO
INT                 	70
IDENT               	K
=                   	=
IDENT               	KK
,                   	,
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
=                   	=
IDENT               	AP
(                   	(
IDENT               	K
)                   	)
+                   	+
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	TEMP1
+                   	+
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
*                   	*
IDENT               	TEMP2
IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
INT                 	70
continue            	CONTINUE
token(102)          	END
if                  	IF
IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
IDENT               	KK
=                   	=
IDENT               	KK
+                   	+
IDENT               	N
-                   	-
IDENT               	J
+                   	+
INT                 	1
INT                 	80
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
return              	RETURN
COMMENT             	*
COMMENT             	*     End of DSPR2 .
COMMENT             	*
token(102)          	END
