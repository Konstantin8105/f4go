COMMENT             	*> \brief \b ZHERK
COMMENT             	*
COMMENT             	*  =========== DOCUMENTATION ===========
COMMENT             	*
COMMENT             	* Online html documentation available at
COMMENT             	*            http://www.netlib.org/lapack/explore-html/
COMMENT             	*
COMMENT             	*  Definition:
COMMENT             	*  ===========
COMMENT             	*
COMMENT             	*       SUBROUTINE ZHERK(UPLO,TRANS,N,K,ALPHA,A,LDA,BETA,C,LDC)
COMMENT             	*
COMMENT             	*       .. Scalar Arguments ..
COMMENT             	*       DOUBLE PRECISION ALPHA,BETA
COMMENT             	*       INTEGER K,LDA,LDC,N
COMMENT             	*       CHARACTER TRANS,UPLO
COMMENT             	*       ..
COMMENT             	*       .. Array Arguments ..
COMMENT             	*       COMPLEX*16 A(LDA,*),C(LDC,*)
COMMENT             	*       ..
COMMENT             	*
COMMENT             	*
COMMENT             	*> \par Purpose:
COMMENT             	*  =============
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*> ZHERK  performs one of the hermitian rank k operations
COMMENT             	*>
COMMENT             	*>    C := alpha*A*A**H + beta*C,
COMMENT             	*>
COMMENT             	*> or
COMMENT             	*>
COMMENT             	*>    C := alpha*A**H*A + beta*C,
COMMENT             	*>
COMMENT             	*> where  alpha and beta  are  real scalars,  C is an  n by n  hermitian
COMMENT             	*> matrix and  A  is an  n by k  matrix in the  first case and a  k by n
COMMENT             	*> matrix in the second case.
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Arguments:
COMMENT             	*  ==========
COMMENT             	*
COMMENT             	*> \param[in] UPLO
COMMENT             	*> \verbatim
COMMENT             	*>          UPLO is CHARACTER*1
COMMENT             	*>           On  entry,   UPLO  specifies  whether  the  upper  or  lower
COMMENT             	*>           triangular  part  of the  array  C  is to be  referenced  as
COMMENT             	*>           follows:
COMMENT             	*>
COMMENT             	*>              UPLO = 'U' or 'u'   Only the  upper triangular part of  C
COMMENT             	*>                                  is to be referenced.
COMMENT             	*>
COMMENT             	*>              UPLO = 'L' or 'l'   Only the  lower triangular part of  C
COMMENT             	*>                                  is to be referenced.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] TRANS
COMMENT             	*> \verbatim
COMMENT             	*>          TRANS is CHARACTER*1
COMMENT             	*>           On entry,  TRANS  specifies the operation to be performed as
COMMENT             	*>           follows:
COMMENT             	*>
COMMENT             	*>              TRANS = 'N' or 'n'   C := alpha*A*A**H + beta*C.
COMMENT             	*>
COMMENT             	*>              TRANS = 'C' or 'c'   C := alpha*A**H*A + beta*C.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] N
COMMENT             	*> \verbatim
COMMENT             	*>          N is INTEGER
COMMENT             	*>           On entry,  N specifies the order of the matrix C.  N must be
COMMENT             	*>           at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] K
COMMENT             	*> \verbatim
COMMENT             	*>          K is INTEGER
COMMENT             	*>           On entry with  TRANS = 'N' or 'n',  K  specifies  the number
COMMENT             	*>           of  columns   of  the   matrix   A,   and  on   entry   with
COMMENT             	*>           TRANS = 'C' or 'c',  K  specifies  the number of rows of the
COMMENT             	*>           matrix A.  K must be at least zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] ALPHA
COMMENT             	*> \verbatim
COMMENT             	*>          ALPHA is DOUBLE PRECISION .
COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] A
COMMENT             	*> \verbatim
COMMENT             	*>          A is COMPLEX*16 array, dimension ( LDA, ka ), where ka is
COMMENT             	*>           k  when  TRANS = 'N' or 'n',  and is  n  otherwise.
COMMENT             	*>           Before entry with  TRANS = 'N' or 'n',  the  leading  n by k
COMMENT             	*>           part of the array  A  must contain the matrix  A,  otherwise
COMMENT             	*>           the leading  k by n  part of the array  A  must contain  the
COMMENT             	*>           matrix A.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDA
COMMENT             	*> \verbatim
COMMENT             	*>          LDA is INTEGER
COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
COMMENT             	*>           in  the  calling  (sub)  program.   When  TRANS = 'N' or 'n'
COMMENT             	*>           then  LDA must be at least  max( 1, n ), otherwise  LDA must
COMMENT             	*>           be at least  max( 1, k ).
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] BETA
COMMENT             	*> \verbatim
COMMENT             	*>          BETA is DOUBLE PRECISION.
COMMENT             	*>           On entry, BETA specifies the scalar beta.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in,out] C
COMMENT             	*> \verbatim
COMMENT             	*>          C is COMPLEX*16 array, dimension ( LDC, N )
COMMENT             	*>           Before entry  with  UPLO = 'U' or 'u',  the leading  n by n
COMMENT             	*>           upper triangular part of the array C must contain the upper
COMMENT             	*>           triangular part  of the  hermitian matrix  and the strictly
COMMENT             	*>           lower triangular part of C is not referenced.  On exit, the
COMMENT             	*>           upper triangular part of the array  C is overwritten by the
COMMENT             	*>           upper triangular part of the updated matrix.
COMMENT             	*>           Before entry  with  UPLO = 'L' or 'l',  the leading  n by n
COMMENT             	*>           lower triangular part of the array C must contain the lower
COMMENT             	*>           triangular part  of the  hermitian matrix  and the strictly
COMMENT             	*>           upper triangular part of C is not referenced.  On exit, the
COMMENT             	*>           lower triangular part of the array  C is overwritten by the
COMMENT             	*>           lower triangular part of the updated matrix.
COMMENT             	*>           Note that the imaginary parts of the diagonal elements need
COMMENT             	*>           not be set,  they are assumed to be zero,  and on exit they
COMMENT             	*>           are set to zero.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*> \param[in] LDC
COMMENT             	*> \verbatim
COMMENT             	*>          LDC is INTEGER
COMMENT             	*>           On entry, LDC specifies the first dimension of C as declared
COMMENT             	*>           in  the  calling  (sub)  program.   LDC  must  be  at  least
COMMENT             	*>           max( 1, n ).
COMMENT             	*> \endverbatim
COMMENT             	*
COMMENT             	*  Authors:
COMMENT             	*  ========
COMMENT             	*
COMMENT             	*> \author Univ. of Tennessee
COMMENT             	*> \author Univ. of California Berkeley
COMMENT             	*> \author Univ. of Colorado Denver
COMMENT             	*> \author NAG Ltd.
COMMENT             	*
COMMENT             	*> \date December 2016
COMMENT             	*
COMMENT             	*> \ingroup complex16_blas_level3
COMMENT             	*
COMMENT             	*> \par Further Details:
COMMENT             	*  =====================
COMMENT             	*>
COMMENT             	*> \verbatim
COMMENT             	*>
COMMENT             	*>  Level 3 Blas routine.
COMMENT             	*>
COMMENT             	*>  -- Written on 8-February-1989.
COMMENT             	*>     Jack Dongarra, Argonne National Laboratory.
COMMENT             	*>     Iain Duff, AERE Harwell.
COMMENT             	*>     Jeremy Du Croz, Numerical Algorithms Group Ltd.
COMMENT             	*>     Sven Hammarling, Numerical Algorithms Group Ltd.
COMMENT             	*>
COMMENT             	*>  -- Modified 8-Nov-93 to set C(J,J) to DBLE( C(J,J) ) when BETA = 1.
COMMENT             	*>     Ed Anderson, Cray Research Inc.
COMMENT             	*> \endverbatim
COMMENT             	*>
COMMENT             	*  =====================================================================
token(96)           	SUBROUTINE
IDENT               	ZHERK
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	TRANS
,                   	,
IDENT               	N
,                   	,
IDENT               	K
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	BETA
,                   	,
IDENT               	C
,                   	,
IDENT               	LDC
)                   	)
COMMENT             	*
COMMENT             	*  -- Reference BLAS level3 routine (version 3.7.0) --
COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
COMMENT             	*     December 2016
COMMENT             	*
COMMENT             	*     .. Scalar Arguments ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ALPHA
,                   	,
IDENT               	BETA
token(98)           	INTEGER
IDENT               	K
,                   	,
IDENT               	LDA
,                   	,
IDENT               	LDC
,                   	,
IDENT               	N
IDENT               	CHARACTER
IDENT               	TRANS
,                   	,
IDENT               	UPLO
COMMENT             	*     ..
COMMENT             	*     .. Array Arguments ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	C
(                   	(
IDENT               	LDC
,                   	,
*                   	*
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*  =====================================================================
COMMENT             	*
COMMENT             	*     .. External Functions ..
IDENT               	LOGICAL
IDENT               	LSAME
IDENT               	EXTERNAL
IDENT               	LSAME
COMMENT             	*     ..
COMMENT             	*     .. External Subroutines ..
IDENT               	EXTERNAL
IDENT               	XERBLA
COMMENT             	*     ..
COMMENT             	*     .. Intrinsic Functions ..
IDENT               	INTRINSIC
IDENT               	DBLE
,                   	,
IDENT               	DCMPLX
,                   	,
IDENT               	DCONJG
,                   	,
IDENT               	MAX
COMMENT             	*     ..
COMMENT             	*     .. Local Scalars ..
IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	TEMP
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	RTEMP
token(98)           	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	J
,                   	,
IDENT               	L
,                   	,
IDENT               	NROWA
IDENT               	LOGICAL
IDENT               	UPPER
COMMENT             	*     ..
COMMENT             	*     .. Parameters ..
IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ONE
,                   	,
IDENT               	ZERO
IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
FLOAT               	1.0D+0
,                   	,
IDENT               	ZERO
=                   	=
FLOAT               	0.0D+0
)                   	)
COMMENT             	*     ..
COMMENT             	*
COMMENT             	*     Test the input parameters.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
IDENT               	NROWA
=                   	=
IDENT               	N
else                	ELSE
IDENT               	NROWA
=                   	=
IDENT               	K
token(102)          	END
if                  	IF
IDENT               	UPPER
=                   	=
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
COMMENT             	*
IDENT               	INFO
=                   	=
INT                 	0
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	UPPER
)                   	)
&&                  	.AND.
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	1
else                	ELSE
if                  	IF
(                   	(
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
&&                  	.AND.
+                   	+
(                   	(
!=                  	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'C'
)                   	)
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	2
else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	3
else                	ELSE
if                  	IF
(                   	(
IDENT               	K
<                   	.LT.
INT                 	0
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	4
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	NROWA
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	7
else                	ELSE
if                  	IF
(                   	(
IDENT               	LDC
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	N
)                   	)
)                   	)
token(106)          	THEN
IDENT               	INFO
=                   	=
INT                 	10
token(102)          	END
if                  	IF
if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
token(106)          	THEN
token(105)          	CALL
IDENT               	XERBLA
(                   	(
STRING              	'ZHERK '
,                   	,
IDENT               	INFO
)                   	)
return              	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Quick return if possible.
COMMENT             	*
if                  	IF
(                   	(
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
||                  	.OR.
+                   	+
(                   	(
IDENT               	K
==                  	.EQ.
INT                 	0
)                   	)
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
return              	RETURN
COMMENT             	*
COMMENT             	*     And when  alpha.eq.zero.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
token(106)          	THEN
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	20
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	10
continue            	CONTINUE
INT                 	20
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	40
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	30
continue            	CONTINUE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
INT                 	40
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	50
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	50
continue            	CONTINUE
INT                 	60
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	70
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	70
continue            	CONTINUE
INT                 	80
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
return              	RETURN
token(102)          	END
if                  	IF
COMMENT             	*
COMMENT             	*     Start the operations.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	TRANS
,                   	,
STRING              	'N'
)                   	)
)                   	)
token(106)          	THEN
COMMENT             	*
COMMENT             	*        Form  C := alpha*A*A**H + beta*C.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	130
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	90
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	90
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	100
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	100
continue            	CONTINUE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
else                	ELSE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	120
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
if                  	IF
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	DCMPLX
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
token(103)          	DO
INT                 	110
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
INT                 	110
continue            	CONTINUE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
)                   	)
token(102)          	END
if                  	IF
INT                 	120
continue            	CONTINUE
INT                 	130
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	180
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	140
IDENT               	I
=                   	=
IDENT               	J
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ZERO
INT                 	140
continue            	CONTINUE
else                	ELSE
if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
token(106)          	THEN
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(103)          	DO
INT                 	150
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
INT                 	150
continue            	CONTINUE
else                	ELSE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	170
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
if                  	IF
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
!=                  	.NE.
IDENT               	DCMPLX
(                   	(
IDENT               	ZERO
)                   	)
)                   	)
token(106)          	THEN
IDENT               	TEMP
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	L
)                   	)
)                   	)
token(103)          	DO
INT                 	160
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	L
)                   	)
INT                 	160
continue            	CONTINUE
token(102)          	END
if                  	IF
INT                 	170
continue            	CONTINUE
INT                 	180
continue            	CONTINUE
token(102)          	END
if                  	IF
else                	ELSE
COMMENT             	*
COMMENT             	*        Form  C := alpha*A**H*A + beta*C.
COMMENT             	*
if                  	IF
(                   	(
IDENT               	UPPER
)                   	)
token(106)          	THEN
token(103)          	DO
INT                 	220
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
token(103)          	DO
INT                 	200
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	190
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	190
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	200
continue            	CONTINUE
IDENT               	RTEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	210
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	RTEMP
=                   	=
IDENT               	RTEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	210
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	RTEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	RTEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(102)          	END
if                  	IF
INT                 	220
continue            	CONTINUE
else                	ELSE
token(103)          	DO
INT                 	260
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
IDENT               	RTEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	230
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	RTEMP
=                   	=
IDENT               	RTEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	230
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	RTEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	RTEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	C
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
)                   	)
token(102)          	END
if                  	IF
token(103)          	DO
INT                 	250
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
IDENT               	TEMP
=                   	=
IDENT               	ZERO
token(103)          	DO
INT                 	240
IDENT               	L
=                   	=
INT                 	1
,                   	,
IDENT               	K
IDENT               	TEMP
=                   	=
IDENT               	TEMP
+                   	+
IDENT               	DCONJG
(                   	(
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	A
(                   	(
IDENT               	L
,                   	,
IDENT               	J
)                   	)
INT                 	240
continue            	CONTINUE
if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
token(106)          	THEN
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
else                	ELSE
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	TEMP
+                   	+
IDENT               	BETA
*                   	*
IDENT               	C
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
token(102)          	END
if                  	IF
INT                 	250
continue            	CONTINUE
INT                 	260
continue            	CONTINUE
token(102)          	END
if                  	IF
token(102)          	END
if                  	IF
COMMENT             	*
return              	RETURN
COMMENT             	*
COMMENT             	*     End of ZHERK .
COMMENT             	*
token(102)          	END
