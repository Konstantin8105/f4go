COMMENT             	*> \brief \b SSYMV
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       SUBROUTINE SSYMV(UPLO,N,ALPHA,A,LDA,X,INCX,BETA,Y,INCY)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       REAL ALPHA,BETA
NEW_LINE            	

COMMENT             	*       INTEGER INCX,INCY,LDA,N
NEW_LINE            	

COMMENT             	*       CHARACTER UPLO
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       REAL A(LDA,*),X(*),Y(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> SSYMV  performs the matrix-vector  operation
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    y := alpha*A*x + beta*y,
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> where alpha and beta are scalars, x and y are n element vectors and
NEW_LINE            	

COMMENT             	*> A is an n by n symmetric matrix.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] UPLO
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          UPLO is CHARACTER*1
NEW_LINE            	

COMMENT             	*>           On entry, UPLO specifies whether the upper or lower
NEW_LINE            	

COMMENT             	*>           triangular part of the array A is to be referenced as
NEW_LINE            	

COMMENT             	*>           follows:
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'U' or 'u'   Only the upper triangular part of A
NEW_LINE            	

COMMENT             	*>                                  is to be referenced.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>              UPLO = 'L' or 'l'   Only the lower triangular part of A
NEW_LINE            	

COMMENT             	*>                                  is to be referenced.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, N specifies the order of the matrix A.
NEW_LINE            	

COMMENT             	*>           N must be at least zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] ALPHA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          ALPHA is REAL
NEW_LINE            	

COMMENT             	*>           On entry, ALPHA specifies the scalar alpha.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] A
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          A is REAL array, dimension ( LDA, N )
NEW_LINE            	

COMMENT             	*>           Before entry with  UPLO = 'U' or 'u', the leading n by n
NEW_LINE            	

COMMENT             	*>           upper triangular part of the array A must contain the upper
NEW_LINE            	

COMMENT             	*>           triangular part of the symmetric matrix and the strictly
NEW_LINE            	

COMMENT             	*>           lower triangular part of A is not referenced.
NEW_LINE            	

COMMENT             	*>           Before entry with UPLO = 'L' or 'l', the leading n by n
NEW_LINE            	

COMMENT             	*>           lower triangular part of the array A must contain the lower
NEW_LINE            	

COMMENT             	*>           triangular part of the symmetric matrix and the strictly
NEW_LINE            	

COMMENT             	*>           upper triangular part of A is not referenced.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] LDA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          LDA is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, LDA specifies the first dimension of A as declared
NEW_LINE            	

COMMENT             	*>           in the calling (sub) program. LDA must be at least
NEW_LINE            	

COMMENT             	*>           max( 1, n ).
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] X
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          X is REAL array, dimension at least
NEW_LINE            	

COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCX ) ).
NEW_LINE            	

COMMENT             	*>           Before entry, the incremented array X must contain the n
NEW_LINE            	

COMMENT             	*>           element vector x.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, INCX specifies the increment for the elements of
NEW_LINE            	

COMMENT             	*>           X. INCX must not be zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] BETA
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          BETA is REAL
NEW_LINE            	

COMMENT             	*>           On entry, BETA specifies the scalar beta. When BETA is
NEW_LINE            	

COMMENT             	*>           supplied as zero then Y need not be set on input.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in,out] Y
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          Y is REAL array, dimension at least
NEW_LINE            	

COMMENT             	*>           ( 1 + ( n - 1 )*abs( INCY ) ).
NEW_LINE            	

COMMENT             	*>           Before entry, the incremented array Y must contain the n
NEW_LINE            	

COMMENT             	*>           element vector y. On exit, Y is overwritten by the updated
NEW_LINE            	

COMMENT             	*>           vector y.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCY is INTEGER
NEW_LINE            	

COMMENT             	*>           On entry, INCY specifies the increment for the elements of
NEW_LINE            	

COMMENT             	*>           Y. INCY must not be zero.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup single_blas_level2
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  Level 2 Blas routine.
NEW_LINE            	

COMMENT             	*>  The vector and matrix arguments are not referenced when N = 0, or M = 0
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  -- Written on 22-October-1986.
NEW_LINE            	

COMMENT             	*>     Jack Dongarra, Argonne National Lab.
NEW_LINE            	

COMMENT             	*>     Jeremy Du Croz, Nag Central Office.
NEW_LINE            	

COMMENT             	*>     Sven Hammarling, Nag Central Office.
NEW_LINE            	

COMMENT             	*>     Richard Hanson, Sandia National Labs.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

SUBROUTINE          	SUBROUTINE
IDENT               	SSYMV
(                   	(
IDENT               	UPLO
,                   	,
IDENT               	N
,                   	,
IDENT               	ALPHA
,                   	,
IDENT               	A
,                   	,
IDENT               	LDA
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
,                   	,
IDENT               	BETA
,                   	,
IDENT               	Y
,                   	,
IDENT               	INCY
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level2 routine (version 3.7.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     December 2016
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

REAL                	REAL
IDENT               	ALPHA
,                   	,
IDENT               	BETA
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	LDA
,                   	,
IDENT               	N
NEW_LINE            	

CHARACTER           	CHARACTER
IDENT               	UPLO
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

REAL                	REAL
IDENT               	A
(                   	(
IDENT               	LDA
,                   	,
*                   	*
)                   	)
,                   	,
IDENT               	X
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	Y
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Parameters ..
NEW_LINE            	

REAL                	REAL
IDENT               	ONE
,                   	,
IDENT               	ZERO
NEW_LINE            	

PARAMETER           	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
FLOAT               	1.0E+0
,                   	,
IDENT               	ZERO
=                   	=
FLOAT               	0.0E+0
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

REAL                	REAL
IDENT               	TEMP1
,                   	,
IDENT               	TEMP2
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	INFO
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
,                   	,
IDENT               	J
,                   	,
IDENT               	JX
,                   	,
IDENT               	JY
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Functions ..
NEW_LINE            	

LOGICAL             	LOGICAL
IDENT               	LSAME
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	LSAME
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. External Subroutines ..
NEW_LINE            	

EXTERNAL            	EXTERNAL
IDENT               	XERBLA
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

IDENT               	INTRINSIC
IDENT               	MAX
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Test the input parameters.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	0
NEW_LINE            	

if                  	IF
(                   	(
!                   	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
&&                  	.AND.
!                   	.NOT.
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'L'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	1
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	2
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	LDA
<                   	.LT.
IDENT               	MAX
(                   	(
INT                 	1
,                   	,
IDENT               	N
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	5
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	7
NEW_LINE            	

else                	ELSE
if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	INFO
=                   	=
INT                 	10
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INFO
!=                  	.NE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

CALL                	CALL
IDENT               	XERBLA
(                   	(
STRING              	'SSYMV '
,                   	,
IDENT               	INFO
)                   	)
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Quick return if possible.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	N
==                  	.EQ.
INT                 	0
)                   	)
||                  	.OR.
(                   	(
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
&&                  	.AND.
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ONE
)                   	)
)                   	)
)                   	)
return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Set up the start points in  X  and  Y.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
>                   	.GT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	KX
=                   	=
INT                 	1
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	KX
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCY
>                   	.GT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	KY
=                   	=
INT                 	1
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	KY
=                   	=
INT                 	1
-                   	-
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCY
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Start the operations. In this version the elements of A are
NEW_LINE            	

COMMENT             	*     accessed sequentially with one pass through the triangular part
NEW_LINE            	

COMMENT             	*     of A.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     First form  y := beta*y.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
!=                  	.NE.
IDENT               	ONE
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	10
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

INT                 	10
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	20
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
NEW_LINE            	

INT                 	20
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	KY
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	BETA
==                  	.EQ.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	30
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

INT                 	30
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

DO                  	DO
INT                 	40
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	BETA
*                   	*
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

INT                 	40
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	ALPHA
==                  	.EQ.
IDENT               	ZERO
)                   	)
return              	RETURN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	LSAME
(                   	(
IDENT               	UPLO
,                   	,
STRING              	'U'
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  y  when A is stored in upper triangle.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
&&                  	.AND.
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	60
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

DO                  	DO
INT                 	50
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
NEW_LINE            	

INT                 	50
continue            	CONTINUE
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
NEW_LINE            	

INT                 	60
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	KX
NEW_LINE            	

IDENT               	JY
=                   	=
IDENT               	KY
NEW_LINE            	

DO                  	DO
INT                 	80
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	KX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	KY
NEW_LINE            	

DO                  	DO
INT                 	70
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	J
-                   	-
INT                 	1
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

INT                 	70
continue            	CONTINUE
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
NEW_LINE            	

INT                 	80
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        Form  y  when A is stored in lower triangle.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

if                  	IF
(                   	(
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
)                   	)
&&                  	.AND.
(                   	(
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
INT                 	100
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

DO                  	DO
INT                 	90
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	I
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	I
)                   	)
NEW_LINE            	

INT                 	90
continue            	CONTINUE
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	J
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	J
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
NEW_LINE            	

INT                 	100
continue            	CONTINUE
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	KX
NEW_LINE            	

IDENT               	JY
=                   	=
IDENT               	KY
NEW_LINE            	

DO                  	DO
INT                 	120
IDENT               	J
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	TEMP1
=                   	=
IDENT               	ALPHA
*                   	*
IDENT               	X
(                   	(
IDENT               	JX
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	J
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	JX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	JY
NEW_LINE            	

DO                  	DO
INT                 	110
IDENT               	I
=                   	=
IDENT               	J
+                   	+
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	IY
)                   	)
+                   	+
IDENT               	TEMP1
*                   	*
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
NEW_LINE            	

IDENT               	TEMP2
=                   	=
IDENT               	TEMP2
+                   	+
IDENT               	A
(                   	(
IDENT               	I
,                   	,
IDENT               	J
)                   	)
*                   	*
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
NEW_LINE            	

INT                 	110
continue            	CONTINUE
NEW_LINE            	

IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
=                   	=
IDENT               	Y
(                   	(
IDENT               	JY
)                   	)
+                   	+
IDENT               	ALPHA
*                   	*
IDENT               	TEMP2
NEW_LINE            	

IDENT               	JX
=                   	=
IDENT               	JX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	JY
=                   	=
IDENT               	JY
+                   	+
IDENT               	INCY
NEW_LINE            	

INT                 	120
continue            	CONTINUE
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     End of SSYMV .
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

END                 	END
NEW_LINE            	

