COMMENT             	*> \brief \b DDOT
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION FUNCTION DDOT(N,DX,INCX,DY,INCY)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       INTEGER INCX,INCY,N
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION DX(*),DY(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    DDOT forms the dot product of two vectors.
NEW_LINE            	

COMMENT             	*>    uses unrolled loops for increments equal to one.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>         number of elements in input vector(s)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] DX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>         storage spacing between elements of DX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] DY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          DY is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCY ) )
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCY is INTEGER
NEW_LINE            	

COMMENT             	*>         storage spacing between elements of DY
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup double_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>     jack dongarra, linpack, 3/11/78.
NEW_LINE            	

COMMENT             	*>     modified 12/3/93, array(1) declarations changed to array(*)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

REAL                	DOUBLE
IDENT               	PRECISION
FUNCTION            	FUNCTION
IDENT               	DDOT
(                   	(
IDENT               	N
,                   	,
IDENT               	DX
,                   	,
IDENT               	INCX
,                   	,
IDENT               	DY
,                   	,
IDENT               	INCY
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

REAL                	DOUBLE
IDENT               	PRECISION
IDENT               	DX
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	DY
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

REAL                	DOUBLE
IDENT               	PRECISION
IDENT               	DTEMP
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	IX
,                   	,
IDENT               	IY
,                   	,
IDENT               	M
,                   	,
IDENT               	MP1
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

INTRINSIC           	INTRINSIC
IDENT               	MOD
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

IDENT               	DDOT
=                   	=
FLOAT               	0.0d0
NEW_LINE            	

IDENT               	DTEMP
=                   	=
FLOAT               	0.0d0
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	N
<=                  	.LE.
INT                 	0
)                   	)
return              	RETURN
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
INT                 	1
&&                  	.AND.
IDENT               	INCY
==                  	.EQ.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        code for both increments equal to 1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        clean-up loop
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	M
=                   	=
IDENT               	MOD
(                   	(
IDENT               	N
,                   	,
INT                 	5
)                   	)
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	M
!=                  	.NE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	M
NEW_LINE            	

IDENT               	DTEMP
=                   	=
IDENT               	DTEMP
+                   	+
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
)                   	)
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	5
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	DDOT
=                   	=
IDENT               	DTEMP
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	MP1
=                   	=
IDENT               	M
+                   	+
INT                 	1
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
IDENT               	MP1
,                   	,
IDENT               	N
,                   	,
INT                 	5
NEW_LINE            	

IDENT               	DTEMP
=                   	=
IDENT               	DTEMP
+                   	+
IDENT               	DX
(                   	(
IDENT               	I
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
)                   	)
+                   	+
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	1
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
+                   	+
INT                 	1
)                   	)
+                   	+
NEW_LINE            	

IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	2
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
+                   	+
INT                 	2
)                   	)
+                   	+
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	3
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
+                   	+
INT                 	3
)                   	)
+                   	+
IDENT               	DX
(                   	(
IDENT               	I
+                   	+
INT                 	4
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	I
+                   	+
INT                 	4
)                   	)
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*        code for unequal increments or equal increments
NEW_LINE            	

COMMENT             	*          not equal to 1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	IX
=                   	=
INT                 	1
NEW_LINE            	

IDENT               	IY
=                   	=
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
<                   	.LT.
INT                 	0
)                   	)
IDENT               	IX
=                   	=
(                   	(
-                   	-
IDENT               	N
+                   	+
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
+                   	+
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCY
<                   	.LT.
INT                 	0
)                   	)
IDENT               	IY
=                   	=
(                   	(
-                   	-
IDENT               	N
+                   	+
INT                 	1
)                   	)
*                   	*
IDENT               	INCY
+                   	+
INT                 	1
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	DTEMP
=                   	=
IDENT               	DTEMP
+                   	+
IDENT               	DX
(                   	(
IDENT               	IX
)                   	)
*                   	*
IDENT               	DY
(                   	(
IDENT               	IY
)                   	)
NEW_LINE            	

IDENT               	IX
=                   	=
IDENT               	IX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	IY
=                   	=
IDENT               	IY
+                   	+
IDENT               	INCY
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	DDOT
=                   	=
IDENT               	DTEMP
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
NEW_LINE            	

