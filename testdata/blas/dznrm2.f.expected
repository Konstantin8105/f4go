COMMENT             	*> \brief \b DZNRM2
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION FUNCTION DZNRM2(N,X,INCX)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       INTEGER INCX,N
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       COMPLEX*16 X(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> DZNRM2 returns the euclidean norm of a vector via the function
NEW_LINE            	

COMMENT             	*> name, so that
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    DZNRM2 := sqrt( x**H*x )
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>         number of elements in input vector(s)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] X
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          X is COMPLEX*16 array, dimension (N)
NEW_LINE            	

COMMENT             	*>         complex vector with N elements
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>         storage spacing between elements of X
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup double_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>  -- This version written on 25-October-1982.
NEW_LINE            	

COMMENT             	*>     Modified on 14-October-1993 to inline the call to ZLASSQ.
NEW_LINE            	

COMMENT             	*>     Sven Hammarling, Nag Ltd.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
FUNCTION            	FUNCTION
IDENT               	DZNRM2
(                   	(
IDENT               	N
,                   	,
IDENT               	X
,                   	,
IDENT               	INCX
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	N
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

IDENT               	COMPLEX
*                   	*
INT                 	16
IDENT               	X
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Parameters ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	ONE
,                   	,
IDENT               	ZERO
NEW_LINE            	

IDENT               	PARAMETER
(                   	(
IDENT               	ONE
=                   	=
FLOAT               	1.0D+0
,                   	,
IDENT               	ZERO
=                   	=
FLOAT               	0.0D+0
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

IDENT               	DOUBLE
IDENT               	PRECISION
IDENT               	NORM
,                   	,
IDENT               	SCALE
,                   	,
IDENT               	SSQ
,                   	,
IDENT               	TEMP
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	IX
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

IDENT               	INTRINSIC
IDENT               	ABS
,                   	,
IDENT               	DBLE
,                   	,
IDENT               	DIMAG
,                   	,
IDENT               	SQRT
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	N
<                   	.LT.
INT                 	1
||                  	.OR.
IDENT               	INCX
<                   	.LT.
INT                 	1
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	NORM
=                   	=
IDENT               	ZERO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	SCALE
=                   	=
IDENT               	ZERO
NEW_LINE            	

IDENT               	SSQ
=                   	=
IDENT               	ONE
NEW_LINE            	

COMMENT             	*        The following loop is equivalent to this call to the LAPACK
NEW_LINE            	

COMMENT             	*        auxiliary routine:
NEW_LINE            	

COMMENT             	*        CALL ZLASSQ( N, X, INCX, SCALE, SSQ )
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

DO                  	DO
INT                 	10
IDENT               	IX
=                   	=
INT                 	1
,                   	,
INT                 	1
+                   	+
(                   	(
IDENT               	N
-                   	-
INT                 	1
)                   	)
*                   	*
IDENT               	INCX
,                   	,
IDENT               	INCX
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DBLE
(                   	(
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ABS
(                   	(
IDENT               	DBLE
(                   	(
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
)                   	)
)                   	)
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	SCALE
<                   	.LT.
IDENT               	TEMP
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	SSQ
=                   	=
IDENT               	ONE
+                   	+
IDENT               	SSQ
*                   	*
(                   	(
IDENT               	SCALE
/                   	/
IDENT               	TEMP
)                   	)
                    	**
INT                 	2
NEW_LINE            	

IDENT               	SCALE
=                   	=
IDENT               	TEMP
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	SSQ
=                   	=
IDENT               	SSQ
+                   	+
(                   	(
IDENT               	TEMP
/                   	/
IDENT               	SCALE
)                   	)
                    	**
INT                 	2
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	DIMAG
(                   	(
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
)                   	)
!=                  	.NE.
IDENT               	ZERO
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	TEMP
=                   	=
IDENT               	ABS
(                   	(
IDENT               	DIMAG
(                   	(
IDENT               	X
(                   	(
IDENT               	IX
)                   	)
)                   	)
)                   	)
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	SCALE
<                   	.LT.
IDENT               	TEMP
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	SSQ
=                   	=
IDENT               	ONE
+                   	+
IDENT               	SSQ
*                   	*
(                   	(
IDENT               	SCALE
/                   	/
IDENT               	TEMP
)                   	)
                    	**
INT                 	2
NEW_LINE            	

IDENT               	SCALE
=                   	=
IDENT               	TEMP
NEW_LINE            	

else                	ELSE
NEW_LINE            	

IDENT               	SSQ
=                   	=
IDENT               	SSQ
+                   	+
(                   	(
IDENT               	TEMP
/                   	/
IDENT               	SCALE
)                   	)
                    	**
INT                 	2
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

INT                 	10
continue            	CONTINUE
NEW_LINE            	

IDENT               	NORM
=                   	=
IDENT               	SCALE
*                   	*
IDENT               	SQRT
(                   	(
IDENT               	SSQ
)                   	)
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	DZNRM2
=                   	=
IDENT               	NORM
NEW_LINE            	

return              	RETURN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     End of DZNRM2.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

END                 	END
NEW_LINE            	

