COMMENT             	*> \brief \b SDSDOT
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =========== DOCUMENTATION ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	* Online html documentation available at
NEW_LINE            	

COMMENT             	*            http://www.netlib.org/lapack/explore-html/
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Definition:
NEW_LINE            	

COMMENT             	*  ===========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       REAL FUNCTION SDSDOT(N,SB,SX,INCX,SY,INCY)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Scalar Arguments ..
NEW_LINE            	

COMMENT             	*       REAL SB
NEW_LINE            	

COMMENT             	*       INTEGER INCX,INCY,N
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Array Arguments ..
NEW_LINE            	

COMMENT             	*       REAL SX(*),SY(*)
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*    Compute the inner product of two vectors with extended
NEW_LINE            	

COMMENT             	*    precision accumulation.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*    Returns S.P. result with dot product accumulated in D.P.
NEW_LINE            	

COMMENT             	*    SDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I*INCX)*SY(LY+I*INCY),
NEW_LINE            	

COMMENT             	*    where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is
NEW_LINE            	

COMMENT             	*    defined in a similar way using INCY.
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Arguments:
NEW_LINE            	

COMMENT             	*  ==========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \param[in] N
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          N is INTEGER
NEW_LINE            	

COMMENT             	*>          number of elements in input vector(s)
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] SB
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          SB is REAL
NEW_LINE            	

COMMENT             	*>          single precision scalar to be added to inner product
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] SX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          SX is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
NEW_LINE            	

COMMENT             	*>          single precision vector with N elements
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCX
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCX is INTEGER
NEW_LINE            	

COMMENT             	*>          storage spacing between elements of SX
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] SY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          SY is REAL array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
NEW_LINE            	

COMMENT             	*>          single precision vector with N elements
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \param[in] INCY
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>          INCY is INTEGER
NEW_LINE            	

COMMENT             	*>          storage spacing between elements of SY
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Lawson, C. L., (JPL), Hanson, R. J., (SNLA),
NEW_LINE            	

COMMENT             	*> \author Kincaid, D. R., (U. of Texas), Krogh, F. T., (JPL)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup complex_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Further Details:
NEW_LINE            	

COMMENT             	*  =====================
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    REFERENCES
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.
NEW_LINE            	

COMMENT             	*>    Krogh, Basic linear algebra subprograms for Fortran
NEW_LINE            	

COMMENT             	*>    usage, Algorithm No. 539, Transactions on Mathematical
NEW_LINE            	

COMMENT             	*>    Software 5, 3 (September 1979), pp. 308-323.
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    REVISION HISTORY  (YYMMDD)
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*>    791001  DATE WRITTEN
NEW_LINE            	

COMMENT             	*>    890531  Changed all specific intrinsics to generic.  (WRB)
NEW_LINE            	

COMMENT             	*>    890831  Modified array declarations.  (WRB)
NEW_LINE            	

COMMENT             	*>    890831  REVISION DATE from Version 3.2
NEW_LINE            	

COMMENT             	*>    891214  Prologue converted to Version 4.0 format.  (BAB)
NEW_LINE            	

COMMENT             	*>    920310  Corrected definition of LX in DESCRIPTION.  (WRB)
NEW_LINE            	

COMMENT             	*>    920501  Reformatted the REFERENCES section.  (WRB)
NEW_LINE            	

COMMENT             	*>    070118  Reformat to LAPACK coding style
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*    =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       .. Local Scalars ..
NEW_LINE            	

COMMENT             	*       DOUBLE PRECISION DSDOT
NEW_LINE            	

COMMENT             	*       INTEGER I,KX,KY,NS
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       .. Intrinsic Functions ..
NEW_LINE            	

COMMENT             	*       INTRINSIC DBLE
NEW_LINE            	

COMMENT             	*       ..
NEW_LINE            	

COMMENT             	*       DSDOT = SB
NEW_LINE            	

COMMENT             	*       IF (N.LE.0) THEN
NEW_LINE            	

COMMENT             	*          SDSDOT = DSDOT
NEW_LINE            	

COMMENT             	*          RETURN
NEW_LINE            	

COMMENT             	*       END IF
NEW_LINE            	

COMMENT             	*       IF (INCX.EQ.INCY .AND. INCX.GT.0) THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       Code for equal and positive increments.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*          NS = N*INCX
NEW_LINE            	

COMMENT             	*          DO I = 1,NS,INCX
NEW_LINE            	

COMMENT             	*             DSDOT = DSDOT + DBLE(SX(I))*DBLE(SY(I))
NEW_LINE            	

COMMENT             	*          END DO
NEW_LINE            	

COMMENT             	*       ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*       Code for unequal or nonpositive increments.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*          KX = 1
NEW_LINE            	

COMMENT             	*          KY = 1
NEW_LINE            	

COMMENT             	*          IF (INCX.LT.0) KX = 1 + (1-N)*INCX
NEW_LINE            	

COMMENT             	*          IF (INCY.LT.0) KY = 1 + (1-N)*INCY
NEW_LINE            	

COMMENT             	*          DO I = 1,N
NEW_LINE            	

COMMENT             	*             DSDOT = DSDOT + DBLE(SX(KX))*DBLE(SY(KY))
NEW_LINE            	

COMMENT             	*             KX = KX + INCX
NEW_LINE            	

COMMENT             	*             KY = KY + INCY
NEW_LINE            	

COMMENT             	*          END DO
NEW_LINE            	

COMMENT             	*       END IF
NEW_LINE            	

COMMENT             	*       SDSDOT = DSDOT
NEW_LINE            	

COMMENT             	*       RETURN
NEW_LINE            	

COMMENT             	*       END
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \par Purpose:
NEW_LINE            	

COMMENT             	*  =============
NEW_LINE            	

COMMENT             	*>
NEW_LINE            	

COMMENT             	*> \verbatim
NEW_LINE            	

COMMENT             	*> \endverbatim
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Authors:
NEW_LINE            	

COMMENT             	*  ========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \author Univ. of Tennessee
NEW_LINE            	

COMMENT             	*> \author Univ. of California Berkeley
NEW_LINE            	

COMMENT             	*> \author Univ. of Colorado Denver
NEW_LINE            	

COMMENT             	*> \author NAG Ltd.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \date November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*> \ingroup single_blas_level1
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

REAL                	REAL
FUNCTION            	FUNCTION
IDENT               	SDSDOT
(                   	(
IDENT               	N
,                   	,
IDENT               	SB
,                   	,
IDENT               	SX
,                   	,
IDENT               	INCX
,                   	,
IDENT               	SY
,                   	,
IDENT               	INCY
)                   	)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  -- Reference BLAS level1 routine (version 3.8.0) --
NEW_LINE            	

COMMENT             	*  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
NEW_LINE            	

COMMENT             	*  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
NEW_LINE            	

COMMENT             	*     November 2017
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Scalar Arguments ..
NEW_LINE            	

REAL                	REAL
IDENT               	SB
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	INCX
,                   	,
IDENT               	INCY
,                   	,
IDENT               	N
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Array Arguments ..
NEW_LINE            	

REAL                	REAL
IDENT               	SX
(                   	(
*                   	*
)                   	)
,                   	,
IDENT               	SY
(                   	(
*                   	*
)                   	)
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  PURPOSE
NEW_LINE            	

COMMENT             	*  =======
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Compute the inner product of two vectors with extended
NEW_LINE            	

COMMENT             	*  precision accumulation.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Returns S.P. result with dot product accumulated in D.P.
NEW_LINE            	

COMMENT             	*  SDSDOT = SB + sum for I = 0 to N-1 of SX(LX+I*INCX)*SY(LY+I*INCY),
NEW_LINE            	

COMMENT             	*  where LX = 1 if INCX .GE. 0, else LX = 1+(1-N)*INCX, and LY is
NEW_LINE            	

COMMENT             	*  defined in a similar way using INCY.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  AUTHOR
NEW_LINE            	

COMMENT             	*  ======
NEW_LINE            	

COMMENT             	*  Lawson, C. L., (JPL), Hanson, R. J., (SNLA),
NEW_LINE            	

COMMENT             	*  Kincaid, D. R., (U. of Texas), Krogh, F. T., (JPL)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  ARGUMENTS
NEW_LINE            	

COMMENT             	*  =========
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  N      (input) INTEGER
NEW_LINE            	

COMMENT             	*         number of elements in input vector(s)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  SB     (input) REAL
NEW_LINE            	

COMMENT             	*         single precision scalar to be added to inner product
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  SX     (input) REAL array, dimension (N)
NEW_LINE            	

COMMENT             	*         single precision vector with N elements
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  INCX   (input) INTEGER
NEW_LINE            	

COMMENT             	*         storage spacing between elements of SX
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  SY     (input) REAL array, dimension (N)
NEW_LINE            	

COMMENT             	*         single precision vector with N elements
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  INCY   (input) INTEGER
NEW_LINE            	

COMMENT             	*         storage spacing between elements of SY
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  SDSDOT (output) REAL
NEW_LINE            	

COMMENT             	*         single precision dot product (SB if N .LE. 0)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  Further Details
NEW_LINE            	

COMMENT             	*  ===============
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  REFERENCES
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  C. L. Lawson, R. J. Hanson, D. R. Kincaid and F. T.
NEW_LINE            	

COMMENT             	*  Krogh, Basic linear algebra subprograms for Fortran
NEW_LINE            	

COMMENT             	*  usage, Algorithm No. 539, Transactions on Mathematical
NEW_LINE            	

COMMENT             	*  Software 5, 3 (September 1979), pp. 308-323.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  REVISION HISTORY  (YYMMDD)
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  791001  DATE WRITTEN
NEW_LINE            	

COMMENT             	*  890531  Changed all specific intrinsics to generic.  (WRB)
NEW_LINE            	

COMMENT             	*  890831  Modified array declarations.  (WRB)
NEW_LINE            	

COMMENT             	*  890831  REVISION DATE from Version 3.2
NEW_LINE            	

COMMENT             	*  891214  Prologue converted to Version 4.0 format.  (BAB)
NEW_LINE            	

COMMENT             	*  920310  Corrected definition of LX in DESCRIPTION.  (WRB)
NEW_LINE            	

COMMENT             	*  920501  Reformatted the REFERENCES section.  (WRB)
NEW_LINE            	

COMMENT             	*  070118  Reformat to LAPACK coding style
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*  =====================================================================
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     .. Local Scalars ..
NEW_LINE            	

REAL                	DOUBLE
IDENT               	PRECISION
IDENT               	DSDOT
NEW_LINE            	

INTEGER             	INTEGER
IDENT               	I
,                   	,
IDENT               	KX
,                   	,
IDENT               	KY
,                   	,
IDENT               	NS
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

COMMENT             	*     .. Intrinsic Functions ..
NEW_LINE            	

INTRINSIC           	INTRINSIC
IDENT               	DBLE
NEW_LINE            	

COMMENT             	*     ..
NEW_LINE            	

IDENT               	DSDOT
=                   	=
IDENT               	SB
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	N
<=                  	.LE.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

IDENT               	SDSDOT
=                   	=
IDENT               	DSDOT
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
==                  	.EQ.
IDENT               	INCY
&&                  	.AND.
IDENT               	INCX
>                   	.GT.
INT                 	0
)                   	)
THEN                	THEN
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Code for equal and positive increments.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	NS
=                   	=
IDENT               	N
*                   	*
IDENT               	INCX
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	NS
,                   	,
IDENT               	INCX
NEW_LINE            	

IDENT               	DSDOT
=                   	=
IDENT               	DSDOT
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	SX
(                   	(
IDENT               	I
)                   	)
)                   	)
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	SY
(                   	(
IDENT               	I
)                   	)
)                   	)
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

else                	ELSE
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

COMMENT             	*     Code for unequal or nonpositive increments.
NEW_LINE            	

COMMENT             	*
NEW_LINE            	

IDENT               	KX
=                   	=
INT                 	1
NEW_LINE            	

IDENT               	KY
=                   	=
INT                 	1
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCX
<                   	.LT.
INT                 	0
)                   	)
IDENT               	KX
=                   	=
INT                 	1
+                   	+
(                   	(
INT                 	1
-                   	-
IDENT               	N
)                   	)
*                   	*
IDENT               	INCX
NEW_LINE            	

if                  	IF
(                   	(
IDENT               	INCY
<                   	.LT.
INT                 	0
)                   	)
IDENT               	KY
=                   	=
INT                 	1
+                   	+
(                   	(
INT                 	1
-                   	-
IDENT               	N
)                   	)
*                   	*
IDENT               	INCY
NEW_LINE            	

DO                  	DO
IDENT               	I
=                   	=
INT                 	1
,                   	,
IDENT               	N
NEW_LINE            	

IDENT               	DSDOT
=                   	=
IDENT               	DSDOT
+                   	+
IDENT               	DBLE
(                   	(
IDENT               	SX
(                   	(
IDENT               	KX
)                   	)
)                   	)
*                   	*
IDENT               	DBLE
(                   	(
IDENT               	SY
(                   	(
IDENT               	KY
)                   	)
)                   	)
NEW_LINE            	

IDENT               	KX
=                   	=
IDENT               	KX
+                   	+
IDENT               	INCX
NEW_LINE            	

IDENT               	KY
=                   	=
IDENT               	KY
+                   	+
IDENT               	INCY
NEW_LINE            	

END                 	END
DO                  	DO
NEW_LINE            	

END                 	END
if                  	IF
NEW_LINE            	

IDENT               	SDSDOT
=                   	=
IDENT               	DSDOT
NEW_LINE            	

return              	RETURN
NEW_LINE            	

END                 	END
NEW_LINE            	

