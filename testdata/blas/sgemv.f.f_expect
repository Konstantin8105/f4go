 SUBROUTINE SGEMV ( TRANS , M , N , ALPHA , A , LDA , X , INCX , BETA , Y , INCY )
 REAL ALPHA , BETA
 INTEGER INCX , INCY , LDA , M , N
 CHARACTER TRANS
 REAL A ( LDA , * ) , X ( * ) , Y ( * )
 REAL ONE , ZERO
 PARAMETER ( ONE = 1.0E+0 , ZERO = 0.0E+0 )
 REAL TEMP
 INTEGER I , INFO , IX , IY , J , JX , JY , KX , KY , LENX , LENY
 LOGICAL LSAME
 EXTERNAL LSAME
 EXTERNAL XERBLA
 INTRINSIC MAX
 INFO = 0
 IF ( .NOT. LSAME ( TRANS , 'N' ) .AND. .NOT. LSAME ( TRANS , 'T' ) .AND. .NOT. LSAME ( TRANS , 'C' ) ) THEN
 INFO = 1
 ELSE IF ( M .LT. 0 ) THEN
 INFO = 2
 ELSE IF ( N .LT. 0 ) THEN
 INFO = 3
 ELSE IF ( LDA .LT. MAX ( 1 , M ) ) THEN
 INFO = 6
 ELSE IF ( INCX .EQ. 0 ) THEN
 INFO = 8
 ELSE IF ( INCY .EQ. 0 ) THEN
 INFO = 11
 END
 IF ( INFO .NE. 0 ) THEN
 CALL XERBLA ( 'SGEMV ' , INFO )
 RETURN
 END
 IF ( ( M .EQ. 0 ) .OR. ( N .EQ. 0 ) .OR. ( ( ALPHA .EQ. ZERO ) .AND. ( BETA .EQ. ONE ) ) ) RETURN
 IF ( LSAME ( TRANS , 'N' ) ) THEN
 LENX = N
 LENY = M
 ELSE
 LENX = M
 LENY = N
 END
 IF ( INCX .GT. 0 ) THEN
 KX = 1
 ELSE
 KX = 1 - ( LENX - 1 ) * INCX
 END
 IF ( INCY .GT. 0 ) THEN
 KY = 1
 ELSE
 KY = 1 - ( LENY - 1 ) * INCY
 END
 IF ( BETA .NE. ONE ) THEN
 IF ( INCY .EQ. 1 ) THEN
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , LENY
 Y ( I ) = ZERO
 end

 ELSE
 DO I = 1 , LENY
 Y ( I ) = BETA * Y ( I )
 end

 END
 ELSE
 IY = KY
 IF ( BETA .EQ. ZERO ) THEN
 DO I = 1 , LENY
 Y ( IY ) = ZERO
 IY = IY + INCY
 end

 ELSE
 DO I = 1 , LENY
 Y ( IY ) = BETA * Y ( IY )
 IY = IY + INCY
 end

 END
 END
 END
 IF ( ALPHA .EQ. ZERO ) RETURN
 IF ( LSAME ( TRANS , 'N' ) ) THEN
 JX = KX
 IF ( INCY .EQ. 1 ) THEN
 DO J = 1 , N
 TEMP = ALPHA * X ( JX )
 DO I = 1 , M
 Y ( I ) = Y ( I ) + TEMP * A ( I , J )
 end

 JX = JX + INCX
 end

 ELSE
 DO J = 1 , N
 TEMP = ALPHA * X ( JX )
 IY = KY
 DO I = 1 , M
 Y ( IY ) = Y ( IY ) + TEMP * A ( I , J )
 IY = IY + INCY
 end

 JX = JX + INCX
 end

 END
 ELSE
 JY = KY
 IF ( INCX .EQ. 1 ) THEN
 DO J = 1 , N
 TEMP = ZERO
 DO I = 1 , M
 TEMP = TEMP + A ( I , J ) * X ( I )
 end

 Y ( JY ) = Y ( JY ) + ALPHA * TEMP
 JY = JY + INCY
 end

 ELSE
 DO J = 1 , N
 TEMP = ZERO
 IX = KX
 DO I = 1 , M
 TEMP = TEMP + A ( I , J ) * X ( IX )
 IX = IX + INCX
 end

 Y ( JY ) = Y ( JY ) + ALPHA * TEMP
 JY = JY + INCY
 end

 END
 END
 RETURN
 END
